---
description: Metadata handling patterns for DeFi position detection
globs: ["packages/workers/src/**/*", "packages/adapters-library/src/types/**/*"]
alwaysApply: false
---

# Metadata Handling Rules

This rule covers the metadata handling system for DeFi position detection, including the `metadata` configuration.

## üîß Metadata Configuration

### Adapter Settings Structure
When creating adapters that need to extract additional metadata from events:

```typescript
adapterSettings: AdapterSettings = {
  userEvent: {
    eventAbi: 'event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index)',
    userAddressArgument: 'withdrawal_credentials',
    metadata: { argumentName: 'pubkey' },  // Extracts 'pubkey' as additional metadata
    transformUserAddressType: 'eth2-withdrawal-credentials',
  },
}

### Logs Table Structure
```sql
CREATE TABLE logs (
  address TEXT NOT NULL,
  contract_address TEXT NOT NULL,
  metadata_key TEXT,
  metadata_value TEXT,
  UNIQUE (address, contract_address, metadata_key, metadata_value)
);
```

### Jobs Table Structure
```sql
CREATE TABLE jobs (
  contract_address TEXT NOT NULL,
  topic_0 TEXT NOT NULL,
  user_address_index INTEGER NOT NULL,
  block_number INTEGER NOT NULL,
  status TEXT NOT NULL DEFAULT 'pending',
  additional_metadata_mapped_to_token_id TEXT,
  transform_user_address_type TEXT,
  PRIMARY KEY (contract_address, topic_0, user_address_index)
);
```

## üîÑ Processing Flow

### 1. Event Log Parsing
```typescript
// In parseUserEventLog function
if (metadata) {
  metadata = {}
  
  const argIndex = iface.fragments[0]?.inputs.findIndex(
    (input) => input.name === metadata,
  )

  if (argIndex === -1) {
    throw new Error(
      `Argument ${metadata} not found in event abi ${eventAbi}`,
    )
  }

  if (argIndex !== undefined && decoded.args[argIndex] !== undefined) {
    metadata[metadata] = decoded.args[argIndex] as string
  }
}
```

### 2. Database Storage
```typescript
// Store metadata in logs table
await client.query(
  `INSERT INTO logs (address, contract_address, metadata_key, metadata_value)
   VALUES ($1, $2, $3, $4)
   ON CONFLICT DO NOTHING`,
  [userAddress, contractAddress, metadataKey, metadataValue]
)
```

### 3. Position Detection Query
```typescript
// Query to get positions with metadata
const query = `
  SELECT 
    l.address,
    l.contract_address,
    array_agg(l.metadata_value) as token_ids
  FROM logs l
  WHERE l.address = ANY($1)
    AND l.contract_address = ANY($2)
    AND l.metadata_key = $3
  GROUP BY l.address, l.contract_address
`
```

## üéØ Usage Patterns

### ETH2 Validator Staking
```typescript
// Extract pubkey as metadata
metadata: 'pubkey'
// Results in: { pubkey: "0x1234..." }
```

### Uniswap V4 Positions
```typescript
// Extract tokenId as metadata
metadata: 'tokenId'
// Results in: { tokenId: "123" }
```

### Custom Protocols
```typescript
// Extract any event argument as metadata
metadata: 'customField'
// Results in: { customField: "value" }
```

## ‚ö†Ô∏è Important Considerations

### 1. Event ABI Validation
- Always verify the argument name exists in the event ABI
- Handle cases where the argument might not be present
- Use proper error handling for missing arguments

### 2. Data Type Consistency
- All metadata values are stored as strings
- Convert to appropriate types when processing
- Handle BigInt values properly

### 3. Performance Optimization
- Use array aggregation for multiple metadata values
- Index on frequently queried columns
- Consider batch processing for large datasets

### 4. Error Handling
- Gracefully handle missing metadata
- Log errors for debugging
- Return empty arrays instead of throwing errors

## üîç Debugging Tips

### 1. Log Metadata Extraction
```typescript
console.log('Extracted metadata:', {
  argument: metadata,
  value: decoded.args[argIndex],
  metadata
})
```

### 2. Verify Database Queries
```typescript
// Test the position detection query
const testQuery = `
  SELECT * FROM logs 
  WHERE address = $1 
    AND contract_address = $2 
    AND metadata_key = $3
`
```

### 3. Check Event Parsing
```typescript
// Verify event ABI parsing
const iface = new Interface([eventAbi])
const decoded = iface.parseLog(log)
console.log('Decoded args:', decoded.args)
```

## üìù Best Practices

1. **Always validate**: Check that the argument exists in the event ABI
2. **Handle errors gracefully**: Don't let metadata extraction break the entire flow
3. **Use consistent naming**: Follow the same pattern for metadata keys
4. **Test thoroughly**: Verify with real event data
5. **Document clearly**: Explain what metadata is being extracted and why