name: Node.js Build and Test
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  lint-and-verify-cli:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Install dependencies
        run: npm ci

      - name: Verify there are no linting and formatting errors
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Verify tsc config
        run: npm run test:tsc

      - name: Create new adapter with new CLI
        run: |
          npm run new-adapter -- -y -t "Smart Adapter Builder"
          npm run build
          npm run new-adapter -- -y -t "VotingEscrowAdapter (like curve and stargate voting escrow)"
          npm run build
          npm run new-adapter -- -y -t UniswapV2PoolForkAdapter
          npm run build

  generate-protocol-matrix:
    runs-on: ubuntu-latest

    outputs:
      protocol-matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Copy .env.example to .env
        run: cp .env.example .env

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - id: set-matrix
        run: |
          MATRIX=$(npm run -s support | jq -r 'keys | @json')
          echo "matrix=$MATRIX" >> "$GITHUB_OUTPUT"
        env:
          DEFI_ADAPTERS_LOG_LEVEL: silent # Suppress logs during execution

  adapter-snapshots-tests:
    needs: generate-protocol-matrix

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        protocol: ${{ fromJson(needs.generate-protocol-matrix.outputs.protocol-matrix) }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - run: echo ${{ fromJson(needs.generate-protocol-matrix.outputs.protocol-matrix) }}

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm run test:adapter-snapshots --protocolid=${{ matrix.protocol }} -- --reporter=blob --coverage --outputFile=.vitest-reports/blob-adapter-snapshots-${{ matrix.protocol }}.json
        env:
          DEFI_ADAPTERS_PROVIDER_ETHEREUM: ${{ secrets.ETHEREUM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_OPTIMISM: ${{ secrets.OPTIMISM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_BSC: ${{ secrets.BSC_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_POLYGON: ${{ secrets.POLYGON_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_FANTOM: ${{ secrets.FANTOM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_BASE: ${{ secrets.BASE_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_ARBITRUM: ${{ secrets.ARBITRUM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_AVALANCHE: ${{ secrets.AVALANCHE_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_LINEA: ${{ secrets.LINEA_PROVIDER_URL }}
          DEFI_ADAPTERS_LOG_LEVEL: warn

      - name: Upload partial report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.job }}-${{ matrix.protocol }}
          path: .vitest-reports/*
          retention-days: 1
          include-hidden-files: true
          if-no-files-found: error

  unit-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm run test:unit -- --reporter=blob --coverage --outputFile=.vitest-reports/blob-unit.json
        env:
          DEFI_ADAPTERS_PROVIDER_ETHEREUM: ${{ secrets.ETHEREUM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_OPTIMISM: ${{ secrets.OPTIMISM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_BSC: ${{ secrets.BSC_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_POLYGON: ${{ secrets.POLYGON_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_FANTOM: ${{ secrets.FANTOM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_BASE: ${{ secrets.BASE_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_ARBITRUM: ${{ secrets.ARBITRUM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_AVALANCHE: ${{ secrets.AVALANCHE_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_LINEA: ${{ secrets.LINEA_PROVIDER_URL }}
          DEFI_ADAPTERS_LOG_LEVEL: warn

      - name: Upload partial report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.job }}
          path: .vitest-reports/*
          retention-days: 1
          include-hidden-files: true
          if-no-files-found: error

  template-snapshots-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run test
        run: npm run test:template-snapshots -- --reporter=blob --coverage --outputFile=.vitest-reports/blob-template-snapshots.json
        env:
          DEFI_ADAPTERS_LOG_LEVEL: warn

      - name: Upload partial report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.job }}
          path: .vitest-reports/*
          retention-days: 1
          include-hidden-files: true
          if-no-files-found: error

  smoke-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Run tests
        run: npm run test:smoke -- --reporter=blob --coverage --outputFile=.vitest-reports/blob-smoke.json
        env:
          DEFI_ADAPTERS_PROVIDER_ETHEREUM: ${{ secrets.ETHEREUM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_OPTIMISM: ${{ secrets.OPTIMISM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_BSC: ${{ secrets.BSC_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_POLYGON: ${{ secrets.POLYGON_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_FANTOM: ${{ secrets.FANTOM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_BASE: ${{ secrets.BASE_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_ARBITRUM: ${{ secrets.ARBITRUM_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_AVALANCHE: ${{ secrets.AVALANCHE_PROVIDER_URL }}
          DEFI_ADAPTERS_PROVIDER_LINEA: ${{ secrets.LINEA_PROVIDER_URL }}
          DEFI_ADAPTERS_LOG_LEVEL: warn

      - name: Upload partial report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.job }}
          path: .vitest-reports/*
          retention-days: 1
          include-hidden-files: true
          if-no-files-found: error

  coverage-report:
    needs: [template-snapshots-tests, smoke-tests, unit-tests]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          path: .vitest-reports
          pattern: coverage-*
          merge-multiple: true

      - name: Generate coverage report
        run: npm run test:cov:merge

      - name: Run sonarcloud-scan
        uses: sonarsource/sonarcloud-github-action@v2.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

