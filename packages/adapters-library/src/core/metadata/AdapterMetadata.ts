/* Autogenerated file. Edit at your own risk */

import AngleProtocolSavingsArbitrumProtocolTokens from '../../adapters/angle-protocol/products/savings/metadata/arb.protocol-tokens.json'
import AngleProtocolSavingsAvalancheProtocolTokens from '../../adapters/angle-protocol/products/savings/metadata/avax.protocol-tokens.json'
import AngleProtocolSavingsBaseProtocolTokens from '../../adapters/angle-protocol/products/savings/metadata/base.protocol-tokens.json'
import AngleProtocolSavingsBscProtocolTokens from '../../adapters/angle-protocol/products/savings/metadata/bsc.protocol-tokens.json'
import AngleProtocolSavingsEthereumProtocolTokens from '../../adapters/angle-protocol/products/savings/metadata/ethereum.protocol-tokens.json'
import AngleProtocolSavingsLineaProtocolTokens from '../../adapters/angle-protocol/products/savings/metadata/linea.protocol-tokens.json'
import AngleProtocolSavingsPolygonProtocolTokens from '../../adapters/angle-protocol/products/savings/metadata/matic.protocol-tokens.json'
import AngleProtocolSavingsOptimismProtocolTokens from '../../adapters/angle-protocol/products/savings/metadata/op.protocol-tokens.json'
import BeefyCowTokenArbitrumProtocolToken from '../../adapters/beefy/products/cow-token/metadata/arb.protocol-token.json'
import BeefyCowTokenBaseProtocolToken from '../../adapters/beefy/products/cow-token/metadata/base.protocol-token.json'
import BeefyCowTokenLineaProtocolToken from '../../adapters/beefy/products/cow-token/metadata/linea.protocol-token.json'
import BeefyCowTokenPolygonProtocolToken from '../../adapters/beefy/products/cow-token/metadata/matic.protocol-token.json'
import BeefyCowTokenOptimismProtocolToken from '../../adapters/beefy/products/cow-token/metadata/op.protocol-token.json'
import BeefyMooTokenArbitrumProtocolToken from '../../adapters/beefy/products/moo-token/metadata/arb.protocol-token.json'
import BeefyMooTokenBaseProtocolToken from '../../adapters/beefy/products/moo-token/metadata/base.protocol-token.json'
import BeefyMooTokenBscProtocolToken from '../../adapters/beefy/products/moo-token/metadata/bsc.protocol-token.json'
import BeefyMooTokenEthereumProtocolToken from '../../adapters/beefy/products/moo-token/metadata/ethereum.protocol-token.json'
import BeefyMooTokenFantomProtocolToken from '../../adapters/beefy/products/moo-token/metadata/fantom.protocol-token.json'
import BeefyMooTokenLineaProtocolToken from '../../adapters/beefy/products/moo-token/metadata/linea.protocol-token.json'
import BeefyMooTokenPolygonProtocolToken from '../../adapters/beefy/products/moo-token/metadata/matic.protocol-token.json'
import BeefyMooTokenOptimismProtocolToken from '../../adapters/beefy/products/moo-token/metadata/op.protocol-token.json'

import CompoundV2BorrowMarketEthereumProtocolToken from '../../adapters/compound-v2/products/borrow-market/metadata/ethereum.protocol-token.json'
import CompoundV2SupplyMarketEthereumProtocolToken from '../../adapters/compound-v2/products/supply-market/metadata/ethereum.protocol-token.json'

import ConvexStakingEthereumMetadata from '../../adapters/convex/products/staking/metadata/ethereum.metadata.json'
import CurvePoolArbitrumProtocolToken from '../../adapters/curve/products/pool/metadata/arb.protocol-token.json'
import CurvePoolAvalancheProtocolToken from '../../adapters/curve/products/pool/metadata/avax.protocol-token.json'
import CurvePoolBaseProtocolToken from '../../adapters/curve/products/pool/metadata/base.protocol-token.json'
import CurvePoolEthereumProtocolToken from '../../adapters/curve/products/pool/metadata/ethereum.protocol-token.json'
import CurvePoolFantomProtocolToken from '../../adapters/curve/products/pool/metadata/fantom.protocol-token.json'
import CurvePoolPolygonProtocolToken from '../../adapters/curve/products/pool/metadata/matic.protocol-token.json'
import CurvePoolOptimismProtocolToken from '../../adapters/curve/products/pool/metadata/op.protocol-token.json'
import CurveStakingArbitrumProtocolToken from '../../adapters/curve/products/staking/metadata/arb.protocol-token.json'
import CurveStakingAvalancheProtocolToken from '../../adapters/curve/products/staking/metadata/avax.protocol-token.json'
import CurveStakingBaseProtocolToken from '../../adapters/curve/products/staking/metadata/base.protocol-token.json'
import CurveStakingEthereumProtocolToken from '../../adapters/curve/products/staking/metadata/ethereum.protocol-token.json'
import CurveStakingFantomProtocolToken from '../../adapters/curve/products/staking/metadata/fantom.protocol-token.json'
import CurveStakingPolygonProtocolToken from '../../adapters/curve/products/staking/metadata/matic.protocol-token.json'
import CurveStakingOptimismProtocolToken from '../../adapters/curve/products/staking/metadata/op.protocol-token.json'
import CurveVotingEscrowEthereumProtocolToken from '../../adapters/curve/products/voting-escrow/metadata/ethereum.protocol-token.json'
import EthenaEthenaEthereumProtocolToken from '../../adapters/ethena/products/ethena/metadata/ethereum.protocol-token.json'
import FluxBorrowMarketEthereumProtocolToken from '../../adapters/flux/products/borrow-market/metadata/ethereum.protocol-token.json'
import FluxSupplyMarketEthereumProtocolToken from '../../adapters/flux/products/supply-market/metadata/ethereum.protocol-token.json'

import LynexClassicLineaProtocolToken from '../../adapters/lynex/products/classic/metadata/linea.protocol-token.json'

import MorphoAaveV2OptimizerBorrowEthereumOptimizerBorrow from '../../adapters/morpho-aave-v2/products/optimizer-borrow/metadata/ethereum.optimizer-borrow.json'
import MorphoAaveV2OptimizerSupplyEthereumOptimizerSupply from '../../adapters/morpho-aave-v2/products/optimizer-supply/metadata/ethereum.optimizer-supply.json'
import MorphoAaveV3OptimizerBorrowEthereumOptimizerBorrow from '../../adapters/morpho-aave-v3/products/optimizer-borrow/metadata/ethereum.optimizer-borrow.json'
import MorphoAaveV3OptimizerSupplyEthereumOptimizerSupply from '../../adapters/morpho-aave-v3/products/optimizer-supply/metadata/ethereum.optimizer-supply.json'
import MorphoBlueMarketBorrowEthereumMarketBorrow from '../../adapters/morpho-blue/products/market-borrow/metadata/ethereum.market-borrow.json'
import MorphoBlueMarketSupplyEthereumMarketSupply from '../../adapters/morpho-blue/products/market-supply/metadata/ethereum.market-supply.json'
import MorphoCompoundV2OptimizerBorrowEthereumOptimizerBorrow from '../../adapters/morpho-compound-v2/products/optimizer-borrow/metadata/ethereum.optimizer-borrow.json'
import MorphoCompoundV2OptimizerSupplyEthereumOptimizerSupply from '../../adapters/morpho-compound-v2/products/optimizer-supply/metadata/ethereum.optimizer-supply.json'

import { Protocol } from '../../adapters/protocols'
import QuickswapV2PoolPolygonProtocolToken from '../../adapters/quickswap-v2/products/pool/metadata/matic.protocol-token.json'
import SonneBorrowMarketBaseProtocolToken from '../../adapters/sonne/products/borrow-market/metadata/base.protocol-token.json'
import SonneBorrowMarketOptimismProtocolToken from '../../adapters/sonne/products/borrow-market/metadata/op.protocol-token.json'
import SonneSupplyMarketBaseProtocolToken from '../../adapters/sonne/products/supply-market/metadata/base.protocol-token.json'
import SonneSupplyMarketOptimismProtocolToken from '../../adapters/sonne/products/supply-market/metadata/op.protocol-token.json'
import StargateVotingEscrowEthereumProtocolToken from '../../adapters/stargate/products/voting-escrow/metadata/ethereum.protocol-token.json'

import { Json } from '../../types/json'
import { Chain } from '../constants/chains'

import BeefyCowTokenAvalancheProtocolToken from '../../adapters/beefy/products/cow-token/metadata/avax.protocol-token.json'

import SparkV1VariableDebtTokenEthereumVariableDebtTokenV1 from '../../adapters/spark-v1/products/variable-debt-token/metadata/ethereum.variable-debt-token-v1.json'

import PendleYieldTokenEthereumMarket from '../../adapters/pendle/products/yield-token/metadata/ethereum.market.json'

import PendlePrincipleTokenEthereumMarket from '../../adapters/pendle/products/principle-token/metadata/ethereum.market.json'

import PendleStandardisedYieldTokenEthereumMarket from '../../adapters/pendle/products/standardised-yield-token/metadata/ethereum.market.json'

import PendleLpTokenEthereumMarket from '../../adapters/pendle/products/lp-token/metadata/ethereum.market.json'

import PendleYieldTokenOptimismMarket from '../../adapters/pendle/products/yield-token/metadata/op.market.json'

import PendlePrincipleTokenOptimismMarket from '../../adapters/pendle/products/principle-token/metadata/op.market.json'

import PendleStandardisedYieldTokenOptimismMarket from '../../adapters/pendle/products/standardised-yield-token/metadata/op.market.json'

import PendleLpTokenOptimismMarket from '../../adapters/pendle/products/lp-token/metadata/op.market.json'

import PendleYieldTokenBscMarket from '../../adapters/pendle/products/yield-token/metadata/bsc.market.json'

import PendlePrincipleTokenBscMarket from '../../adapters/pendle/products/principle-token/metadata/bsc.market.json'

import PendleStandardisedYieldTokenBscMarket from '../../adapters/pendle/products/standardised-yield-token/metadata/bsc.market.json'

import PendleLpTokenBscMarket from '../../adapters/pendle/products/lp-token/metadata/bsc.market.json'

import PendleYieldTokenArbitrumMarket from '../../adapters/pendle/products/yield-token/metadata/arb.market.json'

import PendlePrincipleTokenArbitrumMarket from '../../adapters/pendle/products/principle-token/metadata/arb.market.json'

import PendleStandardisedYieldTokenArbitrumMarket from '../../adapters/pendle/products/standardised-yield-token/metadata/arb.market.json'

import PendleLpTokenArbitrumMarket from '../../adapters/pendle/products/lp-token/metadata/arb.market.json'

import DeriPoolBscProtocolMetadata from '../../adapters/deri/products/pool/metadata/bsc.protocol-metadata.json'

import DeriPoolArbitrumProtocolMetadata from '../../adapters/deri/products/pool/metadata/arb.protocol-metadata.json'

import DeriPoolLineaProtocolMetadata from '../../adapters/deri/products/pool/metadata/linea.protocol-metadata.json'

import RenzoEzEthArbitrumEzEth from '../../adapters/renzo/products/ez-eth/metadata/arb.ez-eth.json'
import RenzoEzEthBaseEzEth from '../../adapters/renzo/products/ez-eth/metadata/base.ez-eth.json'
import RenzoEzEthBscEzEth from '../../adapters/renzo/products/ez-eth/metadata/bsc.ez-eth.json'
import RenzoEzEthEthereumEzEth from '../../adapters/renzo/products/ez-eth/metadata/ethereum.ez-eth.json'
import RenzoEzEthLineaEzEth from '../../adapters/renzo/products/ez-eth/metadata/linea.ez-eth.json'

import BeefyCowTokenEthereumProtocolToken from '../../adapters/beefy/products/cow-token/metadata/ethereum.protocol-token.json'

import BeefyRcowTokenEthereumProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/ethereum.protocol-token.json'

import BeefyRmooTokenEthereumProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/ethereum.protocol-token.json'

import BeefyRcowTokenOptimismProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/op.protocol-token.json'

import BeefyRmooTokenOptimismProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/op.protocol-token.json'

import BeefyCowTokenBscProtocolToken from '../../adapters/beefy/products/cow-token/metadata/bsc.protocol-token.json'

import BeefyRcowTokenBscProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/bsc.protocol-token.json'

import BeefyRmooTokenBscProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/bsc.protocol-token.json'

import BeefyRcowTokenPolygonProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/matic.protocol-token.json'

import BeefyRmooTokenPolygonProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/matic.protocol-token.json'

import BeefyCowTokenFantomProtocolToken from '../../adapters/beefy/products/cow-token/metadata/fantom.protocol-token.json'

import BeefyRcowTokenFantomProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/fantom.protocol-token.json'

import BeefyRmooTokenFantomProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/fantom.protocol-token.json'

import BeefyRcowTokenBaseProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/base.protocol-token.json'

import BeefyRmooTokenBaseProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/base.protocol-token.json'

import BeefyRcowTokenArbitrumProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/arb.protocol-token.json'

import BeefyRmooTokenArbitrumProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/arb.protocol-token.json'

import BeefyMooTokenAvalancheProtocolToken from '../../adapters/beefy/products/moo-token/metadata/avax.protocol-token.json'

import BeefyRcowTokenAvalancheProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/avax.protocol-token.json'

import BeefyRmooTokenAvalancheProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/avax.protocol-token.json'

import BeefyRcowTokenLineaProtocolToken from '../../adapters/beefy/products/rcow-token/metadata/linea.protocol-token.json'

import BeefyRmooTokenLineaProtocolToken from '../../adapters/beefy/products/rmoo-token/metadata/linea.protocol-token.json'

import SolvSolvBtcEthereumSolvBtc from '../../adapters/solv/products/solv-btc/metadata/ethereum.solv-btc.json'

import SolvSolvBtcBscSolvBtc from '../../adapters/solv/products/solv-btc/metadata/bsc.solv-btc.json'

import SolvSolvBtcArbitrumSolvBtc from '../../adapters/solv/products/solv-btc/metadata/arb.solv-btc.json'

import SolvSolvBtcAvalancheSolvBtc from '../../adapters/solv/products/solv-btc/metadata/avax.solv-btc.json'

import MorphoBlueMarketSupplyBaseMarketSupply from '../../adapters/morpho-blue/products/market-supply/metadata/base.market-supply.json'

import MorphoBlueMarketBorrowBaseMarketBorrow from '../../adapters/morpho-blue/products/market-borrow/metadata/base.market-borrow.json'

import ZeroLendATokenEthereumATokenV3 from '../../adapters/zerolend/products/a-token/metadata/ethereum.a-token-v3.json'

import ZeroLendStableDebtTokenEthereumStableDebtTokenV3 from '../../adapters/zerolend/products/stable-debt-token/metadata/ethereum.stable-debt-token-v3.json'

import ZeroLendVariableDebtTokenEthereumVariableDebtTokenV3 from '../../adapters/zerolend/products/variable-debt-token/metadata/ethereum.variable-debt-token-v3.json'

import ZeroLendATokenLineaATokenV3 from '../../adapters/zerolend/products/a-token/metadata/linea.a-token-v3.json'

import ZeroLendStableDebtTokenLineaStableDebtTokenV3 from '../../adapters/zerolend/products/stable-debt-token/metadata/linea.stable-debt-token-v3.json'

import ZeroLendVariableDebtTokenLineaVariableDebtTokenV3 from '../../adapters/zerolend/products/variable-debt-token/metadata/linea.variable-debt-token-v3.json'

export const MetadataFiles = new Map<string, Json>([
  [
    metadataKey({
      protocolId: Protocol.AngleProtocol,
      productId: 'savings',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-tokens',
    }),
    AngleProtocolSavingsArbitrumProtocolTokens,
  ],
  [
    metadataKey({
      protocolId: Protocol.AngleProtocol,
      productId: 'savings',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-tokens',
    }),
    AngleProtocolSavingsAvalancheProtocolTokens,
  ],
  [
    metadataKey({
      protocolId: Protocol.AngleProtocol,
      productId: 'savings',
      chainId: Chain.Base,
      fileKey: 'protocol-tokens',
    }),
    AngleProtocolSavingsBaseProtocolTokens,
  ],
  [
    metadataKey({
      protocolId: Protocol.AngleProtocol,
      productId: 'savings',
      chainId: Chain.Bsc,
      fileKey: 'protocol-tokens',
    }),
    AngleProtocolSavingsBscProtocolTokens,
  ],
  [
    metadataKey({
      protocolId: Protocol.AngleProtocol,
      productId: 'savings',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-tokens',
    }),
    AngleProtocolSavingsEthereumProtocolTokens,
  ],
  [
    metadataKey({
      protocolId: Protocol.AngleProtocol,
      productId: 'savings',
      chainId: Chain.Linea,
      fileKey: 'protocol-tokens',
    }),
    AngleProtocolSavingsLineaProtocolTokens,
  ],
  [
    metadataKey({
      protocolId: Protocol.AngleProtocol,
      productId: 'savings',
      chainId: Chain.Optimism,
      fileKey: 'protocol-tokens',
    }),
    AngleProtocolSavingsOptimismProtocolTokens,
  ],
  [
    metadataKey({
      protocolId: Protocol.AngleProtocol,
      productId: 'savings',
      chainId: Chain.Polygon,
      fileKey: 'protocol-tokens',
    }),
    AngleProtocolSavingsPolygonProtocolTokens,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenArbitrumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenAvalancheProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Bsc,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenBscProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Fantom,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenFantomProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Linea,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenLineaProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'cow-token',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    BeefyCowTokenPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenArbitrumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenAvalancheProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Bsc,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenBscProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Fantom,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenFantomProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Linea,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenLineaProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'moo-token',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    BeefyMooTokenPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenArbitrumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenAvalancheProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Bsc,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenBscProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Fantom,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenFantomProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Linea,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenLineaProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rcow-token',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    BeefyRcowTokenPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenArbitrumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenAvalancheProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Bsc,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenBscProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Fantom,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenFantomProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Linea,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenLineaProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Beefy,
      productId: 'rmoo-token',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    BeefyRmooTokenPolygonProtocolToken,
  ],

  [
    metadataKey({
      protocolId: Protocol.CompoundV2,
      productId: 'borrow-market',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    CompoundV2BorrowMarketEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.CompoundV2,
      productId: 'supply-market',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    CompoundV2SupplyMarketEthereumProtocolToken,
  ],

  [
    metadataKey({
      protocolId: Protocol.Convex,
      productId: 'staking',
      chainId: Chain.Ethereum,
      fileKey: 'metadata',
    }),
    ConvexStakingEthereumMetadata,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-token',
    }),
    CurvePoolArbitrumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-token',
    }),
    CurvePoolAvalancheProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    CurvePoolBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    CurvePoolEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Fantom,
      fileKey: 'protocol-token',
    }),
    CurvePoolFantomProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    CurvePoolOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    CurvePoolPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-token',
    }),
    CurveStakingArbitrumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-token',
    }),
    CurveStakingAvalancheProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    CurveStakingBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    CurveStakingEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Fantom,
      fileKey: 'protocol-token',
    }),
    CurveStakingFantomProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    CurveStakingOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    CurveStakingPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'voting-escrow',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    CurveVotingEscrowEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Deri,
      productId: 'pool',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-metadata',
    }),
    DeriPoolArbitrumProtocolMetadata,
  ],
  [
    metadataKey({
      protocolId: Protocol.Deri,
      productId: 'pool',
      chainId: Chain.Bsc,
      fileKey: 'protocol-metadata',
    }),
    DeriPoolBscProtocolMetadata,
  ],
  [
    metadataKey({
      protocolId: Protocol.Deri,
      productId: 'pool',
      chainId: Chain.Linea,
      fileKey: 'protocol-metadata',
    }),
    DeriPoolLineaProtocolMetadata,
  ],
  [
    metadataKey({
      protocolId: Protocol.Ethena,
      productId: 'ethena',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    EthenaEthenaEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Flux,
      productId: 'borrow-market',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    FluxBorrowMarketEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Flux,
      productId: 'supply-market',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    FluxSupplyMarketEthereumProtocolToken,
  ],

  [
    metadataKey({
      protocolId: Protocol.Lynex,
      productId: 'classic',
      chainId: Chain.Linea,
      fileKey: 'protocol-token',
    }),
    LynexClassicLineaProtocolToken,
  ],

  [
    metadataKey({
      protocolId: Protocol.MorphoAaveV2,
      productId: 'optimizer-borrow',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-borrow',
    }),
    MorphoAaveV2OptimizerBorrowEthereumOptimizerBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoAaveV2,
      productId: 'optimizer-supply',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-supply',
    }),
    MorphoAaveV2OptimizerSupplyEthereumOptimizerSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoAaveV3,
      productId: 'optimizer-borrow',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-borrow',
    }),
    MorphoAaveV3OptimizerBorrowEthereumOptimizerBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoAaveV3,
      productId: 'optimizer-supply',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-supply',
    }),
    MorphoAaveV3OptimizerSupplyEthereumOptimizerSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoBlue,
      productId: 'market-borrow',
      chainId: Chain.Base,
      fileKey: 'market-borrow',
    }),
    MorphoBlueMarketBorrowBaseMarketBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoBlue,
      productId: 'market-borrow',
      chainId: Chain.Ethereum,
      fileKey: 'market-borrow',
    }),
    MorphoBlueMarketBorrowEthereumMarketBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoBlue,
      productId: 'market-supply',
      chainId: Chain.Base,
      fileKey: 'market-supply',
    }),
    MorphoBlueMarketSupplyBaseMarketSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoBlue,
      productId: 'market-supply',
      chainId: Chain.Ethereum,
      fileKey: 'market-supply',
    }),
    MorphoBlueMarketSupplyEthereumMarketSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoCompoundV2,
      productId: 'optimizer-borrow',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-borrow',
    }),
    MorphoCompoundV2OptimizerBorrowEthereumOptimizerBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoCompoundV2,
      productId: 'optimizer-supply',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-supply',
    }),
    MorphoCompoundV2OptimizerSupplyEthereumOptimizerSupply,
  ],

  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'lp-token',
      chainId: Chain.Arbitrum,
      fileKey: 'market',
    }),
    PendleLpTokenArbitrumMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'lp-token',
      chainId: Chain.Bsc,
      fileKey: 'market',
    }),
    PendleLpTokenBscMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'lp-token',
      chainId: Chain.Ethereum,
      fileKey: 'market',
    }),
    PendleLpTokenEthereumMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'lp-token',
      chainId: Chain.Optimism,
      fileKey: 'market',
    }),
    PendleLpTokenOptimismMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'principle-token',
      chainId: Chain.Arbitrum,
      fileKey: 'market',
    }),
    PendlePrincipleTokenArbitrumMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'principle-token',
      chainId: Chain.Bsc,
      fileKey: 'market',
    }),
    PendlePrincipleTokenBscMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'principle-token',
      chainId: Chain.Ethereum,
      fileKey: 'market',
    }),
    PendlePrincipleTokenEthereumMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'principle-token',
      chainId: Chain.Optimism,
      fileKey: 'market',
    }),
    PendlePrincipleTokenOptimismMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'standardised-yield-token',
      chainId: Chain.Arbitrum,
      fileKey: 'market',
    }),
    PendleStandardisedYieldTokenArbitrumMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'standardised-yield-token',
      chainId: Chain.Bsc,
      fileKey: 'market',
    }),
    PendleStandardisedYieldTokenBscMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'standardised-yield-token',
      chainId: Chain.Ethereum,
      fileKey: 'market',
    }),
    PendleStandardisedYieldTokenEthereumMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'standardised-yield-token',
      chainId: Chain.Optimism,
      fileKey: 'market',
    }),
    PendleStandardisedYieldTokenOptimismMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'yield-token',
      chainId: Chain.Arbitrum,
      fileKey: 'market',
    }),
    PendleYieldTokenArbitrumMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'yield-token',
      chainId: Chain.Bsc,
      fileKey: 'market',
    }),
    PendleYieldTokenBscMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'yield-token',
      chainId: Chain.Ethereum,
      fileKey: 'market',
    }),
    PendleYieldTokenEthereumMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.Pendle,
      productId: 'yield-token',
      chainId: Chain.Optimism,
      fileKey: 'market',
    }),
    PendleYieldTokenOptimismMarket,
  ],
  [
    metadataKey({
      protocolId: Protocol.QuickswapV2,
      productId: 'pool',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    QuickswapV2PoolPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Arbitrum,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthArbitrumEzEth,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Base,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthBaseEzEth,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Bsc,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthBscEzEth,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Ethereum,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthEthereumEzEth,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Linea,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthLineaEzEth,
  ],

  [
    metadataKey({
      protocolId: Protocol.Solv,
      productId: 'solv-btc',
      chainId: Chain.Arbitrum,
      fileKey: 'solv-btc',
    }),
    SolvSolvBtcArbitrumSolvBtc,
  ],
  [
    metadataKey({
      protocolId: Protocol.Solv,
      productId: 'solv-btc',
      chainId: Chain.Avalanche,
      fileKey: 'solv-btc',
    }),
    SolvSolvBtcAvalancheSolvBtc,
  ],
  [
    metadataKey({
      protocolId: Protocol.Solv,
      productId: 'solv-btc',
      chainId: Chain.Bsc,
      fileKey: 'solv-btc',
    }),
    SolvSolvBtcBscSolvBtc,
  ],
  [
    metadataKey({
      protocolId: Protocol.Solv,
      productId: 'solv-btc',
      chainId: Chain.Ethereum,
      fileKey: 'solv-btc',
    }),
    SolvSolvBtcEthereumSolvBtc,
  ],
  [
    metadataKey({
      protocolId: Protocol.Sonne,
      productId: 'borrow-market',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    SonneBorrowMarketBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Sonne,
      productId: 'borrow-market',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    SonneBorrowMarketOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Sonne,
      productId: 'supply-market',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    SonneSupplyMarketBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Sonne,
      productId: 'supply-market',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    SonneSupplyMarketOptimismProtocolToken,
  ],

  [
    metadataKey({
      protocolId: Protocol.SparkV1,
      productId: 'variable-debt-token',
      chainId: Chain.Ethereum,
      fileKey: 'variable-debt-token-v1',
    }),
    SparkV1VariableDebtTokenEthereumVariableDebtTokenV1,
  ],

  [
    metadataKey({
      protocolId: Protocol.Stargate,
      productId: 'voting-escrow',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    StargateVotingEscrowEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.ZeroLend,
      productId: 'a-token',
      chainId: Chain.Ethereum,
      fileKey: 'a-token-v3',
    }),
    ZeroLendATokenEthereumATokenV3,
  ],
  [
    metadataKey({
      protocolId: Protocol.ZeroLend,
      productId: 'a-token',
      chainId: Chain.Linea,
      fileKey: 'a-token-v3',
    }),
    ZeroLendATokenLineaATokenV3,
  ],
  [
    metadataKey({
      protocolId: Protocol.ZeroLend,
      productId: 'stable-debt-token',
      chainId: Chain.Ethereum,
      fileKey: 'stable-debt-token-v3',
    }),
    ZeroLendStableDebtTokenEthereumStableDebtTokenV3,
  ],
  [
    metadataKey({
      protocolId: Protocol.ZeroLend,
      productId: 'stable-debt-token',
      chainId: Chain.Linea,
      fileKey: 'stable-debt-token-v3',
    }),
    ZeroLendStableDebtTokenLineaStableDebtTokenV3,
  ],
  [
    metadataKey({
      protocolId: Protocol.ZeroLend,
      productId: 'variable-debt-token',
      chainId: Chain.Ethereum,
      fileKey: 'variable-debt-token-v3',
    }),
    ZeroLendVariableDebtTokenEthereumVariableDebtTokenV3,
  ],
  [
    metadataKey({
      protocolId: Protocol.ZeroLend,
      productId: 'variable-debt-token',
      chainId: Chain.Linea,
      fileKey: 'variable-debt-token-v3',
    }),
    ZeroLendVariableDebtTokenLineaVariableDebtTokenV3,
  ],
])

export function metadataKey({
  protocolId,
  productId,
  chainId,
  fileKey,
}: {
  protocolId: Protocol
  productId: string
  chainId: Chain
  fileKey: string
}) {
  return `${protocolId}.${productId}.${chainId}.${fileKey}`
}
