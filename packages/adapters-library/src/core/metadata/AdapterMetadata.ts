/* Autogenerated file. Edit at your own risk */
import ConvexStakingEthereumMetadata from '../../adapters/convex/products/staking/metadata/ethereum.metadata.json'
import CurvePoolArbitrumProtocolToken from '../../adapters/curve/products/pool/metadata/arb.protocol-token.json'
import CurvePoolAvalancheProtocolToken from '../../adapters/curve/products/pool/metadata/avax.protocol-token.json'
import CurvePoolBaseProtocolToken from '../../adapters/curve/products/pool/metadata/base.protocol-token.json'
import CurvePoolEthereumProtocolToken from '../../adapters/curve/products/pool/metadata/ethereum.protocol-token.json'
import CurvePoolFantomProtocolToken from '../../adapters/curve/products/pool/metadata/fantom.protocol-token.json'
import CurvePoolPolygonProtocolToken from '../../adapters/curve/products/pool/metadata/matic.protocol-token.json'
import CurvePoolOptimismProtocolToken from '../../adapters/curve/products/pool/metadata/op.protocol-token.json'
import CurveStakingArbitrumProtocolToken from '../../adapters/curve/products/staking/metadata/arb.protocol-token.json'
import CurveStakingAvalancheProtocolToken from '../../adapters/curve/products/staking/metadata/avax.protocol-token.json'
import CurveStakingBaseProtocolToken from '../../adapters/curve/products/staking/metadata/base.protocol-token.json'
import CurveStakingEthereumProtocolToken from '../../adapters/curve/products/staking/metadata/ethereum.protocol-token.json'
import CurveStakingFantomProtocolToken from '../../adapters/curve/products/staking/metadata/fantom.protocol-token.json'
import CurveStakingPolygonProtocolToken from '../../adapters/curve/products/staking/metadata/matic.protocol-token.json'
import CurveStakingOptimismProtocolToken from '../../adapters/curve/products/staking/metadata/op.protocol-token.json'
import CurveVotingEscrowEthereumProtocolToken from '../../adapters/curve/products/voting-escrow/metadata/ethereum.protocol-token.json'
import EthenaEthenaEthereumProtocolToken from '../../adapters/ethena/products/ethena/metadata/ethereum.protocol-token.json'
import LynexClassicLineaProtocolToken from '../../adapters/lynex/products/classic/metadata/linea.protocol-token.json'
import MorphoAaveV2OptimizerBorrowEthereumOptimizerBorrow from '../../adapters/morpho-aave-v2/products/optimizer-borrow/metadata/ethereum.optimizer-borrow.json'
import MorphoAaveV2OptimizerSupplyEthereumOptimizerSupply from '../../adapters/morpho-aave-v2/products/optimizer-supply/metadata/ethereum.optimizer-supply.json'
import MorphoAaveV3OptimizerBorrowEthereumOptimizerBorrow from '../../adapters/morpho-aave-v3/products/optimizer-borrow/metadata/ethereum.optimizer-borrow.json'
import MorphoAaveV3OptimizerSupplyEthereumOptimizerSupply from '../../adapters/morpho-aave-v3/products/optimizer-supply/metadata/ethereum.optimizer-supply.json'
import MorphoBlueMarketBorrowEthereumMarketBorrow from '../../adapters/morpho-blue/products/market-borrow/metadata/ethereum.market-borrow.json'
import MorphoBlueMarketSupplyEthereumMarketSupply from '../../adapters/morpho-blue/products/market-supply/metadata/ethereum.market-supply.json'
import MorphoCompoundV2OptimizerBorrowEthereumOptimizerBorrow from '../../adapters/morpho-compound-v2/products/optimizer-borrow/metadata/ethereum.optimizer-borrow.json'
import MorphoCompoundV2OptimizerSupplyEthereumOptimizerSupply from '../../adapters/morpho-compound-v2/products/optimizer-supply/metadata/ethereum.optimizer-supply.json'
import { Protocol } from '../../adapters/protocols'
import QuickswapV2PoolPolygonProtocolToken from '../../adapters/quickswap-v2/products/pool/metadata/matic.protocol-token.json'
import StargateVotingEscrowEthereumProtocolToken from '../../adapters/stargate/products/voting-escrow/metadata/ethereum.protocol-token.json'
import { Json } from '../../types/json'
import { Chain } from '../constants/chains'
import SparkV1VariableDebtTokenEthereumVariableDebtTokenV1 from '../../adapters/spark-v1/products/variable-debt-token/metadata/ethereum.variable-debt-token-v1.json'
import DeriPoolBscProtocolMetadata from '../../adapters/deri/products/pool/metadata/bsc.protocol-metadata.json'
import DeriPoolArbitrumProtocolMetadata from '../../adapters/deri/products/pool/metadata/arb.protocol-metadata.json'
import DeriPoolLineaProtocolMetadata from '../../adapters/deri/products/pool/metadata/linea.protocol-metadata.json'
import RenzoEzEthArbitrumEzEth from '../../adapters/renzo/products/ez-eth/metadata/arb.ez-eth.json'
import RenzoEzEthBaseEzEth from '../../adapters/renzo/products/ez-eth/metadata/base.ez-eth.json'
import RenzoEzEthBscEzEth from '../../adapters/renzo/products/ez-eth/metadata/bsc.ez-eth.json'
import RenzoEzEthEthereumEzEth from '../../adapters/renzo/products/ez-eth/metadata/ethereum.ez-eth.json'
import RenzoEzEthLineaEzEth from '../../adapters/renzo/products/ez-eth/metadata/linea.ez-eth.json'
import SolvSolvBtcEthereumSolvBtc from '../../adapters/solv/products/solv-btc/metadata/ethereum.solv-btc.json'
import SolvSolvBtcBscSolvBtc from '../../adapters/solv/products/solv-btc/metadata/bsc.solv-btc.json'
import SolvSolvBtcArbitrumSolvBtc from '../../adapters/solv/products/solv-btc/metadata/arb.solv-btc.json'
import SolvSolvBtcAvalancheSolvBtc from '../../adapters/solv/products/solv-btc/metadata/avax.solv-btc.json'
import MorphoBlueMarketSupplyBaseMarketSupply from '../../adapters/morpho-blue/products/market-supply/metadata/base.market-supply.json'
import MorphoBlueMarketBorrowBaseMarketBorrow from '../../adapters/morpho-blue/products/market-borrow/metadata/base.market-borrow.json'

export const MetadataFiles = new Map<string, Json>([
  [
    metadataKey({
      protocolId: Protocol.Convex,
      productId: 'staking',
      chainId: Chain.Ethereum,
      fileKey: 'metadata',
    }),
    ConvexStakingEthereumMetadata,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-token',
    }),
    CurvePoolArbitrumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-token',
    }),
    CurvePoolAvalancheProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    CurvePoolBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    CurvePoolEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Fantom,
      fileKey: 'protocol-token',
    }),
    CurvePoolFantomProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    CurvePoolOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'pool',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    CurvePoolPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-token',
    }),
    CurveStakingArbitrumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Avalanche,
      fileKey: 'protocol-token',
    }),
    CurveStakingAvalancheProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Base,
      fileKey: 'protocol-token',
    }),
    CurveStakingBaseProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    CurveStakingEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Fantom,
      fileKey: 'protocol-token',
    }),
    CurveStakingFantomProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Optimism,
      fileKey: 'protocol-token',
    }),
    CurveStakingOptimismProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'staking',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    CurveStakingPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Curve,
      productId: 'voting-escrow',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    CurveVotingEscrowEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Deri,
      productId: 'pool',
      chainId: Chain.Arbitrum,
      fileKey: 'protocol-metadata',
    }),
    DeriPoolArbitrumProtocolMetadata,
  ],
  [
    metadataKey({
      protocolId: Protocol.Deri,
      productId: 'pool',
      chainId: Chain.Bsc,
      fileKey: 'protocol-metadata',
    }),
    DeriPoolBscProtocolMetadata,
  ],
  [
    metadataKey({
      protocolId: Protocol.Deri,
      productId: 'pool',
      chainId: Chain.Linea,
      fileKey: 'protocol-metadata',
    }),
    DeriPoolLineaProtocolMetadata,
  ],
  [
    metadataKey({
      protocolId: Protocol.Ethena,
      productId: 'ethena',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    EthenaEthenaEthereumProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Lynex,
      productId: 'classic',
      chainId: Chain.Linea,
      fileKey: 'protocol-token',
    }),
    LynexClassicLineaProtocolToken,
  ],

  [
    metadataKey({
      protocolId: Protocol.MorphoAaveV2,
      productId: 'optimizer-borrow',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-borrow',
    }),
    MorphoAaveV2OptimizerBorrowEthereumOptimizerBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoAaveV2,
      productId: 'optimizer-supply',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-supply',
    }),
    MorphoAaveV2OptimizerSupplyEthereumOptimizerSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoAaveV3,
      productId: 'optimizer-borrow',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-borrow',
    }),
    MorphoAaveV3OptimizerBorrowEthereumOptimizerBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoAaveV3,
      productId: 'optimizer-supply',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-supply',
    }),
    MorphoAaveV3OptimizerSupplyEthereumOptimizerSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoBlue,
      productId: 'market-borrow',
      chainId: Chain.Base,
      fileKey: 'market-borrow',
    }),
    MorphoBlueMarketBorrowBaseMarketBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoBlue,
      productId: 'market-borrow',
      chainId: Chain.Ethereum,
      fileKey: 'market-borrow',
    }),
    MorphoBlueMarketBorrowEthereumMarketBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoBlue,
      productId: 'market-supply',
      chainId: Chain.Base,
      fileKey: 'market-supply',
    }),
    MorphoBlueMarketSupplyBaseMarketSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoBlue,
      productId: 'market-supply',
      chainId: Chain.Ethereum,
      fileKey: 'market-supply',
    }),
    MorphoBlueMarketSupplyEthereumMarketSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoCompoundV2,
      productId: 'optimizer-borrow',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-borrow',
    }),
    MorphoCompoundV2OptimizerBorrowEthereumOptimizerBorrow,
  ],
  [
    metadataKey({
      protocolId: Protocol.MorphoCompoundV2,
      productId: 'optimizer-supply',
      chainId: Chain.Ethereum,
      fileKey: 'optimizer-supply',
    }),
    MorphoCompoundV2OptimizerSupplyEthereumOptimizerSupply,
  ],
  [
    metadataKey({
      protocolId: Protocol.QuickswapV2,
      productId: 'pool',
      chainId: Chain.Polygon,
      fileKey: 'protocol-token',
    }),
    QuickswapV2PoolPolygonProtocolToken,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Arbitrum,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthArbitrumEzEth,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Base,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthBaseEzEth,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Bsc,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthBscEzEth,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Ethereum,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthEthereumEzEth,
  ],
  [
    metadataKey({
      protocolId: Protocol.Renzo,
      productId: 'ez-eth',
      chainId: Chain.Linea,
      fileKey: 'ez-eth',
    }),
    RenzoEzEthLineaEzEth,
  ],

  [
    metadataKey({
      protocolId: Protocol.Solv,
      productId: 'solv-btc',
      chainId: Chain.Arbitrum,
      fileKey: 'solv-btc',
    }),
    SolvSolvBtcArbitrumSolvBtc,
  ],
  [
    metadataKey({
      protocolId: Protocol.Solv,
      productId: 'solv-btc',
      chainId: Chain.Avalanche,
      fileKey: 'solv-btc',
    }),
    SolvSolvBtcAvalancheSolvBtc,
  ],
  [
    metadataKey({
      protocolId: Protocol.Solv,
      productId: 'solv-btc',
      chainId: Chain.Bsc,
      fileKey: 'solv-btc',
    }),
    SolvSolvBtcBscSolvBtc,
  ],
  [
    metadataKey({
      protocolId: Protocol.Solv,
      productId: 'solv-btc',
      chainId: Chain.Ethereum,
      fileKey: 'solv-btc',
    }),
    SolvSolvBtcEthereumSolvBtc,
  ],
  [
    metadataKey({
      protocolId: Protocol.SparkV1,
      productId: 'variable-debt-token',
      chainId: Chain.Ethereum,
      fileKey: 'variable-debt-token-v1',
    }),
    SparkV1VariableDebtTokenEthereumVariableDebtTokenV1,
  ],
  [
    metadataKey({
      protocolId: Protocol.Stargate,
      productId: 'voting-escrow',
      chainId: Chain.Ethereum,
      fileKey: 'protocol-token',
    }),
    StargateVotingEscrowEthereumProtocolToken,
  ],
])

export function metadataKey({
  protocolId,
  productId,
  chainId,
  fileKey,
}: {
  protocolId: Protocol
  productId: string
  chainId: Chain
  fileKey: string
}) {
  return `${protocolId}.${productId}.${chainId}.${fileKey}`
}
