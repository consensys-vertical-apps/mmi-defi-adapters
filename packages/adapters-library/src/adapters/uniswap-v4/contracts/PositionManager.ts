/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PoolKeyStruct = {
  currency0: AddressLike;
  currency1: AddressLike;
  fee: BigNumberish;
  tickSpacing: BigNumberish;
  hooks: AddressLike;
};

export type PoolKeyStructOutput = [
  currency0: string,
  currency1: string,
  fee: bigint,
  tickSpacing: bigint,
  hooks: string
] & {
  currency0: string;
  currency1: string;
  fee: bigint;
  tickSpacing: bigint;
  hooks: string;
};

export declare namespace IAllowanceTransfer {
  export type PermitDetailsStruct = {
    token: AddressLike;
    amount: BigNumberish;
    expiration: BigNumberish;
    nonce: BigNumberish;
  };

  export type PermitDetailsStructOutput = [
    token: string,
    amount: bigint,
    expiration: bigint,
    nonce: bigint
  ] & { token: string; amount: bigint; expiration: bigint; nonce: bigint };

  export type PermitSingleStruct = {
    details: IAllowanceTransfer.PermitDetailsStruct;
    spender: AddressLike;
    sigDeadline: BigNumberish;
  };

  export type PermitSingleStructOutput = [
    details: IAllowanceTransfer.PermitDetailsStructOutput,
    spender: string,
    sigDeadline: bigint
  ] & {
    details: IAllowanceTransfer.PermitDetailsStructOutput;
    spender: string;
    sigDeadline: bigint;
  };

  export type PermitBatchStruct = {
    details: IAllowanceTransfer.PermitDetailsStruct[];
    spender: AddressLike;
    sigDeadline: BigNumberish;
  };

  export type PermitBatchStructOutput = [
    details: IAllowanceTransfer.PermitDetailsStructOutput[],
    spender: string,
    sigDeadline: bigint
  ] & {
    details: IAllowanceTransfer.PermitDetailsStructOutput[];
    spender: string;
    sigDeadline: bigint;
  };
}

export interface PositionManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "WETH9"
      | "approve"
      | "balanceOf"
      | "getApproved"
      | "getPoolAndPositionInfo"
      | "getPositionLiquidity"
      | "initializePool"
      | "isApprovedForAll"
      | "modifyLiquidities"
      | "modifyLiquiditiesWithoutUnlock"
      | "msgSender"
      | "multicall"
      | "name"
      | "nextTokenId"
      | "nonces"
      | "ownerOf"
      | "permit(address,uint256,uint256,uint256,bytes)"
      | "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"
      | "permit2"
      | "permitBatch"
      | "permitForAll"
      | "poolKeys"
      | "poolManager"
      | "positionInfo"
      | "revokeNonce"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "subscribe"
      | "subscriber"
      | "supportsInterface"
      | "symbol"
      | "tokenDescriptor"
      | "tokenURI"
      | "transferFrom"
      | "unlockCallback"
      | "unsubscribe"
      | "unsubscribeGasLimit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "Subscription"
      | "Transfer"
      | "Unsubscription"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAndPositionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePool",
    values: [PoolKeyStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyLiquidities",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyLiquiditiesWithoutUnlock",
    values: [BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "msgSender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,uint256,uint256,uint256,bytes)",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)",
    values: [AddressLike, IAllowanceTransfer.PermitSingleStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitBatch",
    values: [AddressLike, IAllowanceTransfer.PermitBatchStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permitForAll",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "poolKeys", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "positionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockCallback",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unsubscribeGasLimit",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAndPositionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyLiquidities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyLiquiditiesWithoutUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "msgSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,uint256,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolKeys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscriber", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribeGasLimit",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    id: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, id: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscriptionEvent {
  export type InputTuple = [tokenId: BigNumberish, subscriber: AddressLike];
  export type OutputTuple = [tokenId: bigint, subscriber: string];
  export interface OutputObject {
    tokenId: bigint;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, id: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnsubscriptionEvent {
  export type InputTuple = [tokenId: BigNumberish, subscriber: AddressLike];
  export type OutputTuple = [tokenId: bigint, subscriber: string];
  export interface OutputObject {
    tokenId: bigint;
    subscriber: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PositionManager extends BaseContract {
  connect(runner?: ContractRunner | null): PositionManager;
  waitForDeployment(): Promise<this>;

  interface: PositionManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  WETH9: TypedContractMethod<[], [string], "view">;

  approve: TypedContractMethod<
    [spender: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  getApproved: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getPoolAndPositionInfo: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [PoolKeyStructOutput, bigint] & {
        poolKey: PoolKeyStructOutput;
        info: bigint;
      }
    ],
    "view"
  >;

  getPositionLiquidity: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  initializePool: TypedContractMethod<
    [key: PoolKeyStruct, sqrtPriceX96: BigNumberish],
    [bigint],
    "payable"
  >;

  isApprovedForAll: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  modifyLiquidities: TypedContractMethod<
    [unlockData: BytesLike, deadline: BigNumberish],
    [void],
    "payable"
  >;

  modifyLiquiditiesWithoutUnlock: TypedContractMethod<
    [actions: BytesLike, params: BytesLike[]],
    [void],
    "payable"
  >;

  msgSender: TypedContractMethod<[], [string], "view">;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;

  name: TypedContractMethod<[], [string], "view">;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  nonces: TypedContractMethod<
    [owner: AddressLike, word: BigNumberish],
    [bigint],
    "view"
  >;

  ownerOf: TypedContractMethod<[id: BigNumberish], [string], "view">;

  "permit(address,uint256,uint256,uint256,bytes)": TypedContractMethod<
    [
      spender: AddressLike,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;

  "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)": TypedContractMethod<
    [
      owner: AddressLike,
      permitSingle: IAllowanceTransfer.PermitSingleStruct,
      signature: BytesLike
    ],
    [string],
    "payable"
  >;

  permit2: TypedContractMethod<[], [string], "view">;

  permitBatch: TypedContractMethod<
    [
      owner: AddressLike,
      _permitBatch: IAllowanceTransfer.PermitBatchStruct,
      signature: BytesLike
    ],
    [string],
    "payable"
  >;

  permitForAll: TypedContractMethod<
    [
      owner: AddressLike,
      operator: AddressLike,
      approved: boolean,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;

  poolKeys: TypedContractMethod<
    [poolId: BytesLike],
    [
      [string, string, bigint, bigint, string] & {
        currency0: string;
        currency1: string;
        fee: bigint;
        tickSpacing: bigint;
        hooks: string;
      }
    ],
    "view"
  >;

  poolManager: TypedContractMethod<[], [string], "view">;

  positionInfo: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  revokeNonce: TypedContractMethod<[nonce: BigNumberish], [void], "payable">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  subscribe: TypedContractMethod<
    [tokenId: BigNumberish, newSubscriber: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  subscriber: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenDescriptor: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;

  unlockCallback: TypedContractMethod<
    [data: BytesLike],
    [string],
    "nonpayable"
  >;

  unsubscribe: TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;

  unsubscribeGasLimit: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WETH9"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPoolAndPositionInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [PoolKeyStructOutput, bigint] & {
        poolKey: PoolKeyStructOutput;
        info: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionLiquidity"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializePool"
  ): TypedContractMethod<
    [key: PoolKeyStruct, sqrtPriceX96: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "modifyLiquidities"
  ): TypedContractMethod<
    [unlockData: BytesLike, deadline: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "modifyLiquiditiesWithoutUnlock"
  ): TypedContractMethod<
    [actions: BytesLike, params: BytesLike[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "msgSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "payable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<
    [owner: AddressLike, word: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[id: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "permit(address,uint256,uint256,uint256,bytes)"
  ): TypedContractMethod<
    [
      spender: AddressLike,
      tokenId: BigNumberish,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "permit(address,((address,uint160,uint48,uint48),address,uint256),bytes)"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      permitSingle: IAllowanceTransfer.PermitSingleStruct,
      signature: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "permit2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permitBatch"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      _permitBatch: IAllowanceTransfer.PermitBatchStruct,
      signature: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "permitForAll"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      operator: AddressLike,
      approved: boolean,
      deadline: BigNumberish,
      nonce: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "poolKeys"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [
      [string, string, bigint, bigint, string] & {
        currency0: string;
        currency1: string;
        fee: bigint;
        tickSpacing: bigint;
        hooks: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionInfo"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeNonce"
  ): TypedContractMethod<[nonce: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newSubscriber: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "subscriber"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenDescriptor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, id: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unlockCallback"
  ): TypedContractMethod<[data: BytesLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "unsubscribe"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "unsubscribeGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "Subscription"
  ): TypedContractEvent<
    SubscriptionEvent.InputTuple,
    SubscriptionEvent.OutputTuple,
    SubscriptionEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unsubscription"
  ): TypedContractEvent<
    UnsubscriptionEvent.InputTuple,
    UnsubscriptionEvent.OutputTuple,
    UnsubscriptionEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "Subscription(uint256,address)": TypedContractEvent<
      SubscriptionEvent.InputTuple,
      SubscriptionEvent.OutputTuple,
      SubscriptionEvent.OutputObject
    >;
    Subscription: TypedContractEvent<
      SubscriptionEvent.InputTuple,
      SubscriptionEvent.OutputTuple,
      SubscriptionEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unsubscription(uint256,address)": TypedContractEvent<
      UnsubscriptionEvent.InputTuple,
      UnsubscriptionEvent.OutputTuple,
      UnsubscriptionEvent.OutputObject
    >;
    Unsubscription: TypedContractEvent<
      UnsubscriptionEvent.InputTuple,
      UnsubscriptionEvent.OutputTuple,
      UnsubscriptionEvent.OutputObject
    >;
  };
}
