/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StateViewInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getFeeGrowthGlobals"
      | "getFeeGrowthInside"
      | "getLiquidity"
      | "getPositionInfo(bytes32,bytes32)"
      | "getPositionInfo(bytes32,address,int24,int24,bytes32)"
      | "getPositionLiquidity"
      | "getSlot0"
      | "getTickBitmap"
      | "getTickFeeGrowthOutside"
      | "getTickInfo"
      | "getTickLiquidity"
      | "poolManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getFeeGrowthGlobals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeGrowthInside",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo(bytes32,bytes32)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionInfo(bytes32,address,int24,int24,bytes32)",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionLiquidity",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getSlot0", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getTickBitmap",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickFeeGrowthOutside",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickInfo",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickLiquidity",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getFeeGrowthGlobals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeGrowthInside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo(bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionInfo(bytes32,address,int24,int24,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSlot0", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTickBitmap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickFeeGrowthOutside",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolManager",
    data: BytesLike
  ): Result;
}

export interface StateView extends BaseContract {
  connect(runner?: ContractRunner | null): StateView;
  waitForDeployment(): Promise<this>;

  interface: StateViewInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFeeGrowthGlobals: TypedContractMethod<
    [poolId: BytesLike],
    [[bigint, bigint] & { feeGrowthGlobal0: bigint; feeGrowthGlobal1: bigint }],
    "view"
  >;

  getFeeGrowthInside: TypedContractMethod<
    [poolId: BytesLike, tickLower: BigNumberish, tickUpper: BigNumberish],
    [
      [bigint, bigint] & {
        feeGrowthInside0X128: bigint;
        feeGrowthInside1X128: bigint;
      }
    ],
    "view"
  >;

  getLiquidity: TypedContractMethod<[poolId: BytesLike], [bigint], "view">;

  "getPositionInfo(bytes32,bytes32)": TypedContractMethod<
    [poolId: BytesLike, positionId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;

  "getPositionInfo(bytes32,address,int24,int24,bytes32)": TypedContractMethod<
    [
      poolId: BytesLike,
      owner: AddressLike,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      salt: BytesLike
    ],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;

  getPositionLiquidity: TypedContractMethod<
    [poolId: BytesLike, positionId: BytesLike],
    [bigint],
    "view"
  >;

  getSlot0: TypedContractMethod<
    [poolId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        sqrtPriceX96: bigint;
        tick: bigint;
        protocolFee: bigint;
        lpFee: bigint;
      }
    ],
    "view"
  >;

  getTickBitmap: TypedContractMethod<
    [poolId: BytesLike, tick: BigNumberish],
    [bigint],
    "view"
  >;

  getTickFeeGrowthOutside: TypedContractMethod<
    [poolId: BytesLike, tick: BigNumberish],
    [
      [bigint, bigint] & {
        feeGrowthOutside0X128: bigint;
        feeGrowthOutside1X128: bigint;
      }
    ],
    "view"
  >;

  getTickInfo: TypedContractMethod<
    [poolId: BytesLike, tick: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        liquidityGross: bigint;
        liquidityNet: bigint;
        feeGrowthOutside0X128: bigint;
        feeGrowthOutside1X128: bigint;
      }
    ],
    "view"
  >;

  getTickLiquidity: TypedContractMethod<
    [poolId: BytesLike, tick: BigNumberish],
    [[bigint, bigint] & { liquidityGross: bigint; liquidityNet: bigint }],
    "view"
  >;

  poolManager: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getFeeGrowthGlobals"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [[bigint, bigint] & { feeGrowthGlobal0: bigint; feeGrowthGlobal1: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeGrowthInside"
  ): TypedContractMethod<
    [poolId: BytesLike, tickLower: BigNumberish, tickUpper: BigNumberish],
    [
      [bigint, bigint] & {
        feeGrowthInside0X128: bigint;
        feeGrowthInside1X128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidity"
  ): TypedContractMethod<[poolId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPositionInfo(bytes32,bytes32)"
  ): TypedContractMethod<
    [poolId: BytesLike, positionId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionInfo(bytes32,address,int24,int24,bytes32)"
  ): TypedContractMethod<
    [
      poolId: BytesLike,
      owner: AddressLike,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      salt: BytesLike
    ],
    [
      [bigint, bigint, bigint] & {
        liquidity: bigint;
        feeGrowthInside0LastX128: bigint;
        feeGrowthInside1LastX128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionLiquidity"
  ): TypedContractMethod<
    [poolId: BytesLike, positionId: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSlot0"
  ): TypedContractMethod<
    [poolId: BytesLike],
    [
      [bigint, bigint, bigint, bigint] & {
        sqrtPriceX96: bigint;
        tick: bigint;
        protocolFee: bigint;
        lpFee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTickBitmap"
  ): TypedContractMethod<
    [poolId: BytesLike, tick: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTickFeeGrowthOutside"
  ): TypedContractMethod<
    [poolId: BytesLike, tick: BigNumberish],
    [
      [bigint, bigint] & {
        feeGrowthOutside0X128: bigint;
        feeGrowthOutside1X128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTickInfo"
  ): TypedContractMethod<
    [poolId: BytesLike, tick: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        liquidityGross: bigint;
        liquidityNet: bigint;
        feeGrowthOutside0X128: bigint;
        feeGrowthOutside1X128: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTickLiquidity"
  ): TypedContractMethod<
    [poolId: BytesLike, tick: BigNumberish],
    [[bigint, bigint] & { liquidityGross: bigint; liquidityNet: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolManager"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
