/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ConvexRewardPool {
  export type EarnedDataStruct = { token: AddressLike; amount: BigNumberish };

  export type EarnedDataStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };
}

export interface ConvexRewardFactorySidechainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addExtraReward"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "claimable_reward"
      | "convexBooster"
      | "convexPoolId"
      | "convexStaker"
      | "crv"
      | "curveGauge"
      | "decimals"
      | "decreaseAllowance"
      | "earned"
      | "emergencyWithdraw"
      | "getReward(address,address)"
      | "getReward(address)"
      | "increaseAllowance"
      | "initialize"
      | "invalidateReward"
      | "maxRewards"
      | "name"
      | "rewardHook"
      | "rewardLength"
      | "rewardMap"
      | "rewardRedirect"
      | "reward_integral_for"
      | "rewards"
      | "setRewardHook"
      | "setRewardRedirect"
      | "stakeFor"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "user_checkpoint"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "EmergencyWithdrawn"
      | "RewardAdded"
      | "RewardInvalidated"
      | "RewardPaid"
      | "RewardRedirected"
      | "Staked"
      | "Transfer"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addExtraReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_reward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "convexBooster",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convexPoolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convexStaker",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "crv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "curveGauge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "invalidateReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardHook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMap",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRedirect",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reward_integral_for",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardHook",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRedirect",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_checkpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addExtraReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimable_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convexBooster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convexPoolId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convexStaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "crv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curveGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "invalidateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardHook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardRedirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_integral_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRewardHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRedirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawnEvent {
  export type InputTuple = [_user: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_user: string, _amount: bigint];
  export interface OutputObject {
    _user: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAddedEvent {
  export type InputTuple = [_rewardToken: AddressLike];
  export type OutputTuple = [_rewardToken: string];
  export interface OutputObject {
    _rewardToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardInvalidatedEvent {
  export type InputTuple = [_rewardToken: AddressLike];
  export type OutputTuple = [_rewardToken: string];
  export interface OutputObject {
    _rewardToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    _user: AddressLike,
    _rewardToken: AddressLike,
    _receiver: AddressLike,
    _rewardAmount: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _rewardToken: string,
    _receiver: string,
    _rewardAmount: bigint
  ];
  export interface OutputObject {
    _user: string;
    _rewardToken: string;
    _receiver: string;
    _rewardAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardRedirectedEvent {
  export type InputTuple = [_account: AddressLike, _forward: AddressLike];
  export type OutputTuple = [_account: string, _forward: string];
  export interface OutputObject {
    _account: string;
    _forward: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [_user: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_user: string, _amount: bigint];
  export interface OutputObject {
    _user: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [_user: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_user: string, _amount: bigint];
  export interface OutputObject {
    _user: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConvexRewardFactorySidechain extends BaseContract {
  connect(runner?: ContractRunner | null): ConvexRewardFactorySidechain;
  waitForDeployment(): Promise<this>;

  interface: ConvexRewardFactorySidechainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addExtraReward: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claimable_reward: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  convexBooster: TypedContractMethod<[], [string], "view">;

  convexPoolId: TypedContractMethod<[], [bigint], "view">;

  convexStaker: TypedContractMethod<[], [string], "view">;

  crv: TypedContractMethod<[], [string], "view">;

  curveGauge: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  earned: TypedContractMethod<
    [_account: AddressLike],
    [ConvexRewardPool.EarnedDataStructOutput[]],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [_amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  "getReward(address,address)": TypedContractMethod<
    [_account: AddressLike, _forwardTo: AddressLike],
    [void],
    "nonpayable"
  >;

  "getReward(address)": TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      _crv: AddressLike,
      _curveGauge: AddressLike,
      _convexStaker: AddressLike,
      _convexBooster: AddressLike,
      _lptoken: AddressLike,
      _poolId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  invalidateReward: TypedContractMethod<
    [_token: AddressLike],
    [void],
    "nonpayable"
  >;

  maxRewards: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  rewardHook: TypedContractMethod<[], [string], "view">;

  rewardLength: TypedContractMethod<[], [bigint], "view">;

  rewardMap: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  rewardRedirect: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  reward_integral_for: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  rewards: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        reward_token: string;
        reward_integral: bigint;
        reward_remaining: bigint;
      }
    ],
    "view"
  >;

  setRewardHook: TypedContractMethod<
    [_hook: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewardRedirect: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  stakeFor: TypedContractMethod<
    [_for: AddressLike, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  user_checkpoint: TypedContractMethod<
    [_account: AddressLike],
    [boolean],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [_amount: BigNumberish, _claim: boolean],
    [boolean],
    "nonpayable"
  >;

  withdrawAll: TypedContractMethod<[claim: boolean], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addExtraReward"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimable_reward"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "convexBooster"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "convexPoolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "convexStaker"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "crv"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "curveGauge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earned"
  ): TypedContractMethod<
    [_account: AddressLike],
    [ConvexRewardPool.EarnedDataStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[_amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getReward(address,address)"
  ): TypedContractMethod<
    [_account: AddressLike, _forwardTo: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReward(address)"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _crv: AddressLike,
      _curveGauge: AddressLike,
      _convexStaker: AddressLike,
      _convexBooster: AddressLike,
      _lptoken: AddressLike,
      _poolId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "invalidateReward"
  ): TypedContractMethod<[_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardHook"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardMap"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardRedirect"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "reward_integral_for"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        reward_token: string;
        reward_integral: bigint;
        reward_remaining: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRewardHook"
  ): TypedContractMethod<[_hook: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardRedirect"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeFor"
  ): TypedContractMethod<
    [_for: AddressLike, _amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "user_checkpoint"
  ): TypedContractMethod<[_account: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_amount: BigNumberish, _claim: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAll"
  ): TypedContractMethod<[claim: boolean], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdrawn"
  ): TypedContractEvent<
    EmergencyWithdrawnEvent.InputTuple,
    EmergencyWithdrawnEvent.OutputTuple,
    EmergencyWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RewardAdded"
  ): TypedContractEvent<
    RewardAddedEvent.InputTuple,
    RewardAddedEvent.OutputTuple,
    RewardAddedEvent.OutputObject
  >;
  getEvent(
    key: "RewardInvalidated"
  ): TypedContractEvent<
    RewardInvalidatedEvent.InputTuple,
    RewardInvalidatedEvent.OutputTuple,
    RewardInvalidatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "RewardRedirected"
  ): TypedContractEvent<
    RewardRedirectedEvent.InputTuple,
    RewardRedirectedEvent.OutputTuple,
    RewardRedirectedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "EmergencyWithdrawn(address,uint256)": TypedContractEvent<
      EmergencyWithdrawnEvent.InputTuple,
      EmergencyWithdrawnEvent.OutputTuple,
      EmergencyWithdrawnEvent.OutputObject
    >;
    EmergencyWithdrawn: TypedContractEvent<
      EmergencyWithdrawnEvent.InputTuple,
      EmergencyWithdrawnEvent.OutputTuple,
      EmergencyWithdrawnEvent.OutputObject
    >;

    "RewardAdded(address)": TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;
    RewardAdded: TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;

    "RewardInvalidated(address)": TypedContractEvent<
      RewardInvalidatedEvent.InputTuple,
      RewardInvalidatedEvent.OutputTuple,
      RewardInvalidatedEvent.OutputObject
    >;
    RewardInvalidated: TypedContractEvent<
      RewardInvalidatedEvent.InputTuple,
      RewardInvalidatedEvent.OutputTuple,
      RewardInvalidatedEvent.OutputObject
    >;

    "RewardPaid(address,address,address,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "RewardRedirected(address,address)": TypedContractEvent<
      RewardRedirectedEvent.InputTuple,
      RewardRedirectedEvent.OutputTuple,
      RewardRedirectedEvent.OutputObject
    >;
    RewardRedirected: TypedContractEvent<
      RewardRedirectedEvent.InputTuple,
      RewardRedirectedEvent.OutputTuple,
      RewardRedirectedEvent.OutputObject
    >;

    "Staked(address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Withdrawn(address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
