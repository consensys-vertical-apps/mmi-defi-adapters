/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace CvxLockerV2 {
  export type EarnedDataStruct = { token: AddressLike; amount: BigNumberish };

  export type EarnedDataStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type LockedBalanceStruct = {
    amount: BigNumberish;
    boosted: BigNumberish;
    unlockTime: BigNumberish;
  };

  export type LockedBalanceStructOutput = [
    amount: bigint,
    boosted: bigint,
    unlockTime: bigint
  ] & { amount: bigint; boosted: bigint; unlockTime: bigint };
}

export interface CvxLockerV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addReward"
      | "approveRewardDistributor"
      | "balanceAtEpochOf"
      | "balanceOf"
      | "balances"
      | "boostPayment"
      | "boostRate"
      | "boostedSupply"
      | "checkpointEpoch"
      | "claimableRewards"
      | "cvxCrv"
      | "cvxcrvStaking"
      | "decimals"
      | "denominator"
      | "epochCount"
      | "epochs"
      | "findEpochId"
      | "getReward(address,bool)"
      | "getReward(address)"
      | "getRewardForDuration"
      | "isShutdown"
      | "kickExpiredLocks"
      | "kickRewardEpochDelay"
      | "kickRewardPerEpoch"
      | "lastTimeRewardApplicable"
      | "lock"
      | "lockDuration"
      | "lockedBalanceOf"
      | "lockedBalances"
      | "lockedSupply"
      | "maximumBoostPayment"
      | "maximumStake"
      | "minimumStake"
      | "name"
      | "nextBoostRate"
      | "nextMaximumBoostPayment"
      | "notifyRewardAmount"
      | "owner"
      | "pendingLockAtEpochOf"
      | "pendingLockOf"
      | "processExpiredLocks"
      | "recoverERC20"
      | "renounceOwnership"
      | "rewardData"
      | "rewardDistributors"
      | "rewardPerToken"
      | "rewardTokens"
      | "rewardWeightOf"
      | "rewards"
      | "rewardsDuration"
      | "setApprovals"
      | "setBoost"
      | "setKickIncentive"
      | "setStakeLimits"
      | "setStakingContract"
      | "shutdown"
      | "stakeOffsetOnLock"
      | "stakingProxy"
      | "stakingToken"
      | "symbol"
      | "totalSupply"
      | "totalSupplyAtEpoch"
      | "transferOwnership"
      | "userLocks"
      | "userRewardPerTokenPaid"
      | "version"
      | "withdrawExpiredLocksTo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "KickReward"
      | "OwnershipTransferred"
      | "Recovered"
      | "RewardAdded"
      | "RewardPaid"
      | "Staked"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addReward",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRewardDistributor",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceAtEpochOf",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "boostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "boostRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boostedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cvxCrv", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cvxcrvStaking",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "denominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findEpochId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address,bool)",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardForDuration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickExpiredLocks",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardEpochDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumBoostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextBoostRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextMaximumBoostPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingLockAtEpochOf",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLockOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processExpiredLocks",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributors",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWeightOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBoost",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setKickIncentive",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeLimits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeOffsetOnLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAtEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLocks",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawExpiredLocksTo",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceAtEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boostRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cvxCrv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cvxcrvStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardForDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardEpochDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumBoostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextBoostRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMaximumBoostPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingLockAtEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLockOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWeightOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBoost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKickIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeOffsetOnLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExpiredLocksTo",
    data: BytesLike
  ): Result;
}

export namespace KickRewardEvent {
  export type InputTuple = [
    _user: AddressLike,
    _kicked: AddressLike,
    _reward: BigNumberish
  ];
  export type OutputTuple = [_user: string, _kicked: string, _reward: bigint];
  export interface OutputObject {
    _user: string;
    _kicked: string;
    _reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecoveredEvent {
  export type InputTuple = [_token: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_token: string, _amount: bigint];
  export interface OutputObject {
    _token: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAddedEvent {
  export type InputTuple = [_token: AddressLike, _reward: BigNumberish];
  export type OutputTuple = [_token: string, _reward: bigint];
  export interface OutputObject {
    _token: string;
    _reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    _user: AddressLike,
    _rewardsToken: AddressLike,
    _reward: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _rewardsToken: string,
    _reward: bigint
  ];
  export interface OutputObject {
    _user: string;
    _rewardsToken: string;
    _reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    _user: AddressLike,
    _epoch: BigNumberish,
    _paidAmount: BigNumberish,
    _lockedAmount: BigNumberish,
    _boostedAmount: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _epoch: bigint,
    _paidAmount: bigint,
    _lockedAmount: bigint,
    _boostedAmount: bigint
  ];
  export interface OutputObject {
    _user: string;
    _epoch: bigint;
    _paidAmount: bigint;
    _lockedAmount: bigint;
    _boostedAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    _user: AddressLike,
    _amount: BigNumberish,
    _relocked: boolean
  ];
  export type OutputTuple = [
    _user: string,
    _amount: bigint,
    _relocked: boolean
  ];
  export interface OutputObject {
    _user: string;
    _amount: bigint;
    _relocked: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CvxLockerV2 extends BaseContract {
  connect(runner?: ContractRunner | null): CvxLockerV2;
  waitForDeployment(): Promise<this>;

  interface: CvxLockerV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addReward: TypedContractMethod<
    [_rewardsToken: AddressLike, _distributor: AddressLike, _useBoost: boolean],
    [void],
    "nonpayable"
  >;

  approveRewardDistributor: TypedContractMethod<
    [_rewardsToken: AddressLike, _distributor: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;

  balanceAtEpochOf: TypedContractMethod<
    [_epoch: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  balanceOf: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  balances: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        locked: bigint;
        boosted: bigint;
        nextUnlockIndex: bigint;
      }
    ],
    "view"
  >;

  boostPayment: TypedContractMethod<[], [string], "view">;

  boostRate: TypedContractMethod<[], [bigint], "view">;

  boostedSupply: TypedContractMethod<[], [bigint], "view">;

  checkpointEpoch: TypedContractMethod<[], [void], "nonpayable">;

  claimableRewards: TypedContractMethod<
    [_account: AddressLike],
    [CvxLockerV2.EarnedDataStructOutput[]],
    "view"
  >;

  cvxCrv: TypedContractMethod<[], [string], "view">;

  cvxcrvStaking: TypedContractMethod<[], [string], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  denominator: TypedContractMethod<[], [bigint], "view">;

  epochCount: TypedContractMethod<[], [bigint], "view">;

  epochs: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { supply: bigint; date: bigint }],
    "view"
  >;

  findEpochId: TypedContractMethod<[_time: BigNumberish], [bigint], "view">;

  "getReward(address,bool)": TypedContractMethod<
    [_account: AddressLike, _stake: boolean],
    [void],
    "nonpayable"
  >;

  "getReward(address)": TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  getRewardForDuration: TypedContractMethod<
    [_rewardsToken: AddressLike],
    [bigint],
    "view"
  >;

  isShutdown: TypedContractMethod<[], [boolean], "view">;

  kickExpiredLocks: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  kickRewardEpochDelay: TypedContractMethod<[], [bigint], "view">;

  kickRewardPerEpoch: TypedContractMethod<[], [bigint], "view">;

  lastTimeRewardApplicable: TypedContractMethod<
    [_rewardsToken: AddressLike],
    [bigint],
    "view"
  >;

  lock: TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish, _spendRatio: BigNumberish],
    [void],
    "nonpayable"
  >;

  lockDuration: TypedContractMethod<[], [bigint], "view">;

  lockedBalanceOf: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  lockedBalances: TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint, CvxLockerV2.LockedBalanceStructOutput[]] & {
        total: bigint;
        unlockable: bigint;
        locked: bigint;
        lockData: CvxLockerV2.LockedBalanceStructOutput[];
      }
    ],
    "view"
  >;

  lockedSupply: TypedContractMethod<[], [bigint], "view">;

  maximumBoostPayment: TypedContractMethod<[], [bigint], "view">;

  maximumStake: TypedContractMethod<[], [bigint], "view">;

  minimumStake: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nextBoostRate: TypedContractMethod<[], [bigint], "view">;

  nextMaximumBoostPayment: TypedContractMethod<[], [bigint], "view">;

  notifyRewardAmount: TypedContractMethod<
    [_rewardsToken: AddressLike, _reward: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingLockAtEpochOf: TypedContractMethod<
    [_epoch: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;

  pendingLockOf: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  processExpiredLocks: TypedContractMethod<
    [_relock: boolean],
    [void],
    "nonpayable"
  >;

  recoverERC20: TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardData: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        useBoost: boolean;
        periodFinish: bigint;
        rewardRate: bigint;
        lastUpdateTime: bigint;
        rewardPerTokenStored: bigint;
      }
    ],
    "view"
  >;

  rewardDistributors: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  rewardPerToken: TypedContractMethod<
    [_rewardsToken: AddressLike],
    [bigint],
    "view"
  >;

  rewardTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  rewardWeightOf: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  rewards: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  rewardsDuration: TypedContractMethod<[], [bigint], "view">;

  setApprovals: TypedContractMethod<[], [void], "nonpayable">;

  setBoost: TypedContractMethod<
    [_max: BigNumberish, _rate: BigNumberish, _receivingAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setKickIncentive: TypedContractMethod<
    [_rate: BigNumberish, _delay: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakeLimits: TypedContractMethod<
    [_minimum: BigNumberish, _maximum: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStakingContract: TypedContractMethod<
    [_staking: AddressLike],
    [void],
    "nonpayable"
  >;

  shutdown: TypedContractMethod<[], [void], "nonpayable">;

  stakeOffsetOnLock: TypedContractMethod<[], [bigint], "view">;

  stakingProxy: TypedContractMethod<[], [string], "view">;

  stakingToken: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupplyAtEpoch: TypedContractMethod<
    [_epoch: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userLocks: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        boosted: bigint;
        unlockTime: bigint;
      }
    ],
    "view"
  >;

  userRewardPerTokenPaid: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  withdrawExpiredLocksTo: TypedContractMethod<
    [_withdrawTo: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addReward"
  ): TypedContractMethod<
    [_rewardsToken: AddressLike, _distributor: AddressLike, _useBoost: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveRewardDistributor"
  ): TypedContractMethod<
    [_rewardsToken: AddressLike, _distributor: AddressLike, _approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceAtEpochOf"
  ): TypedContractMethod<
    [_epoch: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        locked: bigint;
        boosted: bigint;
        nextUnlockIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "boostPayment"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "boostRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "boostedSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "checkpointEpoch"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimableRewards"
  ): TypedContractMethod<
    [_account: AddressLike],
    [CvxLockerV2.EarnedDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "cvxCrv"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cvxcrvStaking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "denominator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "epochs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { supply: bigint; date: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "findEpochId"
  ): TypedContractMethod<[_time: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReward(address,bool)"
  ): TypedContractMethod<
    [_account: AddressLike, _stake: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getReward(address)"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRewardForDuration"
  ): TypedContractMethod<[_rewardsToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isShutdown"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "kickExpiredLocks"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "kickRewardEpochDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "kickRewardPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastTimeRewardApplicable"
  ): TypedContractMethod<[_rewardsToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lock"
  ): TypedContractMethod<
    [_account: AddressLike, _amount: BigNumberish, _spendRatio: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lockDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockedBalanceOf"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lockedBalances"
  ): TypedContractMethod<
    [_user: AddressLike],
    [
      [bigint, bigint, bigint, CvxLockerV2.LockedBalanceStructOutput[]] & {
        total: bigint;
        unlockable: bigint;
        locked: bigint;
        lockData: CvxLockerV2.LockedBalanceStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "lockedSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maximumBoostPayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maximumStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minimumStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextBoostRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextMaximumBoostPayment"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "notifyRewardAmount"
  ): TypedContractMethod<
    [_rewardsToken: AddressLike, _reward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingLockAtEpochOf"
  ): TypedContractMethod<
    [_epoch: BigNumberish, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingLockOf"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "processExpiredLocks"
  ): TypedContractMethod<[_relock: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [_tokenAddress: AddressLike, _tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardData"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, bigint, bigint] & {
        useBoost: boolean;
        periodFinish: bigint;
        rewardRate: bigint;
        lastUpdateTime: bigint;
        rewardPerTokenStored: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardDistributors"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardPerToken"
  ): TypedContractMethod<[_rewardsToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "rewardWeightOf"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardsDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setApprovals"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBoost"
  ): TypedContractMethod<
    [_max: BigNumberish, _rate: BigNumberish, _receivingAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setKickIncentive"
  ): TypedContractMethod<
    [_rate: BigNumberish, _delay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStakeLimits"
  ): TypedContractMethod<
    [_minimum: BigNumberish, _maximum: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStakingContract"
  ): TypedContractMethod<[_staking: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shutdown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeOffsetOnLock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakingProxy"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupplyAtEpoch"
  ): TypedContractMethod<[_epoch: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userLocks"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        boosted: bigint;
        unlockTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userRewardPerTokenPaid"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawExpiredLocksTo"
  ): TypedContractMethod<[_withdrawTo: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "KickReward"
  ): TypedContractEvent<
    KickRewardEvent.InputTuple,
    KickRewardEvent.OutputTuple,
    KickRewardEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Recovered"
  ): TypedContractEvent<
    RecoveredEvent.InputTuple,
    RecoveredEvent.OutputTuple,
    RecoveredEvent.OutputObject
  >;
  getEvent(
    key: "RewardAdded"
  ): TypedContractEvent<
    RewardAddedEvent.InputTuple,
    RewardAddedEvent.OutputTuple,
    RewardAddedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "KickReward(address,address,uint256)": TypedContractEvent<
      KickRewardEvent.InputTuple,
      KickRewardEvent.OutputTuple,
      KickRewardEvent.OutputObject
    >;
    KickReward: TypedContractEvent<
      KickRewardEvent.InputTuple,
      KickRewardEvent.OutputTuple,
      KickRewardEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Recovered(address,uint256)": TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;
    Recovered: TypedContractEvent<
      RecoveredEvent.InputTuple,
      RecoveredEvent.OutputTuple,
      RecoveredEvent.OutputObject
    >;

    "RewardAdded(address,uint256)": TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;
    RewardAdded: TypedContractEvent<
      RewardAddedEvent.InputTuple,
      RewardAddedEvent.OutputTuple,
      RewardAddedEvent.OutputObject
    >;

    "RewardPaid(address,address,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "Staked(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Withdrawn(address,uint256,bool)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
