/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type MarketStateStruct = {
  totalPt: BigNumberish;
  totalSy: BigNumberish;
  totalLp: BigNumberish;
  treasury: AddressLike;
  scalarRoot: BigNumberish;
  expiry: BigNumberish;
  lnFeeRateRoot: BigNumberish;
  reserveFeePercent: BigNumberish;
  lastLnImpliedRate: BigNumberish;
};

export type MarketStateStructOutput = [
  totalPt: bigint,
  totalSy: bigint,
  totalLp: bigint,
  treasury: string,
  scalarRoot: bigint,
  expiry: bigint,
  lnFeeRateRoot: bigint,
  reserveFeePercent: bigint,
  lastLnImpliedRate: bigint
] & {
  totalPt: bigint;
  totalSy: bigint;
  totalLp: bigint;
  treasury: string;
  scalarRoot: bigint;
  expiry: bigint;
  lnFeeRateRoot: bigint;
  reserveFeePercent: bigint;
  lastLnImpliedRate: bigint;
};

export interface LiquidityProviderTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "_storage"
      | "activeBalance"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "decimals"
      | "eip712Domain"
      | "expiry"
      | "factory"
      | "getNonOverrideLnFeeRateRoot"
      | "getRewardTokens"
      | "increaseObservationsCardinalityNext"
      | "isExpired"
      | "lastRewardBlock"
      | "mint"
      | "name"
      | "nonces"
      | "observations"
      | "observe"
      | "permit"
      | "readState"
      | "readTokens"
      | "redeemRewards"
      | "rewardState"
      | "skim"
      | "swapExactPtForSy"
      | "swapSyForExactPt"
      | "symbol"
      | "totalActiveSupply"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "userReward"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Burn"
      | "EIP712DomainChanged"
      | "IncreaseObservationCardinalityNext"
      | "Mint"
      | "RedeemRewards"
      | "Swap"
      | "Transfer"
      | "UpdateImpliedRate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_storage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNonOverrideLnFeeRateRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseObservationsCardinalityNext",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isExpired", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "observations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "observe",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "readState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "skim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapExactPtForSy",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapSyForExactPt",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalActiveSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userReward",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_storage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNonOverrideLnFeeRateRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseObservationsCardinalityNext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "observations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "observe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "skim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactPtForSy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapSyForExactPt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalActiveSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userReward", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [
    receiverSy: AddressLike,
    receiverPt: AddressLike,
    netLpBurned: BigNumberish,
    netSyOut: BigNumberish,
    netPtOut: BigNumberish
  ];
  export type OutputTuple = [
    receiverSy: string,
    receiverPt: string,
    netLpBurned: bigint,
    netSyOut: bigint,
    netPtOut: bigint
  ];
  export interface OutputObject {
    receiverSy: string;
    receiverPt: string;
    netLpBurned: bigint;
    netSyOut: bigint;
    netPtOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncreaseObservationCardinalityNextEvent {
  export type InputTuple = [
    observationCardinalityNextOld: BigNumberish,
    observationCardinalityNextNew: BigNumberish
  ];
  export type OutputTuple = [
    observationCardinalityNextOld: bigint,
    observationCardinalityNextNew: bigint
  ];
  export interface OutputObject {
    observationCardinalityNextOld: bigint;
    observationCardinalityNextNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    receiver: AddressLike,
    netLpMinted: BigNumberish,
    netSyUsed: BigNumberish,
    netPtUsed: BigNumberish
  ];
  export type OutputTuple = [
    receiver: string,
    netLpMinted: bigint,
    netSyUsed: bigint,
    netPtUsed: bigint
  ];
  export interface OutputObject {
    receiver: string;
    netLpMinted: bigint;
    netSyUsed: bigint;
    netPtUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemRewardsEvent {
  export type InputTuple = [user: AddressLike, rewardsOut: BigNumberish[]];
  export type OutputTuple = [user: string, rewardsOut: bigint[]];
  export interface OutputObject {
    user: string;
    rewardsOut: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    netPtOut: BigNumberish,
    netSyOut: BigNumberish,
    netSyFee: BigNumberish,
    netSyToReserve: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    netPtOut: bigint,
    netSyOut: bigint,
    netSyFee: bigint,
    netSyToReserve: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    netPtOut: bigint;
    netSyOut: bigint;
    netSyFee: bigint;
    netSyToReserve: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateImpliedRateEvent {
  export type InputTuple = [
    timestamp: BigNumberish,
    lnLastImpliedRate: BigNumberish
  ];
  export type OutputTuple = [timestamp: bigint, lnLastImpliedRate: bigint];
  export interface OutputObject {
    timestamp: bigint;
    lnLastImpliedRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LiquidityProviderToken extends BaseContract {
  connect(runner?: ContractRunner | null): LiquidityProviderToken;
  waitForDeployment(): Promise<this>;

  interface: LiquidityProviderTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  _storage: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalPt: bigint;
        totalSy: bigint;
        lastLnImpliedRate: bigint;
        observationIndex: bigint;
        observationCardinality: bigint;
        observationCardinalityNext: bigint;
      }
    ],
    "view"
  >;

  activeBalance: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<
    [
      receiverSy: AddressLike,
      receiverPt: AddressLike,
      netLpToBurn: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netPtOut: bigint }],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  expiry: TypedContractMethod<[], [bigint], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  getNonOverrideLnFeeRateRoot: TypedContractMethod<[], [bigint], "view">;

  getRewardTokens: TypedContractMethod<[], [string[]], "view">;

  increaseObservationsCardinalityNext: TypedContractMethod<
    [cardinalityNext: BigNumberish],
    [void],
    "nonpayable"
  >;

  isExpired: TypedContractMethod<[], [boolean], "view">;

  lastRewardBlock: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [
      receiver: AddressLike,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  observations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        blockTimestamp: bigint;
        lnImpliedRateCumulative: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  observe: TypedContractMethod<
    [secondsAgos: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  readState: TypedContractMethod<
    [router: AddressLike],
    [MarketStateStructOutput],
    "view"
  >;

  readTokens: TypedContractMethod<
    [],
    [[string, string, string] & { _SY: string; _PT: string; _YT: string }],
    "view"
  >;

  redeemRewards: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "nonpayable"
  >;

  rewardState: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { index: bigint; lastBalance: bigint }],
    "view"
  >;

  skim: TypedContractMethod<[], [void], "nonpayable">;

  swapExactPtForSy: TypedContractMethod<
    [receiver: AddressLike, exactPtIn: BigNumberish, data: BytesLike],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  swapSyForExactPt: TypedContractMethod<
    [receiver: AddressLike, exactPtOut: BigNumberish, data: BytesLike],
    [[bigint, bigint] & { netSyIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalActiveSupply: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  userReward: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { index: bigint; accrued: bigint }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_storage"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalPt: bigint;
        totalSy: bigint;
        lastLnImpliedRate: bigint;
        observationIndex: bigint;
        observationCardinality: bigint;
        observationCardinalityNext: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "activeBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [
      receiverSy: AddressLike,
      receiverPt: AddressLike,
      netLpToBurn: BigNumberish
    ],
    [[bigint, bigint] & { netSyOut: bigint; netPtOut: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "expiry"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getNonOverrideLnFeeRateRoot"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "increaseObservationsCardinalityNext"
  ): TypedContractMethod<[cardinalityNext: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isExpired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastRewardBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      netSyDesired: BigNumberish,
      netPtDesired: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        netLpOut: bigint;
        netSyUsed: bigint;
        netPtUsed: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "observations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        blockTimestamp: bigint;
        lnImpliedRateCumulative: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "observe"
  ): TypedContractMethod<[secondsAgos: BigNumberish[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "readState"
  ): TypedContractMethod<
    [router: AddressLike],
    [MarketStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "readTokens"
  ): TypedContractMethod<
    [],
    [[string, string, string] & { _SY: string; _PT: string; _YT: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "redeemRewards"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardState"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { index: bigint; lastBalance: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "skim"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapExactPtForSy"
  ): TypedContractMethod<
    [receiver: AddressLike, exactPtIn: BigNumberish, data: BytesLike],
    [[bigint, bigint] & { netSyOut: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapSyForExactPt"
  ): TypedContractMethod<
    [receiver: AddressLike, exactPtOut: BigNumberish, data: BytesLike],
    [[bigint, bigint] & { netSyIn: bigint; netSyFee: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalActiveSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userReward"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { index: bigint; accrued: bigint }],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "IncreaseObservationCardinalityNext"
  ): TypedContractEvent<
    IncreaseObservationCardinalityNextEvent.InputTuple,
    IncreaseObservationCardinalityNextEvent.OutputTuple,
    IncreaseObservationCardinalityNextEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "RedeemRewards"
  ): TypedContractEvent<
    RedeemRewardsEvent.InputTuple,
    RedeemRewardsEvent.OutputTuple,
    RedeemRewardsEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateImpliedRate"
  ): TypedContractEvent<
    UpdateImpliedRateEvent.InputTuple,
    UpdateImpliedRateEvent.OutputTuple,
    UpdateImpliedRateEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Burn(address,address,uint256,uint256,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "IncreaseObservationCardinalityNext(uint16,uint16)": TypedContractEvent<
      IncreaseObservationCardinalityNextEvent.InputTuple,
      IncreaseObservationCardinalityNextEvent.OutputTuple,
      IncreaseObservationCardinalityNextEvent.OutputObject
    >;
    IncreaseObservationCardinalityNext: TypedContractEvent<
      IncreaseObservationCardinalityNextEvent.InputTuple,
      IncreaseObservationCardinalityNextEvent.OutputTuple,
      IncreaseObservationCardinalityNextEvent.OutputObject
    >;

    "Mint(address,uint256,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "RedeemRewards(address,uint256[])": TypedContractEvent<
      RedeemRewardsEvent.InputTuple,
      RedeemRewardsEvent.OutputTuple,
      RedeemRewardsEvent.OutputObject
    >;
    RedeemRewards: TypedContractEvent<
      RedeemRewardsEvent.InputTuple,
      RedeemRewardsEvent.OutputTuple,
      RedeemRewardsEvent.OutputObject
    >;

    "Swap(address,address,int256,int256,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateImpliedRate(uint256,uint256)": TypedContractEvent<
      UpdateImpliedRateEvent.InputTuple,
      UpdateImpliedRateEvent.OutputTuple,
      UpdateImpliedRateEvent.OutputObject
    >;
    UpdateImpliedRate: TypedContractEvent<
      UpdateImpliedRateEvent.InputTuple,
      UpdateImpliedRateEvent.OutputTuple,
      UpdateImpliedRateEvent.OutputObject
    >;
  };
}
