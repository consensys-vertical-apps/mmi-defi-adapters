/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DistributionTypes {
  export type AssetConfigInputStruct = {
    emissionPerSecond: BigNumberish;
    totalStaked: BigNumberish;
    underlyingAsset: AddressLike;
  };

  export type AssetConfigInputStructOutput = [
    emissionPerSecond: bigint,
    totalStaked: bigint,
    underlyingAsset: string
  ] & {
    emissionPerSecond: bigint;
    totalStaked: bigint;
    underlyingAsset: string;
  };
}

export interface StakeTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CLAIM_HELPER_ROLE"
      | "COOLDOWN_ADMIN_ROLE"
      | "DOMAIN_SEPARATOR"
      | "EMISSION_MANAGER"
      | "EXCHANGE_RATE_UNIT"
      | "INITIAL_EXCHANGE_RATE"
      | "LOWER_BOUND"
      | "PRECISION"
      | "REWARDS_VAULT"
      | "REWARD_TOKEN"
      | "SLASH_ADMIN_ROLE"
      | "STAKED_TOKEN"
      | "UNSTAKE_WINDOW"
      | "allowance"
      | "approve"
      | "assets"
      | "balanceOf"
      | "claimRewards"
      | "claimRewardsAndRedeem"
      | "claimRewardsAndRedeemOnBehalf"
      | "claimRewardsOnBehalf"
      | "claimRoleAdmin"
      | "configureAssets"
      | "cooldown"
      | "cooldownOnBehalfOf"
      | "decimals"
      | "distributionEnd"
      | "eip712Domain"
      | "getAdmin"
      | "getCooldownSeconds"
      | "getExchangeRate"
      | "getMaxSlashablePercentage"
      | "getPendingAdmin"
      | "getTotalRewardsBalance"
      | "getUserAssetData"
      | "inPostSlashingPeriod"
      | "initialize"
      | "name"
      | "nonces"
      | "permit"
      | "previewRedeem"
      | "previewStake"
      | "redeem"
      | "redeemOnBehalf"
      | "returnFunds"
      | "setCooldownSeconds"
      | "setDistributionEnd"
      | "setMaxSlashablePercentage"
      | "setPendingAdmin"
      | "settleSlashing"
      | "slash"
      | "stake"
      | "stakeWithPermit"
      | "stakerRewardsToClaim"
      | "stakersCooldowns"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "AssetConfigUpdated"
      | "AssetIndexUpdated"
      | "Cooldown"
      | "CooldownSecondsChanged"
      | "DistributionEndChanged"
      | "EIP712DomainChanged"
      | "ExchangeRateChanged"
      | "FundsReturned"
      | "Initialized"
      | "MaxSlashablePercentageChanged"
      | "PendingAdminChanged"
      | "Redeem"
      | "RewardsAccrued"
      | "RewardsClaimed"
      | "RoleClaimed"
      | "Slashed"
      | "SlashingExitWindowDurationChanged"
      | "SlashingSettled"
      | "Staked"
      | "Transfer"
      | "UserIndexUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CLAIM_HELPER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COOLDOWN_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMISSION_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXCHANGE_RATE_UNIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INITIAL_EXCHANGE_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LOWER_BOUND",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REWARDS_VAULT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SLASH_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKED_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNSTAKE_WINDOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsAndRedeem",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsAndRedeemOnBehalf",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsOnBehalf",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRoleAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureAssets",
    values: [DistributionTypes.AssetConfigInputStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "cooldown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cooldownOnBehalfOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCooldownSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxSlashablePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingAdmin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewardsBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssetData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inPostSlashingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemOnBehalf",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "returnFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownSeconds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionEnd",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSlashablePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleSlashing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithPermit",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerRewardsToClaim",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakersCooldowns",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CLAIM_HELPER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COOLDOWN_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMISSION_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXCHANGE_RATE_UNIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INITIAL_EXCHANGE_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LOWER_BOUND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARDS_VAULT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SLASH_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKED_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNSTAKE_WINDOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsAndRedeemOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cooldown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cooldownOnBehalfOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributionEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCooldownSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxSlashablePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inPostSlashingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSlashablePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleSlashing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerRewardsToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakersCooldowns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetConfigUpdatedEvent {
  export type InputTuple = [asset: AddressLike, emission: BigNumberish];
  export type OutputTuple = [asset: string, emission: bigint];
  export interface OutputObject {
    asset: string;
    emission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetIndexUpdatedEvent {
  export type InputTuple = [asset: AddressLike, index: BigNumberish];
  export type OutputTuple = [asset: string, index: bigint];
  export interface OutputObject {
    asset: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CooldownEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CooldownSecondsChangedEvent {
  export type InputTuple = [cooldownSeconds: BigNumberish];
  export type OutputTuple = [cooldownSeconds: bigint];
  export interface OutputObject {
    cooldownSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionEndChangedEvent {
  export type InputTuple = [endTimestamp: BigNumberish];
  export type OutputTuple = [endTimestamp: bigint];
  export interface OutputObject {
    endTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExchangeRateChangedEvent {
  export type InputTuple = [exchangeRate: BigNumberish];
  export type OutputTuple = [exchangeRate: bigint];
  export interface OutputObject {
    exchangeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReturnedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxSlashablePercentageChangedEvent {
  export type InputTuple = [newPercentage: BigNumberish];
  export type OutputTuple = [newPercentage: bigint];
  export interface OutputObject {
    newPercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingAdminChangedEvent {
  export type InputTuple = [newPendingAdmin: AddressLike, role: BigNumberish];
  export type OutputTuple = [newPendingAdmin: string, role: bigint];
  export interface OutputObject {
    newPendingAdmin: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsAccruedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleClaimedEvent {
  export type InputTuple = [newAdmin: AddressLike, role: BigNumberish];
  export type OutputTuple = [newAdmin: string, role: bigint];
  export interface OutputObject {
    newAdmin: string;
    role: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashedEvent {
  export type InputTuple = [destination: AddressLike, amount: BigNumberish];
  export type OutputTuple = [destination: string, amount: bigint];
  export interface OutputObject {
    destination: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashingExitWindowDurationChangedEvent {
  export type InputTuple = [windowSeconds: BigNumberish];
  export type OutputTuple = [windowSeconds: bigint];
  export interface OutputObject {
    windowSeconds: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashingSettledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    to: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    from: string;
    to: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserIndexUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    asset: AddressLike,
    index: BigNumberish
  ];
  export type OutputTuple = [user: string, asset: string, index: bigint];
  export interface OutputObject {
    user: string;
    asset: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakeToken extends BaseContract {
  connect(runner?: ContractRunner | null): StakeToken;
  waitForDeployment(): Promise<this>;

  interface: StakeTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CLAIM_HELPER_ROLE: TypedContractMethod<[], [bigint], "view">;

  COOLDOWN_ADMIN_ROLE: TypedContractMethod<[], [bigint], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  EMISSION_MANAGER: TypedContractMethod<[], [string], "view">;

  EXCHANGE_RATE_UNIT: TypedContractMethod<[], [bigint], "view">;

  INITIAL_EXCHANGE_RATE: TypedContractMethod<[], [bigint], "view">;

  LOWER_BOUND: TypedContractMethod<[], [bigint], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  REWARDS_VAULT: TypedContractMethod<[], [string], "view">;

  REWARD_TOKEN: TypedContractMethod<[], [string], "view">;

  SLASH_ADMIN_ROLE: TypedContractMethod<[], [bigint], "view">;

  STAKED_TOKEN: TypedContractMethod<[], [string], "view">;

  UNSTAKE_WINDOW: TypedContractMethod<[], [bigint], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  assets: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        emissionPerSecond: bigint;
        lastUpdateTimestamp: bigint;
        index: bigint;
      }
    ],
    "view"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  claimRewards: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRewardsAndRedeem: TypedContractMethod<
    [to: AddressLike, claimAmount: BigNumberish, redeemAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRewardsAndRedeemOnBehalf: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      claimAmount: BigNumberish,
      redeemAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  claimRewardsOnBehalf: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  claimRoleAdmin: TypedContractMethod<
    [role: BigNumberish],
    [void],
    "nonpayable"
  >;

  configureAssets: TypedContractMethod<
    [assetsConfigInput: DistributionTypes.AssetConfigInputStruct[]],
    [void],
    "nonpayable"
  >;

  cooldown: TypedContractMethod<[], [void], "nonpayable">;

  cooldownOnBehalfOf: TypedContractMethod<
    [from: AddressLike],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  distributionEnd: TypedContractMethod<[], [bigint], "view">;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getAdmin: TypedContractMethod<[role: BigNumberish], [string], "view">;

  getCooldownSeconds: TypedContractMethod<[], [bigint], "view">;

  getExchangeRate: TypedContractMethod<[], [bigint], "view">;

  getMaxSlashablePercentage: TypedContractMethod<[], [bigint], "view">;

  getPendingAdmin: TypedContractMethod<[role: BigNumberish], [string], "view">;

  getTotalRewardsBalance: TypedContractMethod<
    [staker: AddressLike],
    [bigint],
    "view"
  >;

  getUserAssetData: TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [bigint],
    "view"
  >;

  inPostSlashingPeriod: TypedContractMethod<[], [boolean], "view">;

  initialize: TypedContractMethod<
    [
      name: string,
      symbol: string,
      slashingAdmin: AddressLike,
      cooldownPauseAdmin: AddressLike,
      claimHelper: AddressLike,
      maxSlashablePercentage: BigNumberish,
      cooldownSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  previewRedeem: TypedContractMethod<[shares: BigNumberish], [bigint], "view">;

  previewStake: TypedContractMethod<[assets: BigNumberish], [bigint], "view">;

  redeem: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemOnBehalf: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  returnFunds: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCooldownSeconds: TypedContractMethod<
    [cooldownSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDistributionEnd: TypedContractMethod<
    [newDistributionEnd: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxSlashablePercentage: TypedContractMethod<
    [percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPendingAdmin: TypedContractMethod<
    [role: BigNumberish, newPendingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  settleSlashing: TypedContractMethod<[], [void], "nonpayable">;

  slash: TypedContractMethod<
    [destination: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakeWithPermit: TypedContractMethod<
    [
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  stakerRewardsToClaim: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  stakersCooldowns: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { timestamp: bigint; amount: bigint }],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CLAIM_HELPER_ROLE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "COOLDOWN_ADMIN_ROLE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EMISSION_MANAGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "EXCHANGE_RATE_UNIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "INITIAL_EXCHANGE_RATE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LOWER_BOUND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARDS_VAULT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REWARD_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SLASH_ADMIN_ROLE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "STAKED_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UNSTAKE_WINDOW"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        emissionPerSecond: bigint;
        lastUpdateTimestamp: bigint;
        index: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardsAndRedeem"
  ): TypedContractMethod<
    [to: AddressLike, claimAmount: BigNumberish, redeemAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardsAndRedeemOnBehalf"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      claimAmount: BigNumberish,
      redeemAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardsOnBehalf"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRoleAdmin"
  ): TypedContractMethod<[role: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureAssets"
  ): TypedContractMethod<
    [assetsConfigInput: DistributionTypes.AssetConfigInputStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cooldown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cooldownOnBehalfOf"
  ): TypedContractMethod<[from: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "distributionEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdmin"
  ): TypedContractMethod<[role: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCooldownSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxSlashablePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingAdmin"
  ): TypedContractMethod<[role: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalRewardsBalance"
  ): TypedContractMethod<[staker: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAssetData"
  ): TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "inPostSlashingPeriod"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      slashingAdmin: AddressLike,
      cooldownPauseAdmin: AddressLike,
      claimHelper: AddressLike,
      maxSlashablePercentage: BigNumberish,
      cooldownSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewStake"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemOnBehalf"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "returnFunds"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCooldownSeconds"
  ): TypedContractMethod<[cooldownSeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDistributionEnd"
  ): TypedContractMethod<
    [newDistributionEnd: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxSlashablePercentage"
  ): TypedContractMethod<[percentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<
    [role: BigNumberish, newPendingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleSlashing"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slash"
  ): TypedContractMethod<
    [destination: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeWithPermit"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakerRewardsToClaim"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakersCooldowns"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { timestamp: bigint; amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "AssetConfigUpdated"
  ): TypedContractEvent<
    AssetConfigUpdatedEvent.InputTuple,
    AssetConfigUpdatedEvent.OutputTuple,
    AssetConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetIndexUpdated"
  ): TypedContractEvent<
    AssetIndexUpdatedEvent.InputTuple,
    AssetIndexUpdatedEvent.OutputTuple,
    AssetIndexUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Cooldown"
  ): TypedContractEvent<
    CooldownEvent.InputTuple,
    CooldownEvent.OutputTuple,
    CooldownEvent.OutputObject
  >;
  getEvent(
    key: "CooldownSecondsChanged"
  ): TypedContractEvent<
    CooldownSecondsChangedEvent.InputTuple,
    CooldownSecondsChangedEvent.OutputTuple,
    CooldownSecondsChangedEvent.OutputObject
  >;
  getEvent(
    key: "DistributionEndChanged"
  ): TypedContractEvent<
    DistributionEndChangedEvent.InputTuple,
    DistributionEndChangedEvent.OutputTuple,
    DistributionEndChangedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExchangeRateChanged"
  ): TypedContractEvent<
    ExchangeRateChangedEvent.InputTuple,
    ExchangeRateChangedEvent.OutputTuple,
    ExchangeRateChangedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReturned"
  ): TypedContractEvent<
    FundsReturnedEvent.InputTuple,
    FundsReturnedEvent.OutputTuple,
    FundsReturnedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxSlashablePercentageChanged"
  ): TypedContractEvent<
    MaxSlashablePercentageChangedEvent.InputTuple,
    MaxSlashablePercentageChangedEvent.OutputTuple,
    MaxSlashablePercentageChangedEvent.OutputObject
  >;
  getEvent(
    key: "PendingAdminChanged"
  ): TypedContractEvent<
    PendingAdminChangedEvent.InputTuple,
    PendingAdminChangedEvent.OutputTuple,
    PendingAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "RewardsAccrued"
  ): TypedContractEvent<
    RewardsAccruedEvent.InputTuple,
    RewardsAccruedEvent.OutputTuple,
    RewardsAccruedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RoleClaimed"
  ): TypedContractEvent<
    RoleClaimedEvent.InputTuple,
    RoleClaimedEvent.OutputTuple,
    RoleClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Slashed"
  ): TypedContractEvent<
    SlashedEvent.InputTuple,
    SlashedEvent.OutputTuple,
    SlashedEvent.OutputObject
  >;
  getEvent(
    key: "SlashingExitWindowDurationChanged"
  ): TypedContractEvent<
    SlashingExitWindowDurationChangedEvent.InputTuple,
    SlashingExitWindowDurationChangedEvent.OutputTuple,
    SlashingExitWindowDurationChangedEvent.OutputObject
  >;
  getEvent(
    key: "SlashingSettled"
  ): TypedContractEvent<
    SlashingSettledEvent.InputTuple,
    SlashingSettledEvent.OutputTuple,
    SlashingSettledEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UserIndexUpdated"
  ): TypedContractEvent<
    UserIndexUpdatedEvent.InputTuple,
    UserIndexUpdatedEvent.OutputTuple,
    UserIndexUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "AssetConfigUpdated(address,uint256)": TypedContractEvent<
      AssetConfigUpdatedEvent.InputTuple,
      AssetConfigUpdatedEvent.OutputTuple,
      AssetConfigUpdatedEvent.OutputObject
    >;
    AssetConfigUpdated: TypedContractEvent<
      AssetConfigUpdatedEvent.InputTuple,
      AssetConfigUpdatedEvent.OutputTuple,
      AssetConfigUpdatedEvent.OutputObject
    >;

    "AssetIndexUpdated(address,uint256)": TypedContractEvent<
      AssetIndexUpdatedEvent.InputTuple,
      AssetIndexUpdatedEvent.OutputTuple,
      AssetIndexUpdatedEvent.OutputObject
    >;
    AssetIndexUpdated: TypedContractEvent<
      AssetIndexUpdatedEvent.InputTuple,
      AssetIndexUpdatedEvent.OutputTuple,
      AssetIndexUpdatedEvent.OutputObject
    >;

    "Cooldown(address,uint256)": TypedContractEvent<
      CooldownEvent.InputTuple,
      CooldownEvent.OutputTuple,
      CooldownEvent.OutputObject
    >;
    Cooldown: TypedContractEvent<
      CooldownEvent.InputTuple,
      CooldownEvent.OutputTuple,
      CooldownEvent.OutputObject
    >;

    "CooldownSecondsChanged(uint256)": TypedContractEvent<
      CooldownSecondsChangedEvent.InputTuple,
      CooldownSecondsChangedEvent.OutputTuple,
      CooldownSecondsChangedEvent.OutputObject
    >;
    CooldownSecondsChanged: TypedContractEvent<
      CooldownSecondsChangedEvent.InputTuple,
      CooldownSecondsChangedEvent.OutputTuple,
      CooldownSecondsChangedEvent.OutputObject
    >;

    "DistributionEndChanged(uint256)": TypedContractEvent<
      DistributionEndChangedEvent.InputTuple,
      DistributionEndChangedEvent.OutputTuple,
      DistributionEndChangedEvent.OutputObject
    >;
    DistributionEndChanged: TypedContractEvent<
      DistributionEndChangedEvent.InputTuple,
      DistributionEndChangedEvent.OutputTuple,
      DistributionEndChangedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "ExchangeRateChanged(uint216)": TypedContractEvent<
      ExchangeRateChangedEvent.InputTuple,
      ExchangeRateChangedEvent.OutputTuple,
      ExchangeRateChangedEvent.OutputObject
    >;
    ExchangeRateChanged: TypedContractEvent<
      ExchangeRateChangedEvent.InputTuple,
      ExchangeRateChangedEvent.OutputTuple,
      ExchangeRateChangedEvent.OutputObject
    >;

    "FundsReturned(uint256)": TypedContractEvent<
      FundsReturnedEvent.InputTuple,
      FundsReturnedEvent.OutputTuple,
      FundsReturnedEvent.OutputObject
    >;
    FundsReturned: TypedContractEvent<
      FundsReturnedEvent.InputTuple,
      FundsReturnedEvent.OutputTuple,
      FundsReturnedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxSlashablePercentageChanged(uint256)": TypedContractEvent<
      MaxSlashablePercentageChangedEvent.InputTuple,
      MaxSlashablePercentageChangedEvent.OutputTuple,
      MaxSlashablePercentageChangedEvent.OutputObject
    >;
    MaxSlashablePercentageChanged: TypedContractEvent<
      MaxSlashablePercentageChangedEvent.InputTuple,
      MaxSlashablePercentageChangedEvent.OutputTuple,
      MaxSlashablePercentageChangedEvent.OutputObject
    >;

    "PendingAdminChanged(address,uint256)": TypedContractEvent<
      PendingAdminChangedEvent.InputTuple,
      PendingAdminChangedEvent.OutputTuple,
      PendingAdminChangedEvent.OutputObject
    >;
    PendingAdminChanged: TypedContractEvent<
      PendingAdminChangedEvent.InputTuple,
      PendingAdminChangedEvent.OutputTuple,
      PendingAdminChangedEvent.OutputObject
    >;

    "Redeem(address,address,uint256,uint256)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "RewardsAccrued(address,uint256)": TypedContractEvent<
      RewardsAccruedEvent.InputTuple,
      RewardsAccruedEvent.OutputTuple,
      RewardsAccruedEvent.OutputObject
    >;
    RewardsAccrued: TypedContractEvent<
      RewardsAccruedEvent.InputTuple,
      RewardsAccruedEvent.OutputTuple,
      RewardsAccruedEvent.OutputObject
    >;

    "RewardsClaimed(address,address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "RoleClaimed(address,uint256)": TypedContractEvent<
      RoleClaimedEvent.InputTuple,
      RoleClaimedEvent.OutputTuple,
      RoleClaimedEvent.OutputObject
    >;
    RoleClaimed: TypedContractEvent<
      RoleClaimedEvent.InputTuple,
      RoleClaimedEvent.OutputTuple,
      RoleClaimedEvent.OutputObject
    >;

    "Slashed(address,uint256)": TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;
    Slashed: TypedContractEvent<
      SlashedEvent.InputTuple,
      SlashedEvent.OutputTuple,
      SlashedEvent.OutputObject
    >;

    "SlashingExitWindowDurationChanged(uint256)": TypedContractEvent<
      SlashingExitWindowDurationChangedEvent.InputTuple,
      SlashingExitWindowDurationChangedEvent.OutputTuple,
      SlashingExitWindowDurationChangedEvent.OutputObject
    >;
    SlashingExitWindowDurationChanged: TypedContractEvent<
      SlashingExitWindowDurationChangedEvent.InputTuple,
      SlashingExitWindowDurationChangedEvent.OutputTuple,
      SlashingExitWindowDurationChangedEvent.OutputObject
    >;

    "SlashingSettled()": TypedContractEvent<
      SlashingSettledEvent.InputTuple,
      SlashingSettledEvent.OutputTuple,
      SlashingSettledEvent.OutputObject
    >;
    SlashingSettled: TypedContractEvent<
      SlashingSettledEvent.InputTuple,
      SlashingSettledEvent.OutputTuple,
      SlashingSettledEvent.OutputObject
    >;

    "Staked(address,address,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UserIndexUpdated(address,address,uint256)": TypedContractEvent<
      UserIndexUpdatedEvent.InputTuple,
      UserIndexUpdatedEvent.OutputTuple,
      UserIndexUpdatedEvent.OutputObject
    >;
    UserIndexUpdated: TypedContractEvent<
      UserIndexUpdatedEvent.InputTuple,
      UserIndexUpdatedEvent.OutputTuple,
      UserIndexUpdatedEvent.OutputObject
    >;
  };
}
