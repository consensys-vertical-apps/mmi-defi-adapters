/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type MarketStateStruct = {
  totalPt: BigNumberish;
  totalSy: BigNumberish;
  totalLp: BigNumberish;
  treasury: AddressLike;
  scalarRoot: BigNumberish;
  expiry: BigNumberish;
  lnFeeRateRoot: BigNumberish;
  reserveFeePercent: BigNumberish;
  lastLnImpliedRate: BigNumberish;
};

export type MarketStateStructOutput = [
  totalPt: bigint,
  totalSy: bigint,
  totalLp: bigint,
  treasury: string,
  scalarRoot: bigint,
  expiry: bigint,
  lnFeeRateRoot: bigint,
  reserveFeePercent: bigint,
  lastLnImpliedRate: bigint
] & {
  totalPt: bigint;
  totalSy: bigint;
  totalLp: bigint;
  treasury: string;
  scalarRoot: bigint;
  expiry: bigint;
  lnFeeRateRoot: bigint;
  reserveFeePercent: bigint;
  lastLnImpliedRate: bigint;
};

export interface PendleMarketInterface extends Interface {
  getFunction(nameOrSignature: "readState" | "readTokens"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "readState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "readTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "readState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readTokens", data: BytesLike): Result;
}

export interface PendleMarket extends BaseContract {
  connect(runner?: ContractRunner | null): PendleMarket;
  waitForDeployment(): Promise<this>;

  interface: PendleMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  readState: TypedContractMethod<
    [router: AddressLike],
    [MarketStateStructOutput],
    "view"
  >;

  readTokens: TypedContractMethod<
    [],
    [[string, string, string] & { _SY: string; _PT: string; _YT: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "readState"
  ): TypedContractMethod<
    [router: AddressLike],
    [MarketStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "readTokens"
  ): TypedContractMethod<
    [],
    [[string, string, string] & { _SY: string; _PT: string; _YT: string }],
    "view"
  >;

  filters: {};
}
