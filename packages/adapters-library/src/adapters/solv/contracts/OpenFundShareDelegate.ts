/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OpenFundShareDelegateInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAdmin"
      | "admin"
      | "allowRepayWithBalance"
      | "allowance"
      | "approve(address,uint256)"
      | "approve(uint256,address,uint256)"
      | "balanceOf(address)"
      | "balanceOf(uint256)"
      | "burnOnlyIssueMarket"
      | "claimTo"
      | "concrete"
      | "contractType"
      | "contractURI"
      | "createSlotOnlyIssueMarket"
      | "delegateToConcreteView"
      | "getAddress"
      | "getApproved"
      | "getRequiredAddress"
      | "initialize"
      | "isApprovedForAll"
      | "isResolverCached"
      | "metadataDescriptor"
      | "mintOnlyIssueMarket"
      | "mintValueOnlyIssueMarket"
      | "name"
      | "owner"
      | "ownerOf"
      | "pendingAdmin"
      | "rebuildCache"
      | "repay"
      | "repayWithBalance"
      | "resolver"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setConcreteOnlyAdmin"
      | "setCurrencyOnlyOwner"
      | "setInterestRateOnlySupervisor"
      | "setOwnerOnlyAdmin"
      | "setPendingAdmin"
      | "slotByIndex"
      | "slotCount"
      | "slotOf"
      | "slotURI"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenInSlotByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenSupplyInSlot"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom(uint256,address,uint256)"
      | "transferFrom(address,address,uint256)"
      | "transferFrom(uint256,uint256,uint256)"
      | "valueDecimals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ApprovalValue"
      | "BurnValue"
      | "Claim"
      | "CreateSlot"
      | "Initialized"
      | "MintValue"
      | "NewAdmin"
      | "NewConcrete"
      | "NewOwner"
      | "NewPendingAdmin"
      | "Repay"
      | "SetCurrency"
      | "SetInterestRate"
      | "SetMetadataDescriptor"
      | "SlotChanged"
      | "Transfer"
      | "TransferValue"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowRepayWithBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnOnlyIssueMarket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTo",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "concrete", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contractType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSlotOnlyIssueMarket",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateToConcreteView",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      string,
      string,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isResolverCached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataDescriptor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintOnlyIssueMarket",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintValueOnlyIssueMarket",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebuildCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithBalance",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resolver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setConcreteOnlyAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrencyOnlyOwner",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateOnlySupervisor",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerOnlyAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slotByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "slotCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "slotOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInSlotByIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSupplyInSlot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "valueDecimals",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowRepayWithBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approve(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnOnlyIssueMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "concrete", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSlotOnlyIssueMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateToConcreteView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isResolverCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataDescriptor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOnlyIssueMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintValueOnlyIssueMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebuildCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayWithBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConcreteOnlyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrencyOnlyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateOnlySupervisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerOnlyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slotByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slotCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slotURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenInSlotByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSupplyInSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "valueDecimals",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _approved: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [
    _owner: string,
    _approved: string,
    _tokenId: bigint
  ];
  export interface OutputObject {
    _owner: string;
    _approved: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _operator: AddressLike,
    _approved: boolean
  ];
  export type OutputTuple = [
    _owner: string,
    _operator: string,
    _approved: boolean
  ];
  export interface OutputObject {
    _owner: string;
    _operator: string;
    _approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalValueEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _operator: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _operator: string,
    _value: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _operator: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnValueEvent {
  export type InputTuple = [tokenId: BigNumberish, burnValue: BigNumberish];
  export type OutputTuple = [tokenId: bigint, burnValue: bigint];
  export interface OutputObject {
    tokenId: bigint;
    burnValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenId: BigNumberish,
    claimValue: BigNumberish
  ];
  export type OutputTuple = [to: string, tokenId: bigint, claimValue: bigint];
  export interface OutputObject {
    to: string;
    tokenId: bigint;
    claimValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateSlotEvent {
  export type InputTuple = [
    _slot: BigNumberish,
    _creator: AddressLike,
    _slotInfo: BytesLike
  ];
  export type OutputTuple = [
    _slot: bigint,
    _creator: string,
    _slotInfo: string
  ];
  export interface OutputObject {
    _slot: bigint;
    _creator: string;
    _slotInfo: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintValueEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _slot: BigNumberish,
    _value: BigNumberish
  ];
  export type OutputTuple = [_tokenId: bigint, _slot: bigint, _value: bigint];
  export interface OutputObject {
    _tokenId: bigint;
    _slot: bigint;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewConcreteEvent {
  export type InputTuple = [old_: AddressLike, new_: AddressLike];
  export type OutputTuple = [old_: string, new_: string];
  export interface OutputObject {
    old_: string;
    new_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewOwnerEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayEvent {
  export type InputTuple = [
    slot: BigNumberish,
    payer: AddressLike,
    repayCurrencyAmount: BigNumberish
  ];
  export type OutputTuple = [
    slot: bigint,
    payer: string,
    repayCurrencyAmount: bigint
  ];
  export interface OutputObject {
    slot: bigint;
    payer: string;
    repayCurrencyAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCurrencyEvent {
  export type InputTuple = [currency: AddressLike, isAllowed: boolean];
  export type OutputTuple = [currency: string, isAllowed: boolean];
  export interface OutputObject {
    currency: string;
    isAllowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetInterestRateEvent {
  export type InputTuple = [slot: BigNumberish, interestRate: BigNumberish];
  export type OutputTuple = [slot: bigint, interestRate: bigint];
  export interface OutputObject {
    slot: bigint;
    interestRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMetadataDescriptorEvent {
  export type InputTuple = [metadataDescriptor: AddressLike];
  export type OutputTuple = [metadataDescriptor: string];
  export interface OutputObject {
    metadataDescriptor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlotChangedEvent {
  export type InputTuple = [
    _tokenId: BigNumberish,
    _oldSlot: BigNumberish,
    _newSlot: BigNumberish
  ];
  export type OutputTuple = [
    _tokenId: bigint,
    _oldSlot: bigint,
    _newSlot: bigint
  ];
  export interface OutputObject {
    _tokenId: bigint;
    _oldSlot: bigint;
    _newSlot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _tokenId: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _tokenId: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferValueEvent {
  export type InputTuple = [
    _fromTokenId: BigNumberish,
    _toTokenId: BigNumberish,
    _value: BigNumberish
  ];
  export type OutputTuple = [
    _fromTokenId: bigint,
    _toTokenId: bigint,
    _value: bigint
  ];
  export interface OutputObject {
    _fromTokenId: bigint;
    _toTokenId: bigint;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OpenFundShareDelegate extends BaseContract {
  connect(runner?: ContractRunner | null): OpenFundShareDelegate;
  waitForDeployment(): Promise<this>;

  interface: OpenFundShareDelegateInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  allowRepayWithBalance: TypedContractMethod<[], [boolean], "view">;

  allowance: TypedContractMethod<
    [tokenId_: BigNumberish, operator_: AddressLike],
    [bigint],
    "view"
  >;

  "approve(address,uint256)": TypedContractMethod<
    [to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;

  "approve(uint256,address,uint256)": TypedContractMethod<
    [tokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [void],
    "payable"
  >;

  "balanceOf(address)": TypedContractMethod<
    [owner_: AddressLike],
    [bigint],
    "view"
  >;

  "balanceOf(uint256)": TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint],
    "view"
  >;

  burnOnlyIssueMarket: TypedContractMethod<
    [tokenId_: BigNumberish, burnValue_: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimTo: TypedContractMethod<
    [
      to_: AddressLike,
      tokenId_: BigNumberish,
      currency_: AddressLike,
      claimValue_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  concrete: TypedContractMethod<[], [string], "view">;

  contractType: TypedContractMethod<[], [string], "view">;

  contractURI: TypedContractMethod<[], [string], "view">;

  createSlotOnlyIssueMarket: TypedContractMethod<
    [txSender_: AddressLike, inputSlotInfo_: BytesLike],
    [bigint],
    "nonpayable"
  >;

  delegateToConcreteView: TypedContractMethod<
    [data: BytesLike],
    [string],
    "view"
  >;

  getAddress: TypedContractMethod<[name_: BytesLike], [string], "view">;

  getApproved: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  getRequiredAddress: TypedContractMethod<
    [name_: BytesLike, reason_: string],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      resolver_: AddressLike,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      concrete_: AddressLike,
      descriptor_: AddressLike,
      owner_: AddressLike,
      allowRepayWithBalance_: boolean
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner_: AddressLike, operator_: AddressLike],
    [boolean],
    "view"
  >;

  isResolverCached: TypedContractMethod<[], [boolean], "view">;

  metadataDescriptor: TypedContractMethod<[], [string], "view">;

  mintOnlyIssueMarket: TypedContractMethod<
    [
      txSender_: AddressLike,
      currency_: AddressLike,
      mintTo_: AddressLike,
      slot_: BigNumberish,
      value_: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  mintValueOnlyIssueMarket: TypedContractMethod<
    [
      txSender_: AddressLike,
      currency_: AddressLike,
      tokenId_: BigNumberish,
      mintValue_: BigNumberish
    ],
    [void],
    "payable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  rebuildCache: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<
    [
      slot_: BigNumberish,
      currency_: AddressLike,
      repayCurrencyAmount_: BigNumberish
    ],
    [void],
    "payable"
  >;

  repayWithBalance: TypedContractMethod<
    [
      slot_: BigNumberish,
      currency_: AddressLike,
      repayCurrencyAmount_: BigNumberish
    ],
    [void],
    "payable"
  >;

  resolver: TypedContractMethod<[], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from_: AddressLike,
      to_: AddressLike,
      tokenId_: BigNumberish,
      data_: BytesLike
    ],
    [void],
    "payable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator_: AddressLike, approved_: boolean],
    [void],
    "nonpayable"
  >;

  setConcreteOnlyAdmin: TypedContractMethod<
    [newConcrete_: AddressLike],
    [void],
    "nonpayable"
  >;

  setCurrencyOnlyOwner: TypedContractMethod<
    [currency_: AddressLike, isAllowed_: boolean],
    [void],
    "nonpayable"
  >;

  setInterestRateOnlySupervisor: TypedContractMethod<
    [slot_: BigNumberish, interestRate_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwnerOnlyAdmin: TypedContractMethod<
    [newOwner_: AddressLike],
    [void],
    "nonpayable"
  >;

  setPendingAdmin: TypedContractMethod<
    [newPendingAdmin_: AddressLike],
    [void],
    "nonpayable"
  >;

  slotByIndex: TypedContractMethod<[index_: BigNumberish], [bigint], "view">;

  slotCount: TypedContractMethod<[], [bigint], "view">;

  slotOf: TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;

  slotURI: TypedContractMethod<[slot_: BigNumberish], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenByIndex: TypedContractMethod<[index_: BigNumberish], [bigint], "view">;

  tokenInSlotByIndex: TypedContractMethod<
    [slot_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner_: AddressLike, index_: BigNumberish],
    [bigint],
    "view"
  >;

  tokenSupplyInSlot: TypedContractMethod<
    [slot_: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  "transferFrom(uint256,address,uint256)": TypedContractMethod<
    [fromTokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [bigint],
    "payable"
  >;

  "transferFrom(address,address,uint256)": TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;

  "transferFrom(uint256,uint256,uint256)": TypedContractMethod<
    [
      fromTokenId_: BigNumberish,
      toTokenId_: BigNumberish,
      value_: BigNumberish
    ],
    [void],
    "payable"
  >;

  valueDecimals: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowRepayWithBalance"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, operator_: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve(address,uint256)"
  ): TypedContractMethod<
    [to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "approve(uint256,address,uint256)"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "balanceOf(address)"
  ): TypedContractMethod<[owner_: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf(uint256)"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnOnlyIssueMarket"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, burnValue_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimTo"
  ): TypedContractMethod<
    [
      to_: AddressLike,
      tokenId_: BigNumberish,
      currency_: AddressLike,
      claimValue_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "concrete"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractType"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "contractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createSlotOnlyIssueMarket"
  ): TypedContractMethod<
    [txSender_: AddressLike, inputSlotInfo_: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateToConcreteView"
  ): TypedContractMethod<[data: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[name_: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRequiredAddress"
  ): TypedContractMethod<[name_: BytesLike, reason_: string], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      resolver_: AddressLike,
      name_: string,
      symbol_: string,
      decimals_: BigNumberish,
      concrete_: AddressLike,
      descriptor_: AddressLike,
      owner_: AddressLike,
      allowRepayWithBalance_: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner_: AddressLike, operator_: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isResolverCached"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "metadataDescriptor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintOnlyIssueMarket"
  ): TypedContractMethod<
    [
      txSender_: AddressLike,
      currency_: AddressLike,
      mintTo_: AddressLike,
      slot_: BigNumberish,
      value_: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "mintValueOnlyIssueMarket"
  ): TypedContractMethod<
    [
      txSender_: AddressLike,
      currency_: AddressLike,
      tokenId_: BigNumberish,
      mintValue_: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rebuildCache"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [
      slot_: BigNumberish,
      currency_: AddressLike,
      repayCurrencyAmount_: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "repayWithBalance"
  ): TypedContractMethod<
    [
      slot_: BigNumberish,
      currency_: AddressLike,
      repayCurrencyAmount_: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "resolver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from_: AddressLike,
      to_: AddressLike,
      tokenId_: BigNumberish,
      data_: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator_: AddressLike, approved_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConcreteOnlyAdmin"
  ): TypedContractMethod<[newConcrete_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCurrencyOnlyOwner"
  ): TypedContractMethod<
    [currency_: AddressLike, isAllowed_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setInterestRateOnlySupervisor"
  ): TypedContractMethod<
    [slot_: BigNumberish, interestRate_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwnerOnlyAdmin"
  ): TypedContractMethod<[newOwner_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slotByIndex"
  ): TypedContractMethod<[index_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "slotCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "slotOf"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "slotURI"
  ): TypedContractMethod<[slot_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenInSlotByIndex"
  ): TypedContractMethod<
    [slot_: BigNumberish, index_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner_: AddressLike, index_: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenSupplyInSlot"
  ): TypedContractMethod<[slot_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId_: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom(uint256,address,uint256)"
  ): TypedContractMethod<
    [fromTokenId_: BigNumberish, to_: AddressLike, value_: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from_: AddressLike, to_: AddressLike, tokenId_: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferFrom(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      fromTokenId_: BigNumberish,
      toTokenId_: BigNumberish,
      value_: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "valueDecimals"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalValue"
  ): TypedContractEvent<
    ApprovalValueEvent.InputTuple,
    ApprovalValueEvent.OutputTuple,
    ApprovalValueEvent.OutputObject
  >;
  getEvent(
    key: "BurnValue"
  ): TypedContractEvent<
    BurnValueEvent.InputTuple,
    BurnValueEvent.OutputTuple,
    BurnValueEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "CreateSlot"
  ): TypedContractEvent<
    CreateSlotEvent.InputTuple,
    CreateSlotEvent.OutputTuple,
    CreateSlotEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MintValue"
  ): TypedContractEvent<
    MintValueEvent.InputTuple,
    MintValueEvent.OutputTuple,
    MintValueEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewConcrete"
  ): TypedContractEvent<
    NewConcreteEvent.InputTuple,
    NewConcreteEvent.OutputTuple,
    NewConcreteEvent.OutputObject
  >;
  getEvent(
    key: "NewOwner"
  ): TypedContractEvent<
    NewOwnerEvent.InputTuple,
    NewOwnerEvent.OutputTuple,
    NewOwnerEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "Repay"
  ): TypedContractEvent<
    RepayEvent.InputTuple,
    RepayEvent.OutputTuple,
    RepayEvent.OutputObject
  >;
  getEvent(
    key: "SetCurrency"
  ): TypedContractEvent<
    SetCurrencyEvent.InputTuple,
    SetCurrencyEvent.OutputTuple,
    SetCurrencyEvent.OutputObject
  >;
  getEvent(
    key: "SetInterestRate"
  ): TypedContractEvent<
    SetInterestRateEvent.InputTuple,
    SetInterestRateEvent.OutputTuple,
    SetInterestRateEvent.OutputObject
  >;
  getEvent(
    key: "SetMetadataDescriptor"
  ): TypedContractEvent<
    SetMetadataDescriptorEvent.InputTuple,
    SetMetadataDescriptorEvent.OutputTuple,
    SetMetadataDescriptorEvent.OutputObject
  >;
  getEvent(
    key: "SlotChanged"
  ): TypedContractEvent<
    SlotChangedEvent.InputTuple,
    SlotChangedEvent.OutputTuple,
    SlotChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TransferValue"
  ): TypedContractEvent<
    TransferValueEvent.InputTuple,
    TransferValueEvent.OutputTuple,
    TransferValueEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ApprovalValue(uint256,address,uint256)": TypedContractEvent<
      ApprovalValueEvent.InputTuple,
      ApprovalValueEvent.OutputTuple,
      ApprovalValueEvent.OutputObject
    >;
    ApprovalValue: TypedContractEvent<
      ApprovalValueEvent.InputTuple,
      ApprovalValueEvent.OutputTuple,
      ApprovalValueEvent.OutputObject
    >;

    "BurnValue(uint256,uint256)": TypedContractEvent<
      BurnValueEvent.InputTuple,
      BurnValueEvent.OutputTuple,
      BurnValueEvent.OutputObject
    >;
    BurnValue: TypedContractEvent<
      BurnValueEvent.InputTuple,
      BurnValueEvent.OutputTuple,
      BurnValueEvent.OutputObject
    >;

    "Claim(address,uint256,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "CreateSlot(uint256,address,bytes)": TypedContractEvent<
      CreateSlotEvent.InputTuple,
      CreateSlotEvent.OutputTuple,
      CreateSlotEvent.OutputObject
    >;
    CreateSlot: TypedContractEvent<
      CreateSlotEvent.InputTuple,
      CreateSlotEvent.OutputTuple,
      CreateSlotEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MintValue(uint256,uint256,uint256)": TypedContractEvent<
      MintValueEvent.InputTuple,
      MintValueEvent.OutputTuple,
      MintValueEvent.OutputObject
    >;
    MintValue: TypedContractEvent<
      MintValueEvent.InputTuple,
      MintValueEvent.OutputTuple,
      MintValueEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewConcrete(address,address)": TypedContractEvent<
      NewConcreteEvent.InputTuple,
      NewConcreteEvent.OutputTuple,
      NewConcreteEvent.OutputObject
    >;
    NewConcrete: TypedContractEvent<
      NewConcreteEvent.InputTuple,
      NewConcreteEvent.OutputTuple,
      NewConcreteEvent.OutputObject
    >;

    "NewOwner(address,address)": TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;
    NewOwner: TypedContractEvent<
      NewOwnerEvent.InputTuple,
      NewOwnerEvent.OutputTuple,
      NewOwnerEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "Repay(uint256,address,uint256)": TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;
    Repay: TypedContractEvent<
      RepayEvent.InputTuple,
      RepayEvent.OutputTuple,
      RepayEvent.OutputObject
    >;

    "SetCurrency(address,bool)": TypedContractEvent<
      SetCurrencyEvent.InputTuple,
      SetCurrencyEvent.OutputTuple,
      SetCurrencyEvent.OutputObject
    >;
    SetCurrency: TypedContractEvent<
      SetCurrencyEvent.InputTuple,
      SetCurrencyEvent.OutputTuple,
      SetCurrencyEvent.OutputObject
    >;

    "SetInterestRate(uint256,int32)": TypedContractEvent<
      SetInterestRateEvent.InputTuple,
      SetInterestRateEvent.OutputTuple,
      SetInterestRateEvent.OutputObject
    >;
    SetInterestRate: TypedContractEvent<
      SetInterestRateEvent.InputTuple,
      SetInterestRateEvent.OutputTuple,
      SetInterestRateEvent.OutputObject
    >;

    "SetMetadataDescriptor(address)": TypedContractEvent<
      SetMetadataDescriptorEvent.InputTuple,
      SetMetadataDescriptorEvent.OutputTuple,
      SetMetadataDescriptorEvent.OutputObject
    >;
    SetMetadataDescriptor: TypedContractEvent<
      SetMetadataDescriptorEvent.InputTuple,
      SetMetadataDescriptorEvent.OutputTuple,
      SetMetadataDescriptorEvent.OutputObject
    >;

    "SlotChanged(uint256,uint256,uint256)": TypedContractEvent<
      SlotChangedEvent.InputTuple,
      SlotChangedEvent.OutputTuple,
      SlotChangedEvent.OutputObject
    >;
    SlotChanged: TypedContractEvent<
      SlotChangedEvent.InputTuple,
      SlotChangedEvent.OutputTuple,
      SlotChangedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TransferValue(uint256,uint256,uint256)": TypedContractEvent<
      TransferValueEvent.InputTuple,
      TransferValueEvent.OutputTuple,
      TransferValueEvent.OutputObject
    >;
    TransferValue: TypedContractEvent<
      TransferValueEvent.InputTuple,
      TransferValueEvent.OutputTuple,
      TransferValueEvent.OutputObject
    >;
  };
}
