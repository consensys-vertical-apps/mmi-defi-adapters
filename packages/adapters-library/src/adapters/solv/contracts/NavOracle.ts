/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface NavOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAdmin"
      | "admin"
      | "getAddress"
      | "getAllTimeHighRedeemNav"
      | "getRequiredAddress"
      | "getSubscribeNav"
      | "initialize"
      | "isResolverCached"
      | "pendingAdmin"
      | "poolNavInfos"
      | "rebuildCache"
      | "resolver"
      | "setPendingAdmin"
      | "setSubscribeNavOnlyMarket"
      | "updateAllTimeHighRedeemNavOnlyMarket"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "NewAdmin"
      | "NewPendingAdmin"
      | "SetSubscribeNav"
      | "UpdateAllTimeHighRedeemNav"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTimeHighRedeemNav",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscribeNav",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isResolverCached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolNavInfos",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebuildCache",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "resolver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscribeNavOnlyMarket",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllTimeHighRedeemNavOnlyMarket",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllTimeHighRedeemNav",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscribeNav",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isResolverCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolNavInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebuildCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscribeNavOnlyMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllTimeHighRedeemNavOnlyMarket",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSubscribeNavEvent {
  export type InputTuple = [
    poolId: BytesLike,
    time: BigNumberish,
    nav: BigNumberish
  ];
  export type OutputTuple = [poolId: string, time: bigint, nav: bigint];
  export interface OutputObject {
    poolId: string;
    time: bigint;
    nav: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateAllTimeHighRedeemNavEvent {
  export type InputTuple = [
    poolId: BytesLike,
    oldNav: BigNumberish,
    newNav: BigNumberish
  ];
  export type OutputTuple = [poolId: string, oldNav: bigint, newNav: bigint];
  export interface OutputObject {
    poolId: string;
    oldNav: bigint;
    newNav: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NavOracle extends BaseContract {
  connect(runner?: ContractRunner | null): NavOracle;
  waitForDeployment(): Promise<this>;

  interface: NavOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  getAddress: TypedContractMethod<[name_: BytesLike], [string], "view">;

  getAllTimeHighRedeemNav: TypedContractMethod<
    [poolId_: BytesLike],
    [bigint],
    "view"
  >;

  getRequiredAddress: TypedContractMethod<
    [name_: BytesLike, reason_: string],
    [string],
    "view"
  >;

  getSubscribeNav: TypedContractMethod<
    [poolId_: BytesLike, time_: BigNumberish],
    [[bigint, bigint] & { nav_: bigint; navTime_: bigint }],
    "view"
  >;

  initialize: TypedContractMethod<
    [resolver_: AddressLike],
    [void],
    "nonpayable"
  >;

  isResolverCached: TypedContractMethod<[], [boolean], "view">;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  poolNavInfos: TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint] & {
        latestSetNavTime: bigint;
        allTimeHighRedeemNav: bigint;
      }
    ],
    "view"
  >;

  rebuildCache: TypedContractMethod<[], [void], "nonpayable">;

  resolver: TypedContractMethod<[], [string], "view">;

  setPendingAdmin: TypedContractMethod<
    [newPendingAdmin_: AddressLike],
    [void],
    "nonpayable"
  >;

  setSubscribeNavOnlyMarket: TypedContractMethod<
    [poolId_: BytesLike, time_: BigNumberish, nav_: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateAllTimeHighRedeemNavOnlyMarket: TypedContractMethod<
    [poolId_: BytesLike, nav_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[name_: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAllTimeHighRedeemNav"
  ): TypedContractMethod<[poolId_: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRequiredAddress"
  ): TypedContractMethod<[name_: BytesLike, reason_: string], [string], "view">;
  getFunction(
    nameOrSignature: "getSubscribeNav"
  ): TypedContractMethod<
    [poolId_: BytesLike, time_: BigNumberish],
    [[bigint, bigint] & { nav_: bigint; navTime_: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[resolver_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isResolverCached"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolNavInfos"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [bigint, bigint] & {
        latestSetNavTime: bigint;
        allTimeHighRedeemNav: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rebuildCache"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resolver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSubscribeNavOnlyMarket"
  ): TypedContractMethod<
    [poolId_: BytesLike, time_: BigNumberish, nav_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateAllTimeHighRedeemNavOnlyMarket"
  ): TypedContractMethod<
    [poolId_: BytesLike, nav_: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "SetSubscribeNav"
  ): TypedContractEvent<
    SetSubscribeNavEvent.InputTuple,
    SetSubscribeNavEvent.OutputTuple,
    SetSubscribeNavEvent.OutputObject
  >;
  getEvent(
    key: "UpdateAllTimeHighRedeemNav"
  ): TypedContractEvent<
    UpdateAllTimeHighRedeemNavEvent.InputTuple,
    UpdateAllTimeHighRedeemNavEvent.OutputTuple,
    UpdateAllTimeHighRedeemNavEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "SetSubscribeNav(bytes32,uint256,uint256)": TypedContractEvent<
      SetSubscribeNavEvent.InputTuple,
      SetSubscribeNavEvent.OutputTuple,
      SetSubscribeNavEvent.OutputObject
    >;
    SetSubscribeNav: TypedContractEvent<
      SetSubscribeNavEvent.InputTuple,
      SetSubscribeNavEvent.OutputTuple,
      SetSubscribeNavEvent.OutputObject
    >;

    "UpdateAllTimeHighRedeemNav(bytes32,uint256,uint256)": TypedContractEvent<
      UpdateAllTimeHighRedeemNavEvent.InputTuple,
      UpdateAllTimeHighRedeemNavEvent.OutputTuple,
      UpdateAllTimeHighRedeemNavEvent.OutputObject
    >;
    UpdateAllTimeHighRedeemNav: TypedContractEvent<
      UpdateAllTimeHighRedeemNavEvent.InputTuple,
      UpdateAllTimeHighRedeemNavEvent.OutputTuple,
      UpdateAllTimeHighRedeemNavEvent.OutputObject
    >;
  };
}
