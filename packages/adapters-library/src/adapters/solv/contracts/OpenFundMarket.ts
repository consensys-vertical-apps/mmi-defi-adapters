/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IOpenFundMarketStorage {
  export type PoolSFTInfoStruct = {
    openFundShare: AddressLike;
    openFundRedemption: AddressLike;
    openFundShareSlot: BigNumberish;
    latestRedeemSlot: BigNumberish;
  };

  export type PoolSFTInfoStructOutput = [
    openFundShare: string,
    openFundRedemption: string,
    openFundShareSlot: bigint,
    latestRedeemSlot: bigint
  ] & {
    openFundShare: string;
    openFundRedemption: string;
    openFundShareSlot: bigint;
    latestRedeemSlot: bigint;
  };

  export type PoolFeeInfoStruct = {
    carryRate: BigNumberish;
    carryCollector: AddressLike;
    latestProtocolFeeSettleTime: BigNumberish;
  };

  export type PoolFeeInfoStructOutput = [
    carryRate: bigint,
    carryCollector: string,
    latestProtocolFeeSettleTime: bigint
  ] & {
    carryRate: bigint;
    carryCollector: string;
    latestProtocolFeeSettleTime: bigint;
  };

  export type ManagerInfoStruct = {
    poolManager: AddressLike;
    subscribeNavManager: AddressLike;
    redeemNavManager: AddressLike;
  };

  export type ManagerInfoStructOutput = [
    poolManager: string,
    subscribeNavManager: string,
    redeemNavManager: string
  ] & {
    poolManager: string;
    subscribeNavManager: string;
    redeemNavManager: string;
  };

  export type SubscribeLimitInfoStruct = {
    hardCap: BigNumberish;
    subscribeMin: BigNumberish;
    subscribeMax: BigNumberish;
    fundraisingStartTime: BigNumberish;
    fundraisingEndTime: BigNumberish;
  };

  export type SubscribeLimitInfoStructOutput = [
    hardCap: bigint,
    subscribeMin: bigint,
    subscribeMax: bigint,
    fundraisingStartTime: bigint,
    fundraisingEndTime: bigint
  ] & {
    hardCap: bigint;
    subscribeMin: bigint;
    subscribeMax: bigint;
    fundraisingStartTime: bigint;
    fundraisingEndTime: bigint;
  };

  export type PoolInfoStruct = {
    poolSFTInfo: IOpenFundMarketStorage.PoolSFTInfoStruct;
    poolFeeInfo: IOpenFundMarketStorage.PoolFeeInfoStruct;
    managerInfo: IOpenFundMarketStorage.ManagerInfoStruct;
    subscribeLimitInfo: IOpenFundMarketStorage.SubscribeLimitInfoStruct;
    vault: AddressLike;
    currency: AddressLike;
    navOracle: AddressLike;
    valueDate: BigNumberish;
    permissionless: boolean;
    fundraisingAmount: BigNumberish;
  };

  export type PoolInfoStructOutput = [
    poolSFTInfo: IOpenFundMarketStorage.PoolSFTInfoStructOutput,
    poolFeeInfo: IOpenFundMarketStorage.PoolFeeInfoStructOutput,
    managerInfo: IOpenFundMarketStorage.ManagerInfoStructOutput,
    subscribeLimitInfo: IOpenFundMarketStorage.SubscribeLimitInfoStructOutput,
    vault: string,
    currency: string,
    navOracle: string,
    valueDate: bigint,
    permissionless: boolean,
    fundraisingAmount: bigint
  ] & {
    poolSFTInfo: IOpenFundMarketStorage.PoolSFTInfoStructOutput;
    poolFeeInfo: IOpenFundMarketStorage.PoolFeeInfoStructOutput;
    managerInfo: IOpenFundMarketStorage.ManagerInfoStructOutput;
    subscribeLimitInfo: IOpenFundMarketStorage.SubscribeLimitInfoStructOutput;
    vault: string;
    currency: string;
    navOracle: string;
    valueDate: bigint;
    permissionless: boolean;
    fundraisingAmount: bigint;
  };
}

export declare namespace IOpenFundMarket {
  export type InputPoolInfoStruct = {
    openFundShare: AddressLike;
    openFundRedemption: AddressLike;
    currency: AddressLike;
    carryRate: BigNumberish;
    vault: AddressLike;
    valueDate: BigNumberish;
    carryCollector: AddressLike;
    subscribeNavManager: AddressLike;
    redeemNavManager: AddressLike;
    navOracle: AddressLike;
    createTime: BigNumberish;
    whiteList: AddressLike[];
    subscribeLimitInfo: IOpenFundMarketStorage.SubscribeLimitInfoStruct;
  };

  export type InputPoolInfoStructOutput = [
    openFundShare: string,
    openFundRedemption: string,
    currency: string,
    carryRate: bigint,
    vault: string,
    valueDate: bigint,
    carryCollector: string,
    subscribeNavManager: string,
    redeemNavManager: string,
    navOracle: string,
    createTime: bigint,
    whiteList: string[],
    subscribeLimitInfo: IOpenFundMarketStorage.SubscribeLimitInfoStructOutput
  ] & {
    openFundShare: string;
    openFundRedemption: string;
    currency: string;
    carryRate: bigint;
    vault: string;
    valueDate: bigint;
    carryCollector: string;
    subscribeNavManager: string;
    redeemNavManager: string;
    navOracle: string;
    createTime: bigint;
    whiteList: string[];
    subscribeLimitInfo: IOpenFundMarketStorage.SubscribeLimitInfoStructOutput;
  };
}

export interface OpenFundMarketInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAdmin"
      | "addSFTOnlyGovernor"
      | "admin"
      | "closeCurrentRedeemSlot"
      | "createPool"
      | "currencies"
      | "getAddress"
      | "getRequiredAddress"
      | "governor"
      | "initialize"
      | "isResolverCached"
      | "pendingAdmin"
      | "poolInfos"
      | "poolRedeemSlotCloseTime"
      | "previousRedeemSlot"
      | "protocolFeeCollector"
      | "protocolFeeRate"
      | "purchasedRecords"
      | "rebuildCache"
      | "removePool"
      | "removeSFTOnlyGovernor"
      | "requestRedeem"
      | "resolver"
      | "revokeRedeem"
      | "setCurrencyOnlyGovernor"
      | "setGovernorOnlyAdmin"
      | "setPendingAdmin"
      | "setProtocolFeeOnlyGovernor"
      | "setRedeemNav"
      | "setSubscribeNav"
      | "setWhitelist"
      | "settleProtocolFee"
      | "sftInfos"
      | "subscribe"
      | "updateFundraisingEndTime"
      | "updatePoolInfoOnlyGovernor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddSFT"
      | "CloseRedeemSlot"
      | "CreatePool"
      | "Initialized"
      | "NewAdmin"
      | "NewGovernor"
      | "NewPendingAdmin"
      | "RemovePool"
      | "RemoveSFT"
      | "RequestRedeem"
      | "RevokeRedeem"
      | "SetCurrency"
      | "SetProtocolFeeCollector"
      | "SetProtocolFeeRate"
      | "SetRedeemNav"
      | "SetSubscribeNav"
      | "SettleCarry"
      | "SettleProtocolFee"
      | "Subscribe"
      | "UpdateFundraisingEndTime"
      | "UpdatePoolInfo"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSFTOnlyGovernor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closeCurrentRedeemSlot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [IOpenFundMarket.InputPoolInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "currencies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isResolverCached",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfos",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolRedeemSlotCloseTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previousRedeemSlot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "purchasedRecords",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rebuildCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePool",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSFTOnlyGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRedeem",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "resolver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revokeRedeem",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrencyOnlyGovernor",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernorOnlyAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeOnlyGovernor",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemNav",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubscribeNav",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "settleProtocolFee",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sftInfos",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundraisingEndTime",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePoolInfoOnlyGovernor",
    values: [
      BytesLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSFTOnlyGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeCurrentRedeemSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currencies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isResolverCached",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolRedeemSlotCloseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previousRedeemSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebuildCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSFTOnlyGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resolver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrencyOnlyGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernorOnlyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeOnlyGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemNav",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubscribeNav",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sftInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFundraisingEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePoolInfoOnlyGovernor",
    data: BytesLike
  ): Result;
}

export namespace AddSFTEvent {
  export type InputTuple = [sft: AddressLike, manager: AddressLike];
  export type OutputTuple = [sft: string, manager: string];
  export interface OutputObject {
    sft: string;
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CloseRedeemSlotEvent {
  export type InputTuple = [
    poolId: BytesLike,
    previousRedeemSlot: BigNumberish,
    newRedeemSlot: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    previousRedeemSlot: bigint,
    newRedeemSlot: bigint
  ];
  export interface OutputObject {
    poolId: string;
    previousRedeemSlot: bigint;
    newRedeemSlot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreatePoolEvent {
  export type InputTuple = [
    poolId: BytesLike,
    currency: AddressLike,
    sft: AddressLike,
    poolInfo_: IOpenFundMarketStorage.PoolInfoStruct
  ];
  export type OutputTuple = [
    poolId: string,
    currency: string,
    sft: string,
    poolInfo_: IOpenFundMarketStorage.PoolInfoStructOutput
  ];
  export interface OutputObject {
    poolId: string;
    currency: string;
    sft: string;
    poolInfo_: IOpenFundMarketStorage.PoolInfoStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewGovernorEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovePoolEvent {
  export type InputTuple = [poolId: BytesLike];
  export type OutputTuple = [poolId: string];
  export interface OutputObject {
    poolId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveSFTEvent {
  export type InputTuple = [sft: AddressLike];
  export type OutputTuple = [sft: string];
  export interface OutputObject {
    sft: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestRedeemEvent {
  export type InputTuple = [
    poolId: BytesLike,
    owner: AddressLike,
    openFundShareId: BigNumberish,
    openFundRedemptionId: BigNumberish,
    redeemValue: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    owner: string,
    openFundShareId: bigint,
    openFundRedemptionId: bigint,
    redeemValue: bigint
  ];
  export interface OutputObject {
    poolId: string;
    owner: string;
    openFundShareId: bigint;
    openFundRedemptionId: bigint;
    redeemValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeRedeemEvent {
  export type InputTuple = [
    poolId: BytesLike,
    owner: AddressLike,
    openFundRedemptionId: BigNumberish,
    openFundShareId: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    owner: string,
    openFundRedemptionId: bigint,
    openFundShareId: bigint
  ];
  export interface OutputObject {
    poolId: string;
    owner: string;
    openFundRedemptionId: bigint;
    openFundShareId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetCurrencyEvent {
  export type InputTuple = [currency: AddressLike, enabled: boolean];
  export type OutputTuple = [currency: string, enabled: boolean];
  export interface OutputObject {
    currency: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolFeeCollectorEvent {
  export type InputTuple = [
    oldFeeCollector: AddressLike,
    newFeeCollector: AddressLike
  ];
  export type OutputTuple = [oldFeeCollector: string, newFeeCollector: string];
  export interface OutputObject {
    oldFeeCollector: string;
    newFeeCollector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetProtocolFeeRateEvent {
  export type InputTuple = [oldFeeRate: BigNumberish, newFeeRate: BigNumberish];
  export type OutputTuple = [oldFeeRate: bigint, newFeeRate: bigint];
  export interface OutputObject {
    oldFeeRate: bigint;
    newFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRedeemNavEvent {
  export type InputTuple = [
    poolId: BytesLike,
    redeemSlot: BigNumberish,
    nav: BigNumberish
  ];
  export type OutputTuple = [poolId: string, redeemSlot: bigint, nav: bigint];
  export interface OutputObject {
    poolId: string;
    redeemSlot: bigint;
    nav: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSubscribeNavEvent {
  export type InputTuple = [
    poolId: BytesLike,
    time: BigNumberish,
    nav: BigNumberish
  ];
  export type OutputTuple = [poolId: string, time: bigint, nav: bigint];
  export interface OutputObject {
    poolId: string;
    time: bigint;
    nav: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleCarryEvent {
  export type InputTuple = [
    poolId: BytesLike,
    redeemSlot: BigNumberish,
    currency: AddressLike,
    currencyBalance: BigNumberish,
    carryAmount: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    redeemSlot: bigint,
    currency: string,
    currencyBalance: bigint,
    carryAmount: bigint
  ];
  export interface OutputObject {
    poolId: string;
    redeemSlot: bigint;
    currency: string;
    currencyBalance: bigint;
    carryAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleProtocolFeeEvent {
  export type InputTuple = [
    poolId: BytesLike,
    currency: AddressLike,
    protocolFeeAmount: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    currency: string,
    protocolFeeAmount: bigint
  ];
  export interface OutputObject {
    poolId: string;
    currency: string;
    protocolFeeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubscribeEvent {
  export type InputTuple = [
    poolId: BytesLike,
    buyer: AddressLike,
    tokenId: BigNumberish,
    value: BigNumberish,
    currency: AddressLike,
    nav: BigNumberish,
    payment: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    buyer: string,
    tokenId: bigint,
    value: bigint,
    currency: string,
    nav: bigint,
    payment: bigint
  ];
  export interface OutputObject {
    poolId: string;
    buyer: string;
    tokenId: bigint;
    value: bigint;
    currency: string;
    nav: bigint;
    payment: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateFundraisingEndTimeEvent {
  export type InputTuple = [
    poolId: BytesLike,
    oldEndTime: BigNumberish,
    newEndTime: BigNumberish
  ];
  export type OutputTuple = [
    poolId: string,
    oldEndTime: bigint,
    newEndTime: bigint
  ];
  export interface OutputObject {
    poolId: string;
    oldEndTime: bigint;
    newEndTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatePoolInfoEvent {
  export type InputTuple = [
    poolId: BytesLike,
    newCarryRate: BigNumberish,
    newCarryCollector: AddressLike,
    newSubscribeMin: BigNumberish,
    newSubscribeMax: BigNumberish,
    newSubscribeNavManager: AddressLike,
    newRedeemNavManager: AddressLike
  ];
  export type OutputTuple = [
    poolId: string,
    newCarryRate: bigint,
    newCarryCollector: string,
    newSubscribeMin: bigint,
    newSubscribeMax: bigint,
    newSubscribeNavManager: string,
    newRedeemNavManager: string
  ];
  export interface OutputObject {
    poolId: string;
    newCarryRate: bigint;
    newCarryCollector: string;
    newSubscribeMin: bigint;
    newSubscribeMax: bigint;
    newSubscribeNavManager: string;
    newRedeemNavManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OpenFundMarket extends BaseContract {
  connect(runner?: ContractRunner | null): OpenFundMarket;
  waitForDeployment(): Promise<this>;

  interface: OpenFundMarketInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  addSFTOnlyGovernor: TypedContractMethod<
    [sft_: AddressLike, manager_: AddressLike],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  closeCurrentRedeemSlot: TypedContractMethod<
    [poolId_: BytesLike],
    [void],
    "nonpayable"
  >;

  createPool: TypedContractMethod<
    [inputPoolInfo_: IOpenFundMarket.InputPoolInfoStruct],
    [string],
    "nonpayable"
  >;

  currencies: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getAddress: TypedContractMethod<[name_: BytesLike], [string], "view">;

  getRequiredAddress: TypedContractMethod<
    [name_: BytesLike, reason_: string],
    [string],
    "view"
  >;

  governor: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [resolver_: AddressLike, governor_: AddressLike],
    [void],
    "nonpayable"
  >;

  isResolverCached: TypedContractMethod<[], [boolean], "view">;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  poolInfos: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        IOpenFundMarketStorage.PoolSFTInfoStructOutput,
        IOpenFundMarketStorage.PoolFeeInfoStructOutput,
        IOpenFundMarketStorage.ManagerInfoStructOutput,
        IOpenFundMarketStorage.SubscribeLimitInfoStructOutput,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint
      ] & {
        poolSFTInfo: IOpenFundMarketStorage.PoolSFTInfoStructOutput;
        poolFeeInfo: IOpenFundMarketStorage.PoolFeeInfoStructOutput;
        managerInfo: IOpenFundMarketStorage.ManagerInfoStructOutput;
        subscribeLimitInfo: IOpenFundMarketStorage.SubscribeLimitInfoStructOutput;
        vault: string;
        currency: string;
        navOracle: string;
        valueDate: bigint;
        permissionless: boolean;
        fundraisingAmount: bigint;
      }
    ],
    "view"
  >;

  poolRedeemSlotCloseTime: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  previousRedeemSlot: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  protocolFeeCollector: TypedContractMethod<[], [string], "view">;

  protocolFeeRate: TypedContractMethod<[], [bigint], "view">;

  purchasedRecords: TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  rebuildCache: TypedContractMethod<[], [void], "nonpayable">;

  removePool: TypedContractMethod<[poolId_: BytesLike], [void], "nonpayable">;

  removeSFTOnlyGovernor: TypedContractMethod<
    [sft_: AddressLike],
    [void],
    "nonpayable"
  >;

  requestRedeem: TypedContractMethod<
    [
      poolId_: BytesLike,
      openFundShareId_: BigNumberish,
      openFundRedemptionId_: BigNumberish,
      redeemValue_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  resolver: TypedContractMethod<[], [string], "view">;

  revokeRedeem: TypedContractMethod<
    [poolId_: BytesLike, openFundRedemptionId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCurrencyOnlyGovernor: TypedContractMethod<
    [currency_: AddressLike, enabled_: boolean],
    [void],
    "nonpayable"
  >;

  setGovernorOnlyAdmin: TypedContractMethod<
    [newGovernor_: AddressLike],
    [void],
    "nonpayable"
  >;

  setPendingAdmin: TypedContractMethod<
    [newPendingAdmin_: AddressLike],
    [void],
    "nonpayable"
  >;

  setProtocolFeeOnlyGovernor: TypedContractMethod<
    [newFeeRate_: BigNumberish, newFeeCollector_: AddressLike],
    [void],
    "nonpayable"
  >;

  setRedeemNav: TypedContractMethod<
    [
      poolId_: BytesLike,
      redeemSlot_: BigNumberish,
      nav_: BigNumberish,
      currencyBalance_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setSubscribeNav: TypedContractMethod<
    [poolId_: BytesLike, time_: BigNumberish, nav_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [poolId_: BytesLike, whitelist_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  settleProtocolFee: TypedContractMethod<
    [poolId_: BytesLike, feeToTokenId_: BigNumberish],
    [void],
    "nonpayable"
  >;

  sftInfos: TypedContractMethod<
    [arg0: AddressLike],
    [[string, boolean] & { manager: string; isValid: boolean }],
    "view"
  >;

  subscribe: TypedContractMethod<
    [
      poolId_: BytesLike,
      currencyAmount_: BigNumberish,
      openFundShareId_: BigNumberish,
      expireTime_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  updateFundraisingEndTime: TypedContractMethod<
    [poolId_: BytesLike, newEndTime_: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePoolInfoOnlyGovernor: TypedContractMethod<
    [
      poolId_: BytesLike,
      carryRate_: BigNumberish,
      carryCollector_: AddressLike,
      subscribeMin_: BigNumberish,
      subscribeMax_: BigNumberish,
      subscribeNavManager_: AddressLike,
      redeemNavManager_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addSFTOnlyGovernor"
  ): TypedContractMethod<
    [sft_: AddressLike, manager_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "closeCurrentRedeemSlot"
  ): TypedContractMethod<[poolId_: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [inputPoolInfo_: IOpenFundMarket.InputPoolInfoStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currencies"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[name_: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRequiredAddress"
  ): TypedContractMethod<[name_: BytesLike, reason_: string], [string], "view">;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [resolver_: AddressLike, governor_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isResolverCached"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolInfos"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        IOpenFundMarketStorage.PoolSFTInfoStructOutput,
        IOpenFundMarketStorage.PoolFeeInfoStructOutput,
        IOpenFundMarketStorage.ManagerInfoStructOutput,
        IOpenFundMarketStorage.SubscribeLimitInfoStructOutput,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint
      ] & {
        poolSFTInfo: IOpenFundMarketStorage.PoolSFTInfoStructOutput;
        poolFeeInfo: IOpenFundMarketStorage.PoolFeeInfoStructOutput;
        managerInfo: IOpenFundMarketStorage.ManagerInfoStructOutput;
        subscribeLimitInfo: IOpenFundMarketStorage.SubscribeLimitInfoStructOutput;
        vault: string;
        currency: string;
        navOracle: string;
        valueDate: bigint;
        permissionless: boolean;
        fundraisingAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolRedeemSlotCloseTime"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previousRedeemSlot"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolFeeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchasedRecords"
  ): TypedContractMethod<
    [arg0: BytesLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rebuildCache"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removePool"
  ): TypedContractMethod<[poolId_: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeSFTOnlyGovernor"
  ): TypedContractMethod<[sft_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRedeem"
  ): TypedContractMethod<
    [
      poolId_: BytesLike,
      openFundShareId_: BigNumberish,
      openFundRedemptionId_: BigNumberish,
      redeemValue_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeRedeem"
  ): TypedContractMethod<
    [poolId_: BytesLike, openFundRedemptionId_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCurrencyOnlyGovernor"
  ): TypedContractMethod<
    [currency_: AddressLike, enabled_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernorOnlyAdmin"
  ): TypedContractMethod<[newGovernor_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeeOnlyGovernor"
  ): TypedContractMethod<
    [newFeeRate_: BigNumberish, newFeeCollector_: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRedeemNav"
  ): TypedContractMethod<
    [
      poolId_: BytesLike,
      redeemSlot_: BigNumberish,
      nav_: BigNumberish,
      currencyBalance_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSubscribeNav"
  ): TypedContractMethod<
    [poolId_: BytesLike, time_: BigNumberish, nav_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [poolId_: BytesLike, whitelist_: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleProtocolFee"
  ): TypedContractMethod<
    [poolId_: BytesLike, feeToTokenId_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sftInfos"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, boolean] & { manager: string; isValid: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "subscribe"
  ): TypedContractMethod<
    [
      poolId_: BytesLike,
      currencyAmount_: BigNumberish,
      openFundShareId_: BigNumberish,
      expireTime_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateFundraisingEndTime"
  ): TypedContractMethod<
    [poolId_: BytesLike, newEndTime_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePoolInfoOnlyGovernor"
  ): TypedContractMethod<
    [
      poolId_: BytesLike,
      carryRate_: BigNumberish,
      carryCollector_: AddressLike,
      subscribeMin_: BigNumberish,
      subscribeMax_: BigNumberish,
      subscribeNavManager_: AddressLike,
      redeemNavManager_: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddSFT"
  ): TypedContractEvent<
    AddSFTEvent.InputTuple,
    AddSFTEvent.OutputTuple,
    AddSFTEvent.OutputObject
  >;
  getEvent(
    key: "CloseRedeemSlot"
  ): TypedContractEvent<
    CloseRedeemSlotEvent.InputTuple,
    CloseRedeemSlotEvent.OutputTuple,
    CloseRedeemSlotEvent.OutputObject
  >;
  getEvent(
    key: "CreatePool"
  ): TypedContractEvent<
    CreatePoolEvent.InputTuple,
    CreatePoolEvent.OutputTuple,
    CreatePoolEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewGovernor"
  ): TypedContractEvent<
    NewGovernorEvent.InputTuple,
    NewGovernorEvent.OutputTuple,
    NewGovernorEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "RemovePool"
  ): TypedContractEvent<
    RemovePoolEvent.InputTuple,
    RemovePoolEvent.OutputTuple,
    RemovePoolEvent.OutputObject
  >;
  getEvent(
    key: "RemoveSFT"
  ): TypedContractEvent<
    RemoveSFTEvent.InputTuple,
    RemoveSFTEvent.OutputTuple,
    RemoveSFTEvent.OutputObject
  >;
  getEvent(
    key: "RequestRedeem"
  ): TypedContractEvent<
    RequestRedeemEvent.InputTuple,
    RequestRedeemEvent.OutputTuple,
    RequestRedeemEvent.OutputObject
  >;
  getEvent(
    key: "RevokeRedeem"
  ): TypedContractEvent<
    RevokeRedeemEvent.InputTuple,
    RevokeRedeemEvent.OutputTuple,
    RevokeRedeemEvent.OutputObject
  >;
  getEvent(
    key: "SetCurrency"
  ): TypedContractEvent<
    SetCurrencyEvent.InputTuple,
    SetCurrencyEvent.OutputTuple,
    SetCurrencyEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolFeeCollector"
  ): TypedContractEvent<
    SetProtocolFeeCollectorEvent.InputTuple,
    SetProtocolFeeCollectorEvent.OutputTuple,
    SetProtocolFeeCollectorEvent.OutputObject
  >;
  getEvent(
    key: "SetProtocolFeeRate"
  ): TypedContractEvent<
    SetProtocolFeeRateEvent.InputTuple,
    SetProtocolFeeRateEvent.OutputTuple,
    SetProtocolFeeRateEvent.OutputObject
  >;
  getEvent(
    key: "SetRedeemNav"
  ): TypedContractEvent<
    SetRedeemNavEvent.InputTuple,
    SetRedeemNavEvent.OutputTuple,
    SetRedeemNavEvent.OutputObject
  >;
  getEvent(
    key: "SetSubscribeNav"
  ): TypedContractEvent<
    SetSubscribeNavEvent.InputTuple,
    SetSubscribeNavEvent.OutputTuple,
    SetSubscribeNavEvent.OutputObject
  >;
  getEvent(
    key: "SettleCarry"
  ): TypedContractEvent<
    SettleCarryEvent.InputTuple,
    SettleCarryEvent.OutputTuple,
    SettleCarryEvent.OutputObject
  >;
  getEvent(
    key: "SettleProtocolFee"
  ): TypedContractEvent<
    SettleProtocolFeeEvent.InputTuple,
    SettleProtocolFeeEvent.OutputTuple,
    SettleProtocolFeeEvent.OutputObject
  >;
  getEvent(
    key: "Subscribe"
  ): TypedContractEvent<
    SubscribeEvent.InputTuple,
    SubscribeEvent.OutputTuple,
    SubscribeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateFundraisingEndTime"
  ): TypedContractEvent<
    UpdateFundraisingEndTimeEvent.InputTuple,
    UpdateFundraisingEndTimeEvent.OutputTuple,
    UpdateFundraisingEndTimeEvent.OutputObject
  >;
  getEvent(
    key: "UpdatePoolInfo"
  ): TypedContractEvent<
    UpdatePoolInfoEvent.InputTuple,
    UpdatePoolInfoEvent.OutputTuple,
    UpdatePoolInfoEvent.OutputObject
  >;

  filters: {
    "AddSFT(address,address)": TypedContractEvent<
      AddSFTEvent.InputTuple,
      AddSFTEvent.OutputTuple,
      AddSFTEvent.OutputObject
    >;
    AddSFT: TypedContractEvent<
      AddSFTEvent.InputTuple,
      AddSFTEvent.OutputTuple,
      AddSFTEvent.OutputObject
    >;

    "CloseRedeemSlot(bytes32,uint256,uint256)": TypedContractEvent<
      CloseRedeemSlotEvent.InputTuple,
      CloseRedeemSlotEvent.OutputTuple,
      CloseRedeemSlotEvent.OutputObject
    >;
    CloseRedeemSlot: TypedContractEvent<
      CloseRedeemSlotEvent.InputTuple,
      CloseRedeemSlotEvent.OutputTuple,
      CloseRedeemSlotEvent.OutputObject
    >;

    "CreatePool(bytes32,address,address,tuple)": TypedContractEvent<
      CreatePoolEvent.InputTuple,
      CreatePoolEvent.OutputTuple,
      CreatePoolEvent.OutputObject
    >;
    CreatePool: TypedContractEvent<
      CreatePoolEvent.InputTuple,
      CreatePoolEvent.OutputTuple,
      CreatePoolEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewGovernor(address,address)": TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;
    NewGovernor: TypedContractEvent<
      NewGovernorEvent.InputTuple,
      NewGovernorEvent.OutputTuple,
      NewGovernorEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "RemovePool(bytes32)": TypedContractEvent<
      RemovePoolEvent.InputTuple,
      RemovePoolEvent.OutputTuple,
      RemovePoolEvent.OutputObject
    >;
    RemovePool: TypedContractEvent<
      RemovePoolEvent.InputTuple,
      RemovePoolEvent.OutputTuple,
      RemovePoolEvent.OutputObject
    >;

    "RemoveSFT(address)": TypedContractEvent<
      RemoveSFTEvent.InputTuple,
      RemoveSFTEvent.OutputTuple,
      RemoveSFTEvent.OutputObject
    >;
    RemoveSFT: TypedContractEvent<
      RemoveSFTEvent.InputTuple,
      RemoveSFTEvent.OutputTuple,
      RemoveSFTEvent.OutputObject
    >;

    "RequestRedeem(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      RequestRedeemEvent.InputTuple,
      RequestRedeemEvent.OutputTuple,
      RequestRedeemEvent.OutputObject
    >;
    RequestRedeem: TypedContractEvent<
      RequestRedeemEvent.InputTuple,
      RequestRedeemEvent.OutputTuple,
      RequestRedeemEvent.OutputObject
    >;

    "RevokeRedeem(bytes32,address,uint256,uint256)": TypedContractEvent<
      RevokeRedeemEvent.InputTuple,
      RevokeRedeemEvent.OutputTuple,
      RevokeRedeemEvent.OutputObject
    >;
    RevokeRedeem: TypedContractEvent<
      RevokeRedeemEvent.InputTuple,
      RevokeRedeemEvent.OutputTuple,
      RevokeRedeemEvent.OutputObject
    >;

    "SetCurrency(address,bool)": TypedContractEvent<
      SetCurrencyEvent.InputTuple,
      SetCurrencyEvent.OutputTuple,
      SetCurrencyEvent.OutputObject
    >;
    SetCurrency: TypedContractEvent<
      SetCurrencyEvent.InputTuple,
      SetCurrencyEvent.OutputTuple,
      SetCurrencyEvent.OutputObject
    >;

    "SetProtocolFeeCollector(address,address)": TypedContractEvent<
      SetProtocolFeeCollectorEvent.InputTuple,
      SetProtocolFeeCollectorEvent.OutputTuple,
      SetProtocolFeeCollectorEvent.OutputObject
    >;
    SetProtocolFeeCollector: TypedContractEvent<
      SetProtocolFeeCollectorEvent.InputTuple,
      SetProtocolFeeCollectorEvent.OutputTuple,
      SetProtocolFeeCollectorEvent.OutputObject
    >;

    "SetProtocolFeeRate(uint256,uint256)": TypedContractEvent<
      SetProtocolFeeRateEvent.InputTuple,
      SetProtocolFeeRateEvent.OutputTuple,
      SetProtocolFeeRateEvent.OutputObject
    >;
    SetProtocolFeeRate: TypedContractEvent<
      SetProtocolFeeRateEvent.InputTuple,
      SetProtocolFeeRateEvent.OutputTuple,
      SetProtocolFeeRateEvent.OutputObject
    >;

    "SetRedeemNav(bytes32,uint256,uint256)": TypedContractEvent<
      SetRedeemNavEvent.InputTuple,
      SetRedeemNavEvent.OutputTuple,
      SetRedeemNavEvent.OutputObject
    >;
    SetRedeemNav: TypedContractEvent<
      SetRedeemNavEvent.InputTuple,
      SetRedeemNavEvent.OutputTuple,
      SetRedeemNavEvent.OutputObject
    >;

    "SetSubscribeNav(bytes32,uint256,uint256)": TypedContractEvent<
      SetSubscribeNavEvent.InputTuple,
      SetSubscribeNavEvent.OutputTuple,
      SetSubscribeNavEvent.OutputObject
    >;
    SetSubscribeNav: TypedContractEvent<
      SetSubscribeNavEvent.InputTuple,
      SetSubscribeNavEvent.OutputTuple,
      SetSubscribeNavEvent.OutputObject
    >;

    "SettleCarry(bytes32,uint256,address,uint256,uint256)": TypedContractEvent<
      SettleCarryEvent.InputTuple,
      SettleCarryEvent.OutputTuple,
      SettleCarryEvent.OutputObject
    >;
    SettleCarry: TypedContractEvent<
      SettleCarryEvent.InputTuple,
      SettleCarryEvent.OutputTuple,
      SettleCarryEvent.OutputObject
    >;

    "SettleProtocolFee(bytes32,address,uint256)": TypedContractEvent<
      SettleProtocolFeeEvent.InputTuple,
      SettleProtocolFeeEvent.OutputTuple,
      SettleProtocolFeeEvent.OutputObject
    >;
    SettleProtocolFee: TypedContractEvent<
      SettleProtocolFeeEvent.InputTuple,
      SettleProtocolFeeEvent.OutputTuple,
      SettleProtocolFeeEvent.OutputObject
    >;

    "Subscribe(bytes32,address,uint256,uint256,address,uint256,uint256)": TypedContractEvent<
      SubscribeEvent.InputTuple,
      SubscribeEvent.OutputTuple,
      SubscribeEvent.OutputObject
    >;
    Subscribe: TypedContractEvent<
      SubscribeEvent.InputTuple,
      SubscribeEvent.OutputTuple,
      SubscribeEvent.OutputObject
    >;

    "UpdateFundraisingEndTime(bytes32,uint64,uint64)": TypedContractEvent<
      UpdateFundraisingEndTimeEvent.InputTuple,
      UpdateFundraisingEndTimeEvent.OutputTuple,
      UpdateFundraisingEndTimeEvent.OutputObject
    >;
    UpdateFundraisingEndTime: TypedContractEvent<
      UpdateFundraisingEndTimeEvent.InputTuple,
      UpdateFundraisingEndTimeEvent.OutputTuple,
      UpdateFundraisingEndTimeEvent.OutputObject
    >;

    "UpdatePoolInfo(bytes32,uint16,address,uint256,uint256,address,address)": TypedContractEvent<
      UpdatePoolInfoEvent.InputTuple,
      UpdatePoolInfoEvent.OutputTuple,
      UpdatePoolInfoEvent.OutputObject
    >;
    UpdatePoolInfo: TypedContractEvent<
      UpdatePoolInfoEvent.InputTuple,
      UpdatePoolInfoEvent.OutputTuple,
      UpdatePoolInfoEvent.OutputObject
    >;
  };
}
