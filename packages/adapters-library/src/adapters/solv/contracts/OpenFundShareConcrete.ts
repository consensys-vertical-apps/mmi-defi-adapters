/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IEarnConcrete {
  export type SlotBaseInfoStruct = {
    issuer: AddressLike;
    currency: AddressLike;
    valueDate: BigNumberish;
    maturity: BigNumberish;
    createTime: BigNumberish;
    transferable: boolean;
    isValid: boolean;
  };

  export type SlotBaseInfoStructOutput = [
    issuer: string,
    currency: string,
    valueDate: bigint,
    maturity: bigint,
    createTime: bigint,
    transferable: boolean,
    isValid: boolean
  ] & {
    issuer: string;
    currency: string;
    valueDate: bigint;
    maturity: bigint;
    createTime: bigint;
    transferable: boolean;
    isValid: boolean;
  };

  export type SlotExtInfoStruct = {
    supervisor: AddressLike;
    issueQuota: BigNumberish;
    interestType: BigNumberish;
    interestRate: BigNumberish;
    isInterestRateSet: boolean;
    externalURI: string;
  };

  export type SlotExtInfoStructOutput = [
    supervisor: string,
    issueQuota: bigint,
    interestType: bigint,
    interestRate: bigint,
    isInterestRateSet: boolean,
    externalURI: string
  ] & {
    supervisor: string;
    issueQuota: bigint;
    interestType: bigint;
    interestRate: bigint;
    isInterestRateSet: boolean;
    externalURI: string;
  };
}

export interface OpenFundShareConcreteInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptAdmin"
      | "admin"
      | "allocatedCurrencyBalance"
      | "burnOnlyDelegate"
      | "claimOnlyDelegate"
      | "claimableValue"
      | "createSlotOnlyDelegate"
      | "delegate"
      | "getSlot"
      | "initialize"
      | "isCurrencyAllowed"
      | "isSlotTransferable"
      | "isSlotValid"
      | "mintOnlyDelegate(uint256,uint256,uint256)"
      | "mintOnlyDelegate(address,address,address,uint256,uint256,uint256)"
      | "pendingAdmin"
      | "repaidCurrencyAmount"
      | "repayOnlyDelegate"
      | "repayWithBalanceOnlyDelegate"
      | "setCurrencyOnlyDelegate"
      | "setDelegate"
      | "setInterestRateOnlyDelegate"
      | "setPendingAdmin"
      | "slotBaseInfo"
      | "slotExtInfo"
      | "slotInitialValue"
      | "slotTotalValue"
      | "tokenInitialValue"
      | "transferOnlyDelegate"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "NewAdmin"
      | "NewDelegate"
      | "NewPendingAdmin"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocatedCurrencyBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnOnlyDelegate",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOnlyDelegate",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSlotOnlyDelegate",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "delegate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSlot",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCurrencyAllowed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSlotTransferable",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSlotValid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOnlyDelegate(uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintOnlyDelegate(address,address,address,uint256,uint256,uint256)",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repaidCurrencyAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayOnlyDelegate",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithBalanceOnlyDelegate",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrencyOnlyDelegate",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDelegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRateOnlyDelegate",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slotBaseInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotExtInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotInitialValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slotTotalValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInitialValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOnlyDelegate",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocatedCurrencyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnOnlyDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOnlyDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSlotOnlyDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSlot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCurrencyAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSlotTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSlotValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOnlyDelegate(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOnlyDelegate(address,address,address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repaidCurrencyAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayOnlyDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayWithBalanceOnlyDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrencyOnlyDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRateOnlyDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slotBaseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slotExtInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slotInitialValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slotTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenInitialValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOnlyDelegate",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewDelegateEvent {
  export type InputTuple = [old_: AddressLike, new_: AddressLike];
  export type OutputTuple = [old_: string, new_: string];
  export interface OutputObject {
    old_: string;
    new_: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OpenFundShareConcrete extends BaseContract {
  connect(runner?: ContractRunner | null): OpenFundShareConcrete;
  waitForDeployment(): Promise<this>;

  interface: OpenFundShareConcreteInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptAdmin: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  allocatedCurrencyBalance: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  burnOnlyDelegate: TypedContractMethod<
    [tokenId_: BigNumberish, burnValue_: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimOnlyDelegate: TypedContractMethod<
    [
      tokenId_: BigNumberish,
      slot_: BigNumberish,
      currency_: AddressLike,
      claimValue_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  claimableValue: TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint],
    "view"
  >;

  createSlotOnlyDelegate: TypedContractMethod<
    [txSender_: AddressLike, inputSlotInfo_: BytesLike],
    [bigint],
    "nonpayable"
  >;

  delegate: TypedContractMethod<[], [string], "view">;

  getSlot: TypedContractMethod<
    [
      issuer_: AddressLike,
      currency_: AddressLike,
      valueDate_: BigNumberish,
      maturity_: BigNumberish,
      createTime_: BigNumberish,
      transferable_: boolean
    ],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isCurrencyAllowed: TypedContractMethod<
    [currency_: AddressLike],
    [boolean],
    "view"
  >;

  isSlotTransferable: TypedContractMethod<
    [slot_: BigNumberish],
    [boolean],
    "view"
  >;

  isSlotValid: TypedContractMethod<[slot_: BigNumberish], [boolean], "view">;

  "mintOnlyDelegate(uint256,uint256,uint256)": TypedContractMethod<
    [tokenId_: BigNumberish, slot_: BigNumberish, mintValue_: BigNumberish],
    [void],
    "nonpayable"
  >;

  "mintOnlyDelegate(address,address,address,uint256,uint256,uint256)": TypedContractMethod<
    [
      txSender_: AddressLike,
      currency_: AddressLike,
      mintTo_: AddressLike,
      slot_: BigNumberish,
      tokenId_: BigNumberish,
      amount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  repaidCurrencyAmount: TypedContractMethod<
    [slot_: BigNumberish],
    [bigint],
    "view"
  >;

  repayOnlyDelegate: TypedContractMethod<
    [
      txSender_: AddressLike,
      slot_: BigNumberish,
      currency_: AddressLike,
      repayCurrencyAmount_: BigNumberish
    ],
    [void],
    "payable"
  >;

  repayWithBalanceOnlyDelegate: TypedContractMethod<
    [
      txSender_: AddressLike,
      slot_: BigNumberish,
      currency_: AddressLike,
      repayCurrencyAmount_: BigNumberish
    ],
    [void],
    "payable"
  >;

  setCurrencyOnlyDelegate: TypedContractMethod<
    [currency_: AddressLike, isAllowed_: boolean],
    [void],
    "nonpayable"
  >;

  setDelegate: TypedContractMethod<
    [newDelegate_: AddressLike],
    [void],
    "nonpayable"
  >;

  setInterestRateOnlyDelegate: TypedContractMethod<
    [txSender_: AddressLike, slot_: BigNumberish, interestRate_: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPendingAdmin: TypedContractMethod<
    [newPendingAdmin_: AddressLike],
    [void],
    "nonpayable"
  >;

  slotBaseInfo: TypedContractMethod<
    [slot_: BigNumberish],
    [IEarnConcrete.SlotBaseInfoStructOutput],
    "view"
  >;

  slotExtInfo: TypedContractMethod<
    [slot_: BigNumberish],
    [IEarnConcrete.SlotExtInfoStructOutput],
    "view"
  >;

  slotInitialValue: TypedContractMethod<
    [slot_: BigNumberish],
    [bigint],
    "view"
  >;

  slotTotalValue: TypedContractMethod<[slot_: BigNumberish], [bigint], "view">;

  tokenInitialValue: TypedContractMethod<
    [tokenId_: BigNumberish],
    [bigint],
    "view"
  >;

  transferOnlyDelegate: TypedContractMethod<
    [
      fromTokenId_: BigNumberish,
      toTokenId_: BigNumberish,
      fromTokenBalance_: BigNumberish,
      transferValue_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allocatedCurrencyBalance"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnOnlyDelegate"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, burnValue_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimOnlyDelegate"
  ): TypedContractMethod<
    [
      tokenId_: BigNumberish,
      slot_: BigNumberish,
      currency_: AddressLike,
      claimValue_: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimableValue"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "createSlotOnlyDelegate"
  ): TypedContractMethod<
    [txSender_: AddressLike, inputSlotInfo_: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSlot"
  ): TypedContractMethod<
    [
      issuer_: AddressLike,
      currency_: AddressLike,
      valueDate_: BigNumberish,
      maturity_: BigNumberish,
      createTime_: BigNumberish,
      transferable_: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isCurrencyAllowed"
  ): TypedContractMethod<[currency_: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSlotTransferable"
  ): TypedContractMethod<[slot_: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSlotValid"
  ): TypedContractMethod<[slot_: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintOnlyDelegate(uint256,uint256,uint256)"
  ): TypedContractMethod<
    [tokenId_: BigNumberish, slot_: BigNumberish, mintValue_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintOnlyDelegate(address,address,address,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      txSender_: AddressLike,
      currency_: AddressLike,
      mintTo_: AddressLike,
      slot_: BigNumberish,
      tokenId_: BigNumberish,
      amount_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repaidCurrencyAmount"
  ): TypedContractMethod<[slot_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "repayOnlyDelegate"
  ): TypedContractMethod<
    [
      txSender_: AddressLike,
      slot_: BigNumberish,
      currency_: AddressLike,
      repayCurrencyAmount_: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "repayWithBalanceOnlyDelegate"
  ): TypedContractMethod<
    [
      txSender_: AddressLike,
      slot_: BigNumberish,
      currency_: AddressLike,
      repayCurrencyAmount_: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setCurrencyOnlyDelegate"
  ): TypedContractMethod<
    [currency_: AddressLike, isAllowed_: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDelegate"
  ): TypedContractMethod<[newDelegate_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestRateOnlyDelegate"
  ): TypedContractMethod<
    [txSender_: AddressLike, slot_: BigNumberish, interestRate_: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPendingAdmin"
  ): TypedContractMethod<[newPendingAdmin_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slotBaseInfo"
  ): TypedContractMethod<
    [slot_: BigNumberish],
    [IEarnConcrete.SlotBaseInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "slotExtInfo"
  ): TypedContractMethod<
    [slot_: BigNumberish],
    [IEarnConcrete.SlotExtInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "slotInitialValue"
  ): TypedContractMethod<[slot_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "slotTotalValue"
  ): TypedContractMethod<[slot_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenInitialValue"
  ): TypedContractMethod<[tokenId_: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOnlyDelegate"
  ): TypedContractMethod<
    [
      fromTokenId_: BigNumberish,
      toTokenId_: BigNumberish,
      fromTokenBalance_: BigNumberish,
      transferValue_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewDelegate"
  ): TypedContractEvent<
    NewDelegateEvent.InputTuple,
    NewDelegateEvent.OutputTuple,
    NewDelegateEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewDelegate(address,address)": TypedContractEvent<
      NewDelegateEvent.InputTuple,
      NewDelegateEvent.OutputTuple,
      NewDelegateEvent.OutputObject
    >;
    NewDelegate: TypedContractEvent<
      NewDelegateEvent.InputTuple,
      NewDelegateEvent.OutputTuple,
      NewDelegateEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
  };
}
