/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OraclePyYtLpInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BLOCK_CYCLE_DENOMINATOR"
      | "blockCycleNumerator"
      | "claimOwnership"
      | "getLpToAssetRate"
      | "getLpToSyRate"
      | "getOracleState"
      | "getPtToAssetRate"
      | "getPtToSyRate"
      | "getYtToAssetRate"
      | "getYtToSyRate"
      | "initialize"
      | "owner"
      | "pendingOwner"
      | "setBlockCycleNumerator"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "SetBlockCycleNumerator"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BLOCK_CYCLE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockCycleNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToAssetRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpToSyRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleState",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPtToAssetRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPtToSyRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYtToAssetRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getYtToSyRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockCycleNumerator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike, boolean, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCK_CYCLE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockCycleNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPtToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPtToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYtToAssetRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getYtToSyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockCycleNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBlockCycleNumeratorEvent {
  export type InputTuple = [newBlockCycleNumerator: BigNumberish];
  export type OutputTuple = [newBlockCycleNumerator: bigint];
  export interface OutputObject {
    newBlockCycleNumerator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OraclePyYtLp extends BaseContract {
  connect(runner?: ContractRunner | null): OraclePyYtLp;
  waitForDeployment(): Promise<this>;

  interface: OraclePyYtLpInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BLOCK_CYCLE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  blockCycleNumerator: TypedContractMethod<[], [bigint], "view">;

  claimOwnership: TypedContractMethod<[], [void], "nonpayable">;

  getLpToAssetRate: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;

  getLpToSyRate: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;

  getOracleState: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [
      [boolean, bigint, boolean] & {
        increaseCardinalityRequired: boolean;
        cardinalityRequired: bigint;
        oldestObservationSatisfied: boolean;
      }
    ],
    "view"
  >;

  getPtToAssetRate: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;

  getPtToSyRate: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;

  getYtToAssetRate: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;

  getYtToSyRate: TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_blockCycleNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  setBlockCycleNumerator: TypedContractMethod<
    [newBlockCycleNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BLOCK_CYCLE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blockCycleNumerator"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getLpToAssetRate"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLpToSyRate"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOracleState"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [
      [boolean, bigint, boolean] & {
        increaseCardinalityRequired: boolean;
        cardinalityRequired: bigint;
        oldestObservationSatisfied: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPtToAssetRate"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPtToSyRate"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getYtToAssetRate"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getYtToSyRate"
  ): TypedContractMethod<
    [market: AddressLike, duration: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_blockCycleNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setBlockCycleNumerator"
  ): TypedContractMethod<
    [newBlockCycleNumerator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<
    [newOwner: AddressLike, direct: boolean, renounce: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetBlockCycleNumerator"
  ): TypedContractEvent<
    SetBlockCycleNumeratorEvent.InputTuple,
    SetBlockCycleNumeratorEvent.OutputTuple,
    SetBlockCycleNumeratorEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetBlockCycleNumerator(uint16)": TypedContractEvent<
      SetBlockCycleNumeratorEvent.InputTuple,
      SetBlockCycleNumeratorEvent.OutputTuple,
      SetBlockCycleNumeratorEvent.OutputObject
    >;
    SetBlockCycleNumerator: TypedContractEvent<
      SetBlockCycleNumeratorEvent.InputTuple,
      SetBlockCycleNumeratorEvent.OutputTuple,
      SetBlockCycleNumeratorEvent.OutputObject
    >;
  };
}
