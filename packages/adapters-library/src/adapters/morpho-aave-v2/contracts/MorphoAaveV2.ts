/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Types {
  export type MaxGasForMatchingStruct = {
    supply: BigNumberish;
    borrow: BigNumberish;
    withdraw: BigNumberish;
    repay: BigNumberish;
  };

  export type MaxGasForMatchingStructOutput = [
    supply: bigint,
    borrow: bigint,
    withdraw: bigint,
    repay: bigint
  ] & { supply: bigint; borrow: bigint; withdraw: bigint; repay: bigint };
}

export interface MorphoAaveV2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "BORROWING_MASK"
      | "DEFAULT_LIQUIDATION_CLOSE_FACTOR"
      | "HEALTH_FACTOR_LIQUIDATION_THRESHOLD"
      | "MAX_BASIS_POINTS"
      | "MAX_NB_OF_MARKETS"
      | "NO_REFERRAL_CODE"
      | "ONE"
      | "VARIABLE_INTEREST_MODE"
      | "aaveIncentivesController"
      | "addressesProvider"
      | "borrow(address,uint256)"
      | "borrow(address,uint256,uint256)"
      | "borrowBalanceInOf"
      | "borrowMask"
      | "claimRewards"
      | "claimToTreasury"
      | "createMarket"
      | "defaultMaxGasForMatching"
      | "deltas"
      | "entryPositionsManager"
      | "exitPositionsManager"
      | "getHead"
      | "getMarketsCreated"
      | "getNext"
      | "incentivesVault"
      | "initialize"
      | "interestRatesManager"
      | "isClaimRewardsPaused"
      | "liquidate"
      | "market"
      | "maxSortedUsers"
      | "owner"
      | "p2pBorrowIndex"
      | "p2pSupplyIndex"
      | "pool"
      | "poolIndexes"
      | "renounceOwnership"
      | "repay"
      | "rewardsManager"
      | "setAaveIncentivesController"
      | "setAssetAsCollateral"
      | "setClaimRewardsPauseStatus"
      | "setDefaultMaxGasForMatching"
      | "setEntryPositionsManager"
      | "setExitPositionsManager"
      | "setIncentivesVault"
      | "setInterestRatesManager"
      | "setMaxSortedUsers"
      | "setP2PDisabledStatus"
      | "setP2PIndexCursor"
      | "setPartialPauseStatus"
      | "setPauseStatus"
      | "setPauseStatusForAllMarkets"
      | "setReserveFactor"
      | "setRewardsManager"
      | "setTreasuryVault"
      | "supply(address,address,uint256)"
      | "supply(address,address,uint256,uint256)"
      | "supplyBalanceInOf"
      | "transferOwnership"
      | "treasuryVault"
      | "updateIndexes"
      | "userMarkets"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Borrowed"
      | "P2PAmountsUpdated"
      | "P2PBorrowDeltaUpdated"
      | "P2PSupplyDeltaUpdated"
      | "Supplied"
      | "BorrowerPositionUpdated"
      | "SupplierPositionUpdated"
      | "P2PIndexesUpdated"
      | "Liquidated"
      | "Withdrawn"
      | "Repaid"
      | "AaveIncentivesControllerSet"
      | "ClaimRewardsPauseStatusSet"
      | "DefaultMaxGasForMatchingSet"
      | "EntryPositionsManagerSet"
      | "ExitPositionsManagerSet"
      | "IncentivesVaultSet"
      | "InterestRatesSet"
      | "MarketCreated"
      | "MaxSortedUsersSet"
      | "OwnershipTransferred"
      | "P2PIndexCursorSet"
      | "P2PStatusSet"
      | "PartialPauseStatusSet"
      | "PauseStatusSet"
      | "ReserveFactorSet"
      | "ReserveFeeClaimed"
      | "RewardsClaimed"
      | "RewardsManagerSet"
      | "TreasuryVaultSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BORROWING_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_LIQUIDATION_CLOSE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_NB_OF_MARKETS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NO_REFERRAL_CODE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "VARIABLE_INTEREST_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aaveIncentivesController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowMask",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToTreasury",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxGasForMatching",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deltas", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "entryPositionsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitPositionsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHead",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNext",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivesVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      Types.MaxGasForMatchingStruct,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRatesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimRewardsPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "market", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "maxSortedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "p2pBorrowIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "p2pSupplyIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAaveIncentivesController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetAsCollateral",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimRewardsPauseStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMaxGasForMatching",
    values: [Types.MaxGasForMatchingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setEntryPositionsManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitPositionsManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentivesVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRatesManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSortedUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setP2PDisabledStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setP2PIndexCursor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPartialPauseStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseStatusForAllMarkets",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supply(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supply(address,address,uint256,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userMarkets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BORROWING_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_LIQUIDATION_CLOSE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_NB_OF_MARKETS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NO_REFERRAL_CODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VARIABLE_INTEREST_MODE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aaveIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowMask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxGasForMatching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deltas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entryPositionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitPositionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHead", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentivesVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRatesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimRewardsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxSortedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "p2pBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p2pSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAaveIncentivesController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimRewardsPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMaxGasForMatching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEntryPositionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExitPositionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentivesVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRatesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSortedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setP2PDisabledStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setP2PIndexCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPartialPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseStatusForAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supply(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supply(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace BorrowedEvent {
  export type InputTuple = [
    _borrower: AddressLike,
    _poolToken: AddressLike,
    _amount: BigNumberish,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _borrower: string,
    _poolToken: string,
    _amount: bigint,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _borrower: string;
    _poolToken: string;
    _amount: bigint;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PAmountsUpdatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _p2pSupplyAmount: BigNumberish,
    _p2pBorrowAmount: BigNumberish
  ];
  export type OutputTuple = [
    _poolToken: string,
    _p2pSupplyAmount: bigint,
    _p2pBorrowAmount: bigint
  ];
  export interface OutputObject {
    _poolToken: string;
    _p2pSupplyAmount: bigint;
    _p2pBorrowAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PBorrowDeltaUpdatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _p2pBorrowDelta: BigNumberish
  ];
  export type OutputTuple = [_poolToken: string, _p2pBorrowDelta: bigint];
  export interface OutputObject {
    _poolToken: string;
    _p2pBorrowDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PSupplyDeltaUpdatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _p2pSupplyDelta: BigNumberish
  ];
  export type OutputTuple = [_poolToken: string, _p2pSupplyDelta: bigint];
  export interface OutputObject {
    _poolToken: string;
    _p2pSupplyDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuppliedEvent {
  export type InputTuple = [
    _from: AddressLike,
    _onBehalf: AddressLike,
    _poolToken: AddressLike,
    _amount: BigNumberish,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _from: string,
    _onBehalf: string,
    _poolToken: string,
    _amount: bigint,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _from: string;
    _onBehalf: string;
    _poolToken: string;
    _amount: bigint;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowerPositionUpdatedEvent {
  export type InputTuple = [
    _user: AddressLike,
    _poolToken: AddressLike,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _poolToken: string,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _user: string;
    _poolToken: string;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplierPositionUpdatedEvent {
  export type InputTuple = [
    _user: AddressLike,
    _poolToken: AddressLike,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _poolToken: string,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _user: string;
    _poolToken: string;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PIndexesUpdatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _p2pSupplyIndex: BigNumberish,
    _p2pBorrowIndex: BigNumberish,
    _poolSupplyIndex: BigNumberish,
    _poolBorrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    _poolToken: string,
    _p2pSupplyIndex: bigint,
    _p2pBorrowIndex: bigint,
    _poolSupplyIndex: bigint,
    _poolBorrowIndex: bigint
  ];
  export interface OutputObject {
    _poolToken: string;
    _p2pSupplyIndex: bigint;
    _p2pBorrowIndex: bigint;
    _poolSupplyIndex: bigint;
    _poolBorrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [
    _liquidator: AddressLike,
    _liquidated: AddressLike,
    _poolTokenBorrowed: AddressLike,
    _amountRepaid: BigNumberish,
    _poolTokenCollateral: AddressLike,
    _amountSeized: BigNumberish
  ];
  export type OutputTuple = [
    _liquidator: string,
    _liquidated: string,
    _poolTokenBorrowed: string,
    _amountRepaid: bigint,
    _poolTokenCollateral: string,
    _amountSeized: bigint
  ];
  export interface OutputObject {
    _liquidator: string;
    _liquidated: string;
    _poolTokenBorrowed: string;
    _amountRepaid: bigint;
    _poolTokenCollateral: string;
    _amountSeized: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    _supplier: AddressLike,
    _receiver: AddressLike,
    _poolToken: AddressLike,
    _amount: BigNumberish,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _supplier: string,
    _receiver: string,
    _poolToken: string,
    _amount: bigint,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _supplier: string;
    _receiver: string;
    _poolToken: string;
    _amount: bigint;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [
    _repayer: AddressLike,
    _onBehalf: AddressLike,
    _poolToken: AddressLike,
    _amount: BigNumberish,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _repayer: string,
    _onBehalf: string,
    _poolToken: string,
    _amount: bigint,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _repayer: string;
    _onBehalf: string;
    _poolToken: string;
    _amount: bigint;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AaveIncentivesControllerSetEvent {
  export type InputTuple = [_aaveIncentivesController: AddressLike];
  export type OutputTuple = [_aaveIncentivesController: string];
  export interface OutputObject {
    _aaveIncentivesController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRewardsPauseStatusSetEvent {
  export type InputTuple = [_newStatus: boolean];
  export type OutputTuple = [_newStatus: boolean];
  export interface OutputObject {
    _newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultMaxGasForMatchingSetEvent {
  export type InputTuple = [
    _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct
  ];
  export type OutputTuple = [
    _defaultMaxGasForMatching: Types.MaxGasForMatchingStructOutput
  ];
  export interface OutputObject {
    _defaultMaxGasForMatching: Types.MaxGasForMatchingStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EntryPositionsManagerSetEvent {
  export type InputTuple = [_entryPositionsManager: AddressLike];
  export type OutputTuple = [_entryPositionsManager: string];
  export interface OutputObject {
    _entryPositionsManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitPositionsManagerSetEvent {
  export type InputTuple = [_exitPositionsManager: AddressLike];
  export type OutputTuple = [_exitPositionsManager: string];
  export interface OutputObject {
    _exitPositionsManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncentivesVaultSetEvent {
  export type InputTuple = [_newIncentivesVaultAddress: AddressLike];
  export type OutputTuple = [_newIncentivesVaultAddress: string];
  export interface OutputObject {
    _newIncentivesVaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestRatesSetEvent {
  export type InputTuple = [_interestRatesManager: AddressLike];
  export type OutputTuple = [_interestRatesManager: string];
  export interface OutputObject {
    _interestRatesManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _reserveFactor: BigNumberish,
    _p2pIndexCursor: BigNumberish
  ];
  export type OutputTuple = [
    _poolToken: string,
    _reserveFactor: bigint,
    _p2pIndexCursor: bigint
  ];
  export interface OutputObject {
    _poolToken: string;
    _reserveFactor: bigint;
    _p2pIndexCursor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxSortedUsersSetEvent {
  export type InputTuple = [_newValue: BigNumberish];
  export type OutputTuple = [_newValue: bigint];
  export interface OutputObject {
    _newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PIndexCursorSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _newValue: BigNumberish];
  export type OutputTuple = [_poolToken: string, _newValue: bigint];
  export interface OutputObject {
    _poolToken: string;
    _newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PStatusSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isP2PDisabled: boolean];
  export type OutputTuple = [_poolToken: string, _isP2PDisabled: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isP2PDisabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartialPauseStatusSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _newStatus: boolean];
  export type OutputTuple = [_poolToken: string, _newStatus: boolean];
  export interface OutputObject {
    _poolToken: string;
    _newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseStatusSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _newStatus: boolean];
  export type OutputTuple = [_poolToken: string, _newStatus: boolean];
  export interface OutputObject {
    _poolToken: string;
    _newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFactorSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _newValue: BigNumberish];
  export type OutputTuple = [_poolToken: string, _newValue: bigint];
  export interface OutputObject {
    _poolToken: string;
    _newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFeeClaimedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _amountClaimed: BigNumberish
  ];
  export type OutputTuple = [_poolToken: string, _amountClaimed: bigint];
  export interface OutputObject {
    _poolToken: string;
    _amountClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    _user: AddressLike,
    _amountClaimed: BigNumberish,
    _traded: boolean
  ];
  export type OutputTuple = [
    _user: string,
    _amountClaimed: bigint,
    _traded: boolean
  ];
  export interface OutputObject {
    _user: string;
    _amountClaimed: bigint;
    _traded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsManagerSetEvent {
  export type InputTuple = [_newRewardsManagerAddress: AddressLike];
  export type OutputTuple = [_newRewardsManagerAddress: string];
  export interface OutputObject {
    _newRewardsManagerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryVaultSetEvent {
  export type InputTuple = [_newTreasuryVaultAddress: AddressLike];
  export type OutputTuple = [_newTreasuryVaultAddress: string];
  export interface OutputObject {
    _newTreasuryVaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MorphoAaveV2 extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoAaveV2;
  waitForDeployment(): Promise<this>;

  interface: MorphoAaveV2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BORROWING_MASK: TypedContractMethod<[], [string], "view">;

  DEFAULT_LIQUIDATION_CLOSE_FACTOR: TypedContractMethod<[], [bigint], "view">;

  HEALTH_FACTOR_LIQUIDATION_THRESHOLD: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  MAX_BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  MAX_NB_OF_MARKETS: TypedContractMethod<[], [bigint], "view">;

  NO_REFERRAL_CODE: TypedContractMethod<[], [bigint], "view">;

  ONE: TypedContractMethod<[], [string], "view">;

  VARIABLE_INTEREST_MODE: TypedContractMethod<[], [bigint], "view">;

  aaveIncentivesController: TypedContractMethod<[], [string], "view">;

  addressesProvider: TypedContractMethod<[], [string], "view">;

  "borrow(address,uint256)": TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "borrow(address,uint256,uint256)": TypedContractMethod<
    [
      _poolToken: AddressLike,
      _amount: BigNumberish,
      _maxGasForMatching: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  borrowBalanceInOf: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { inP2P: bigint; onPool: bigint }],
    "view"
  >;

  borrowMask: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  claimRewards: TypedContractMethod<
    [_assets: AddressLike[], _tradeForMorphoToken: boolean],
    [bigint],
    "nonpayable"
  >;

  claimToTreasury: TypedContractMethod<
    [_poolTokens: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  createMarket: TypedContractMethod<
    [
      _underlyingToken: AddressLike,
      _reserveFactor: BigNumberish,
      _p2pIndexCursor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  defaultMaxGasForMatching: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        supply: bigint;
        borrow: bigint;
        withdraw: bigint;
        repay: bigint;
      }
    ],
    "view"
  >;

  deltas: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyDelta: bigint;
        p2pBorrowDelta: bigint;
        p2pSupplyAmount: bigint;
        p2pBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  entryPositionsManager: TypedContractMethod<[], [string], "view">;

  exitPositionsManager: TypedContractMethod<[], [string], "view">;

  getHead: TypedContractMethod<
    [_poolToken: AddressLike, _positionType: BigNumberish],
    [string],
    "view"
  >;

  getMarketsCreated: TypedContractMethod<[], [string[]], "view">;

  getNext: TypedContractMethod<
    [_poolToken: AddressLike, _positionType: BigNumberish, _user: AddressLike],
    [string],
    "view"
  >;

  incentivesVault: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _entryPositionsManager: AddressLike,
      _exitPositionsManager: AddressLike,
      _interestRatesManager: AddressLike,
      _lendingPoolAddressesProvider: AddressLike,
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      _maxSortedUsers: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  interestRatesManager: TypedContractMethod<[], [string], "view">;

  isClaimRewardsPaused: TypedContractMethod<[], [boolean], "view">;

  liquidate: TypedContractMethod<
    [
      _poolTokenBorrowed: AddressLike,
      _poolTokenCollateral: AddressLike,
      _borrower: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  market: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean, boolean, boolean, boolean] & {
        underlyingToken: string;
        reserveFactor: bigint;
        p2pIndexCursor: bigint;
        isCreated: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        isP2PDisabled: boolean;
      }
    ],
    "view"
  >;

  maxSortedUsers: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  p2pBorrowIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  p2pSupplyIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  poolIndexes: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastUpdateTimestamp: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<
    [_poolToken: AddressLike, _onBehalf: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rewardsManager: TypedContractMethod<[], [string], "view">;

  setAaveIncentivesController: TypedContractMethod<
    [_aaveIncentivesController: AddressLike],
    [void],
    "nonpayable"
  >;

  setAssetAsCollateral: TypedContractMethod<
    [_poolToken: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;

  setClaimRewardsPauseStatus: TypedContractMethod<
    [_newStatus: boolean],
    [void],
    "nonpayable"
  >;

  setDefaultMaxGasForMatching: TypedContractMethod<
    [_defaultMaxGasForMatching: Types.MaxGasForMatchingStruct],
    [void],
    "nonpayable"
  >;

  setEntryPositionsManager: TypedContractMethod<
    [_entryPositionsManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setExitPositionsManager: TypedContractMethod<
    [_exitPositionsManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setIncentivesVault: TypedContractMethod<
    [_incentivesVault: AddressLike],
    [void],
    "nonpayable"
  >;

  setInterestRatesManager: TypedContractMethod<
    [_interestRatesManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxSortedUsers: TypedContractMethod<
    [_newMaxSortedUsers: BigNumberish],
    [void],
    "nonpayable"
  >;

  setP2PDisabledStatus: TypedContractMethod<
    [_poolToken: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;

  setP2PIndexCursor: TypedContractMethod<
    [_poolToken: AddressLike, _p2pIndexCursor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPartialPauseStatus: TypedContractMethod<
    [_poolToken: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;

  setPauseStatus: TypedContractMethod<
    [_poolToken: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;

  setPauseStatusForAllMarkets: TypedContractMethod<
    [_newStatus: boolean],
    [void],
    "nonpayable"
  >;

  setReserveFactor: TypedContractMethod<
    [_poolToken: AddressLike, _newReserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardsManager: TypedContractMethod<
    [_rewardsManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryVault: TypedContractMethod<
    [_treasuryVault: AddressLike],
    [void],
    "nonpayable"
  >;

  "supply(address,address,uint256)": TypedContractMethod<
    [_poolToken: AddressLike, _onBehalf: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "supply(address,address,uint256,uint256)": TypedContractMethod<
    [
      _poolToken: AddressLike,
      _onBehalf: AddressLike,
      _amount: BigNumberish,
      _maxGasForMatching: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supplyBalanceInOf: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { inP2P: bigint; onPool: bigint }],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryVault: TypedContractMethod<[], [string], "view">;

  updateIndexes: TypedContractMethod<
    [_poolToken: AddressLike],
    [void],
    "nonpayable"
  >;

  userMarkets: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  withdraw: TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BORROWING_MASK"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_LIQUIDATION_CLOSE_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_NB_OF_MARKETS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NO_REFERRAL_CODE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VARIABLE_INTEREST_MODE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "aaveIncentivesController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addressesProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "borrow(address,uint256)"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow(address,uint256,uint256)"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _amount: BigNumberish,
      _maxGasForMatching: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowBalanceInOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { inP2P: bigint; onPool: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "borrowMask"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [_assets: AddressLike[], _tradeForMorphoToken: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimToTreasury"
  ): TypedContractMethod<
    [_poolTokens: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      _underlyingToken: AddressLike,
      _reserveFactor: BigNumberish,
      _p2pIndexCursor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultMaxGasForMatching"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        supply: bigint;
        borrow: bigint;
        withdraw: bigint;
        repay: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deltas"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyDelta: bigint;
        p2pBorrowDelta: bigint;
        p2pSupplyAmount: bigint;
        p2pBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "entryPositionsManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "exitPositionsManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getHead"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _positionType: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketsCreated"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getNext"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _positionType: BigNumberish, _user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "incentivesVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _entryPositionsManager: AddressLike,
      _exitPositionsManager: AddressLike,
      _interestRatesManager: AddressLike,
      _lendingPoolAddressesProvider: AddressLike,
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      _maxSortedUsers: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRatesManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isClaimRewardsPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      _poolTokenBorrowed: AddressLike,
      _poolTokenCollateral: AddressLike,
      _borrower: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, boolean, boolean, boolean, boolean] & {
        underlyingToken: string;
        reserveFactor: bigint;
        p2pIndexCursor: bigint;
        isCreated: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        isP2PDisabled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxSortedUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "p2pBorrowIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "p2pSupplyIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolIndexes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastUpdateTimestamp: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _onBehalf: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardsManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAaveIncentivesController"
  ): TypedContractMethod<
    [_aaveIncentivesController: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetAsCollateral"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimRewardsPauseStatus"
  ): TypedContractMethod<[_newStatus: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDefaultMaxGasForMatching"
  ): TypedContractMethod<
    [_defaultMaxGasForMatching: Types.MaxGasForMatchingStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEntryPositionsManager"
  ): TypedContractMethod<
    [_entryPositionsManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExitPositionsManager"
  ): TypedContractMethod<
    [_exitPositionsManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIncentivesVault"
  ): TypedContractMethod<[_incentivesVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestRatesManager"
  ): TypedContractMethod<
    [_interestRatesManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxSortedUsers"
  ): TypedContractMethod<
    [_newMaxSortedUsers: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setP2PDisabledStatus"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setP2PIndexCursor"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _p2pIndexCursor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPartialPauseStatus"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPauseStatus"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPauseStatusForAllMarkets"
  ): TypedContractMethod<[_newStatus: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReserveFactor"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _newReserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardsManager"
  ): TypedContractMethod<[_rewardsManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryVault"
  ): TypedContractMethod<[_treasuryVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supply(address,address,uint256)"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _onBehalf: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supply(address,address,uint256,uint256)"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _onBehalf: AddressLike,
      _amount: BigNumberish,
      _maxGasForMatching: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyBalanceInOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { inP2P: bigint; onPool: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateIndexes"
  ): TypedContractMethod<[_poolToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userMarkets"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "P2PAmountsUpdated"
  ): TypedContractEvent<
    P2PAmountsUpdatedEvent.InputTuple,
    P2PAmountsUpdatedEvent.OutputTuple,
    P2PAmountsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PBorrowDeltaUpdated"
  ): TypedContractEvent<
    P2PBorrowDeltaUpdatedEvent.InputTuple,
    P2PBorrowDeltaUpdatedEvent.OutputTuple,
    P2PBorrowDeltaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PSupplyDeltaUpdated"
  ): TypedContractEvent<
    P2PSupplyDeltaUpdatedEvent.InputTuple,
    P2PSupplyDeltaUpdatedEvent.OutputTuple,
    P2PSupplyDeltaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Supplied"
  ): TypedContractEvent<
    SuppliedEvent.InputTuple,
    SuppliedEvent.OutputTuple,
    SuppliedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowerPositionUpdated"
  ): TypedContractEvent<
    BorrowerPositionUpdatedEvent.InputTuple,
    BorrowerPositionUpdatedEvent.OutputTuple,
    BorrowerPositionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SupplierPositionUpdated"
  ): TypedContractEvent<
    SupplierPositionUpdatedEvent.InputTuple,
    SupplierPositionUpdatedEvent.OutputTuple,
    SupplierPositionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PIndexesUpdated"
  ): TypedContractEvent<
    P2PIndexesUpdatedEvent.InputTuple,
    P2PIndexesUpdatedEvent.OutputTuple,
    P2PIndexesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;
  getEvent(
    key: "AaveIncentivesControllerSet"
  ): TypedContractEvent<
    AaveIncentivesControllerSetEvent.InputTuple,
    AaveIncentivesControllerSetEvent.OutputTuple,
    AaveIncentivesControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRewardsPauseStatusSet"
  ): TypedContractEvent<
    ClaimRewardsPauseStatusSetEvent.InputTuple,
    ClaimRewardsPauseStatusSetEvent.OutputTuple,
    ClaimRewardsPauseStatusSetEvent.OutputObject
  >;
  getEvent(
    key: "DefaultMaxGasForMatchingSet"
  ): TypedContractEvent<
    DefaultMaxGasForMatchingSetEvent.InputTuple,
    DefaultMaxGasForMatchingSetEvent.OutputTuple,
    DefaultMaxGasForMatchingSetEvent.OutputObject
  >;
  getEvent(
    key: "EntryPositionsManagerSet"
  ): TypedContractEvent<
    EntryPositionsManagerSetEvent.InputTuple,
    EntryPositionsManagerSetEvent.OutputTuple,
    EntryPositionsManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "ExitPositionsManagerSet"
  ): TypedContractEvent<
    ExitPositionsManagerSetEvent.InputTuple,
    ExitPositionsManagerSetEvent.OutputTuple,
    ExitPositionsManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "IncentivesVaultSet"
  ): TypedContractEvent<
    IncentivesVaultSetEvent.InputTuple,
    IncentivesVaultSetEvent.OutputTuple,
    IncentivesVaultSetEvent.OutputObject
  >;
  getEvent(
    key: "InterestRatesSet"
  ): TypedContractEvent<
    InterestRatesSetEvent.InputTuple,
    InterestRatesSetEvent.OutputTuple,
    InterestRatesSetEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxSortedUsersSet"
  ): TypedContractEvent<
    MaxSortedUsersSetEvent.InputTuple,
    MaxSortedUsersSetEvent.OutputTuple,
    MaxSortedUsersSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "P2PIndexCursorSet"
  ): TypedContractEvent<
    P2PIndexCursorSetEvent.InputTuple,
    P2PIndexCursorSetEvent.OutputTuple,
    P2PIndexCursorSetEvent.OutputObject
  >;
  getEvent(
    key: "P2PStatusSet"
  ): TypedContractEvent<
    P2PStatusSetEvent.InputTuple,
    P2PStatusSetEvent.OutputTuple,
    P2PStatusSetEvent.OutputObject
  >;
  getEvent(
    key: "PartialPauseStatusSet"
  ): TypedContractEvent<
    PartialPauseStatusSetEvent.InputTuple,
    PartialPauseStatusSetEvent.OutputTuple,
    PartialPauseStatusSetEvent.OutputObject
  >;
  getEvent(
    key: "PauseStatusSet"
  ): TypedContractEvent<
    PauseStatusSetEvent.InputTuple,
    PauseStatusSetEvent.OutputTuple,
    PauseStatusSetEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFactorSet"
  ): TypedContractEvent<
    ReserveFactorSetEvent.InputTuple,
    ReserveFactorSetEvent.OutputTuple,
    ReserveFactorSetEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFeeClaimed"
  ): TypedContractEvent<
    ReserveFeeClaimedEvent.InputTuple,
    ReserveFeeClaimedEvent.OutputTuple,
    ReserveFeeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsManagerSet"
  ): TypedContractEvent<
    RewardsManagerSetEvent.InputTuple,
    RewardsManagerSetEvent.OutputTuple,
    RewardsManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryVaultSet"
  ): TypedContractEvent<
    TreasuryVaultSetEvent.InputTuple,
    TreasuryVaultSetEvent.OutputTuple,
    TreasuryVaultSetEvent.OutputObject
  >;

  filters: {
    "Borrowed(address,address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "P2PAmountsUpdated(address,uint256,uint256)": TypedContractEvent<
      P2PAmountsUpdatedEvent.InputTuple,
      P2PAmountsUpdatedEvent.OutputTuple,
      P2PAmountsUpdatedEvent.OutputObject
    >;
    P2PAmountsUpdated: TypedContractEvent<
      P2PAmountsUpdatedEvent.InputTuple,
      P2PAmountsUpdatedEvent.OutputTuple,
      P2PAmountsUpdatedEvent.OutputObject
    >;

    "P2PBorrowDeltaUpdated(address,uint256)": TypedContractEvent<
      P2PBorrowDeltaUpdatedEvent.InputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputObject
    >;
    P2PBorrowDeltaUpdated: TypedContractEvent<
      P2PBorrowDeltaUpdatedEvent.InputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputObject
    >;

    "P2PSupplyDeltaUpdated(address,uint256)": TypedContractEvent<
      P2PSupplyDeltaUpdatedEvent.InputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputObject
    >;
    P2PSupplyDeltaUpdated: TypedContractEvent<
      P2PSupplyDeltaUpdatedEvent.InputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputObject
    >;

    "Supplied(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      SuppliedEvent.InputTuple,
      SuppliedEvent.OutputTuple,
      SuppliedEvent.OutputObject
    >;
    Supplied: TypedContractEvent<
      SuppliedEvent.InputTuple,
      SuppliedEvent.OutputTuple,
      SuppliedEvent.OutputObject
    >;

    "BorrowerPositionUpdated(address,address,uint256,uint256)": TypedContractEvent<
      BorrowerPositionUpdatedEvent.InputTuple,
      BorrowerPositionUpdatedEvent.OutputTuple,
      BorrowerPositionUpdatedEvent.OutputObject
    >;
    BorrowerPositionUpdated: TypedContractEvent<
      BorrowerPositionUpdatedEvent.InputTuple,
      BorrowerPositionUpdatedEvent.OutputTuple,
      BorrowerPositionUpdatedEvent.OutputObject
    >;

    "SupplierPositionUpdated(address,address,uint256,uint256)": TypedContractEvent<
      SupplierPositionUpdatedEvent.InputTuple,
      SupplierPositionUpdatedEvent.OutputTuple,
      SupplierPositionUpdatedEvent.OutputObject
    >;
    SupplierPositionUpdated: TypedContractEvent<
      SupplierPositionUpdatedEvent.InputTuple,
      SupplierPositionUpdatedEvent.OutputTuple,
      SupplierPositionUpdatedEvent.OutputObject
    >;

    "P2PIndexesUpdated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      P2PIndexesUpdatedEvent.InputTuple,
      P2PIndexesUpdatedEvent.OutputTuple,
      P2PIndexesUpdatedEvent.OutputObject
    >;
    P2PIndexesUpdated: TypedContractEvent<
      P2PIndexesUpdatedEvent.InputTuple,
      P2PIndexesUpdatedEvent.OutputTuple,
      P2PIndexesUpdatedEvent.OutputObject
    >;

    "Liquidated(address,address,address,uint256,address,uint256)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "Withdrawn(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;

    "Repaid(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;

    "AaveIncentivesControllerSet(address)": TypedContractEvent<
      AaveIncentivesControllerSetEvent.InputTuple,
      AaveIncentivesControllerSetEvent.OutputTuple,
      AaveIncentivesControllerSetEvent.OutputObject
    >;
    AaveIncentivesControllerSet: TypedContractEvent<
      AaveIncentivesControllerSetEvent.InputTuple,
      AaveIncentivesControllerSetEvent.OutputTuple,
      AaveIncentivesControllerSetEvent.OutputObject
    >;

    "ClaimRewardsPauseStatusSet(bool)": TypedContractEvent<
      ClaimRewardsPauseStatusSetEvent.InputTuple,
      ClaimRewardsPauseStatusSetEvent.OutputTuple,
      ClaimRewardsPauseStatusSetEvent.OutputObject
    >;
    ClaimRewardsPauseStatusSet: TypedContractEvent<
      ClaimRewardsPauseStatusSetEvent.InputTuple,
      ClaimRewardsPauseStatusSetEvent.OutputTuple,
      ClaimRewardsPauseStatusSetEvent.OutputObject
    >;

    "DefaultMaxGasForMatchingSet(tuple)": TypedContractEvent<
      DefaultMaxGasForMatchingSetEvent.InputTuple,
      DefaultMaxGasForMatchingSetEvent.OutputTuple,
      DefaultMaxGasForMatchingSetEvent.OutputObject
    >;
    DefaultMaxGasForMatchingSet: TypedContractEvent<
      DefaultMaxGasForMatchingSetEvent.InputTuple,
      DefaultMaxGasForMatchingSetEvent.OutputTuple,
      DefaultMaxGasForMatchingSetEvent.OutputObject
    >;

    "EntryPositionsManagerSet(address)": TypedContractEvent<
      EntryPositionsManagerSetEvent.InputTuple,
      EntryPositionsManagerSetEvent.OutputTuple,
      EntryPositionsManagerSetEvent.OutputObject
    >;
    EntryPositionsManagerSet: TypedContractEvent<
      EntryPositionsManagerSetEvent.InputTuple,
      EntryPositionsManagerSetEvent.OutputTuple,
      EntryPositionsManagerSetEvent.OutputObject
    >;

    "ExitPositionsManagerSet(address)": TypedContractEvent<
      ExitPositionsManagerSetEvent.InputTuple,
      ExitPositionsManagerSetEvent.OutputTuple,
      ExitPositionsManagerSetEvent.OutputObject
    >;
    ExitPositionsManagerSet: TypedContractEvent<
      ExitPositionsManagerSetEvent.InputTuple,
      ExitPositionsManagerSetEvent.OutputTuple,
      ExitPositionsManagerSetEvent.OutputObject
    >;

    "IncentivesVaultSet(address)": TypedContractEvent<
      IncentivesVaultSetEvent.InputTuple,
      IncentivesVaultSetEvent.OutputTuple,
      IncentivesVaultSetEvent.OutputObject
    >;
    IncentivesVaultSet: TypedContractEvent<
      IncentivesVaultSetEvent.InputTuple,
      IncentivesVaultSetEvent.OutputTuple,
      IncentivesVaultSetEvent.OutputObject
    >;

    "InterestRatesSet(address)": TypedContractEvent<
      InterestRatesSetEvent.InputTuple,
      InterestRatesSetEvent.OutputTuple,
      InterestRatesSetEvent.OutputObject
    >;
    InterestRatesSet: TypedContractEvent<
      InterestRatesSetEvent.InputTuple,
      InterestRatesSetEvent.OutputTuple,
      InterestRatesSetEvent.OutputObject
    >;

    "MarketCreated(address,uint16,uint16)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MaxSortedUsersSet(uint256)": TypedContractEvent<
      MaxSortedUsersSetEvent.InputTuple,
      MaxSortedUsersSetEvent.OutputTuple,
      MaxSortedUsersSetEvent.OutputObject
    >;
    MaxSortedUsersSet: TypedContractEvent<
      MaxSortedUsersSetEvent.InputTuple,
      MaxSortedUsersSetEvent.OutputTuple,
      MaxSortedUsersSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "P2PIndexCursorSet(address,uint16)": TypedContractEvent<
      P2PIndexCursorSetEvent.InputTuple,
      P2PIndexCursorSetEvent.OutputTuple,
      P2PIndexCursorSetEvent.OutputObject
    >;
    P2PIndexCursorSet: TypedContractEvent<
      P2PIndexCursorSetEvent.InputTuple,
      P2PIndexCursorSetEvent.OutputTuple,
      P2PIndexCursorSetEvent.OutputObject
    >;

    "P2PStatusSet(address,bool)": TypedContractEvent<
      P2PStatusSetEvent.InputTuple,
      P2PStatusSetEvent.OutputTuple,
      P2PStatusSetEvent.OutputObject
    >;
    P2PStatusSet: TypedContractEvent<
      P2PStatusSetEvent.InputTuple,
      P2PStatusSetEvent.OutputTuple,
      P2PStatusSetEvent.OutputObject
    >;

    "PartialPauseStatusSet(address,bool)": TypedContractEvent<
      PartialPauseStatusSetEvent.InputTuple,
      PartialPauseStatusSetEvent.OutputTuple,
      PartialPauseStatusSetEvent.OutputObject
    >;
    PartialPauseStatusSet: TypedContractEvent<
      PartialPauseStatusSetEvent.InputTuple,
      PartialPauseStatusSetEvent.OutputTuple,
      PartialPauseStatusSetEvent.OutputObject
    >;

    "PauseStatusSet(address,bool)": TypedContractEvent<
      PauseStatusSetEvent.InputTuple,
      PauseStatusSetEvent.OutputTuple,
      PauseStatusSetEvent.OutputObject
    >;
    PauseStatusSet: TypedContractEvent<
      PauseStatusSetEvent.InputTuple,
      PauseStatusSetEvent.OutputTuple,
      PauseStatusSetEvent.OutputObject
    >;

    "ReserveFactorSet(address,uint16)": TypedContractEvent<
      ReserveFactorSetEvent.InputTuple,
      ReserveFactorSetEvent.OutputTuple,
      ReserveFactorSetEvent.OutputObject
    >;
    ReserveFactorSet: TypedContractEvent<
      ReserveFactorSetEvent.InputTuple,
      ReserveFactorSetEvent.OutputTuple,
      ReserveFactorSetEvent.OutputObject
    >;

    "ReserveFeeClaimed(address,uint256)": TypedContractEvent<
      ReserveFeeClaimedEvent.InputTuple,
      ReserveFeeClaimedEvent.OutputTuple,
      ReserveFeeClaimedEvent.OutputObject
    >;
    ReserveFeeClaimed: TypedContractEvent<
      ReserveFeeClaimedEvent.InputTuple,
      ReserveFeeClaimedEvent.OutputTuple,
      ReserveFeeClaimedEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256,bool)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "RewardsManagerSet(address)": TypedContractEvent<
      RewardsManagerSetEvent.InputTuple,
      RewardsManagerSetEvent.OutputTuple,
      RewardsManagerSetEvent.OutputObject
    >;
    RewardsManagerSet: TypedContractEvent<
      RewardsManagerSetEvent.InputTuple,
      RewardsManagerSetEvent.OutputTuple,
      RewardsManagerSetEvent.OutputObject
    >;

    "TreasuryVaultSet(address)": TypedContractEvent<
      TreasuryVaultSetEvent.InputTuple,
      TreasuryVaultSetEvent.OutputTuple,
      TreasuryVaultSetEvent.OutputObject
    >;
    TreasuryVaultSet: TypedContractEvent<
      TreasuryVaultSetEvent.InputTuple,
      TreasuryVaultSetEvent.OutputTuple,
      TreasuryVaultSetEvent.OutputObject
    >;
  };
}
