/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type OrderStruct = {
  y: BigNumberish;
  z: BigNumberish;
  A: BigNumberish;
  B: BigNumberish;
};

export type OrderStructOutput = [y: bigint, z: bigint, A: bigint, B: bigint] & {
  y: bigint;
  z: bigint;
  A: bigint;
  B: bigint;
};

export type TradeActionStruct = {
  strategyId: BigNumberish;
  amount: BigNumberish;
};

export type TradeActionStructOutput = [strategyId: bigint, amount: bigint] & {
  strategyId: bigint;
  amount: bigint;
};

export type PairStruct = {
  id: BigNumberish;
  tokens: [AddressLike, AddressLike];
};

export type PairStructOutput = [id: bigint, tokens: [string, string]] & {
  id: bigint;
  tokens: [string, string];
};

export type StrategyStruct = {
  id: BigNumberish;
  owner: AddressLike;
  tokens: [AddressLike, AddressLike];
  orders: [OrderStruct, OrderStruct];
};

export type StrategyStructOutput = [
  id: bigint,
  owner: string,
  tokens: [string, string],
  orders: [OrderStructOutput, OrderStructOutput]
] & {
  id: bigint;
  owner: string;
  tokens: [string, string];
  orders: [OrderStructOutput, OrderStructOutput];
};

export interface CarbonControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "implementation"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "DEFAULT_ADMIN_ROLE"
      | "accumulatedFees"
      | "calculateTradeSourceAmount"
      | "calculateTradeTargetAmount"
      | "controllerType"
      | "createPair"
      | "createStrategy"
      | "deleteStrategy"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "pair"
      | "pairTradingFeePPM"
      | "pairs"
      | "pause"
      | "paused"
      | "postUpgrade"
      | "renounceRole"
      | "revokeRole"
      | "roleAdmin"
      | "roleEmergencyStopper"
      | "roleFeesManager"
      | "setPairTradingFeePPM"
      | "setTradingFeePPM"
      | "strategiesByPair"
      | "strategiesByPairCount"
      | "strategy"
      | "supportsInterface"
      | "tradeBySourceAmount"
      | "tradeByTargetAmount"
      | "tradingFeePPM"
      | "unpause"
      | "updateStrategy"
      | "version"
      | "withdrawFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Upgraded"
      | "FeesWithdrawn"
      | "Initialized"
      | "PairCreated"
      | "PairTradingFeePPMUpdated"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StrategyCreated"
      | "StrategyDeleted"
      | "StrategyUpdated"
      | "TokensTraded"
      | "TradingFeePPMUpdated"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulatedFees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTradeSourceAmount",
    values: [AddressLike, AddressLike, TradeActionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTradeTargetAmount",
    values: [AddressLike, AddressLike, TradeActionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "controllerType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createStrategy",
    values: [AddressLike, AddressLike, [OrderStruct, OrderStruct]]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pairTradingFeePPM",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pairs", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postUpgrade",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "roleAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "roleEmergencyStopper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "roleFeesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPairTradingFeePPM",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTradingFeePPM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategiesByPair",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strategiesByPairCount",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "strategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeBySourceAmount",
    values: [
      AddressLike,
      AddressLike,
      TradeActionStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeByTargetAmount",
    values: [
      AddressLike,
      AddressLike,
      TradeActionStruct[],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradingFeePPM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateStrategy",
    values: [
      BigNumberish,
      [OrderStruct, OrderStruct],
      [OrderStruct, OrderStruct]
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accumulatedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTradeSourceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTradeTargetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "controllerType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairTradingFeePPM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleEmergencyStopper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleFeesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairTradingFeePPM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTradingFeePPM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategiesByPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategiesByPairCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeBySourceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeByTargetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradingFeePPM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesWithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    recipient: string,
    amount: bigint,
    sender: string
  ];
  export interface OutputObject {
    token: string;
    recipient: string;
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairCreatedEvent {
  export type InputTuple = [
    pairId: BigNumberish,
    token0: AddressLike,
    token1: AddressLike
  ];
  export type OutputTuple = [pairId: bigint, token0: string, token1: string];
  export interface OutputObject {
    pairId: bigint;
    token0: string;
    token1: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PairTradingFeePPMUpdatedEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    prevFeePPM: BigNumberish,
    newFeePPM: BigNumberish
  ];
  export type OutputTuple = [
    token0: string,
    token1: string,
    prevFeePPM: bigint,
    newFeePPM: bigint
  ];
  export interface OutputObject {
    token0: string;
    token1: string;
    prevFeePPM: bigint;
    newFeePPM: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    order0: OrderStruct,
    order1: OrderStruct
  ];
  export type OutputTuple = [
    id: bigint,
    owner: string,
    token0: string,
    token1: string,
    order0: OrderStructOutput,
    order1: OrderStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    owner: string;
    token0: string;
    token1: string;
    order0: OrderStructOutput;
    order1: OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyDeletedEvent {
  export type InputTuple = [
    id: BigNumberish,
    owner: AddressLike,
    token0: AddressLike,
    token1: AddressLike,
    order0: OrderStruct,
    order1: OrderStruct
  ];
  export type OutputTuple = [
    id: bigint,
    owner: string,
    token0: string,
    token1: string,
    order0: OrderStructOutput,
    order1: OrderStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    owner: string;
    token0: string;
    token1: string;
    order0: OrderStructOutput;
    order1: OrderStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyUpdatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    token0: AddressLike,
    token1: AddressLike,
    order0: OrderStruct,
    order1: OrderStruct,
    reason: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    token0: string,
    token1: string,
    order0: OrderStructOutput,
    order1: OrderStructOutput,
    reason: bigint
  ];
  export interface OutputObject {
    id: bigint;
    token0: string;
    token1: string;
    order0: OrderStructOutput;
    order1: OrderStructOutput;
    reason: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensTradedEvent {
  export type InputTuple = [
    trader: AddressLike,
    sourceToken: AddressLike,
    targetToken: AddressLike,
    sourceAmount: BigNumberish,
    targetAmount: BigNumberish,
    tradingFeeAmount: BigNumberish,
    byTargetAmount: boolean
  ];
  export type OutputTuple = [
    trader: string,
    sourceToken: string,
    targetToken: string,
    sourceAmount: bigint,
    targetAmount: bigint,
    tradingFeeAmount: bigint,
    byTargetAmount: boolean
  ];
  export interface OutputObject {
    trader: string;
    sourceToken: string;
    targetToken: string;
    sourceAmount: bigint;
    targetAmount: bigint;
    tradingFeeAmount: bigint;
    byTargetAmount: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradingFeePPMUpdatedEvent {
  export type InputTuple = [prevFeePPM: BigNumberish, newFeePPM: BigNumberish];
  export type OutputTuple = [prevFeePPM: bigint, newFeePPM: bigint];
  export interface OutputObject {
    prevFeePPM: bigint;
    newFeePPM: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarbonController extends BaseContract {
  connect(runner?: ContractRunner | null): CarbonController;
  waitForDeployment(): Promise<this>;

  interface: CarbonControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "nonpayable">;

  implementation: TypedContractMethod<[], [string], "nonpayable">;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  accumulatedFees: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  calculateTradeSourceAmount: TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetToken: AddressLike,
      tradeActions: TradeActionStruct[]
    ],
    [bigint],
    "view"
  >;

  calculateTradeTargetAmount: TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetToken: AddressLike,
      tradeActions: TradeActionStruct[]
    ],
    [bigint],
    "view"
  >;

  controllerType: TypedContractMethod<[], [bigint], "view">;

  createPair: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [PairStructOutput],
    "nonpayable"
  >;

  createStrategy: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      orders: [OrderStruct, OrderStruct]
    ],
    [bigint],
    "payable"
  >;

  deleteStrategy: TypedContractMethod<
    [strategyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getRoleMember: TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  getRoleMemberCount: TypedContractMethod<[role: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  pair: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [PairStructOutput],
    "view"
  >;

  pairTradingFeePPM: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [bigint],
    "view"
  >;

  pairs: TypedContractMethod<[], [[string, string][]], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  postUpgrade: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  roleAdmin: TypedContractMethod<[], [string], "view">;

  roleEmergencyStopper: TypedContractMethod<[], [string], "view">;

  roleFeesManager: TypedContractMethod<[], [string], "view">;

  setPairTradingFeePPM: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      newPairTradingFeePPM: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setTradingFeePPM: TypedContractMethod<
    [newTradingFeePPM: BigNumberish],
    [void],
    "nonpayable"
  >;

  strategiesByPair: TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      startIndex: BigNumberish,
      endIndex: BigNumberish
    ],
    [StrategyStructOutput[]],
    "view"
  >;

  strategiesByPairCount: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [bigint],
    "view"
  >;

  strategy: TypedContractMethod<
    [id: BigNumberish],
    [StrategyStructOutput],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tradeBySourceAmount: TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetToken: AddressLike,
      tradeActions: TradeActionStruct[],
      deadline: BigNumberish,
      minReturn: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  tradeByTargetAmount: TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetToken: AddressLike,
      tradeActions: TradeActionStruct[],
      deadline: BigNumberish,
      maxInput: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  tradingFeePPM: TypedContractMethod<[], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateStrategy: TypedContractMethod<
    [
      strategyId: BigNumberish,
      currentOrders: [OrderStruct, OrderStruct],
      newOrders: [OrderStruct, OrderStruct]
    ],
    [void],
    "payable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  withdrawFees: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "accumulatedFees"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateTradeSourceAmount"
  ): TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetToken: AddressLike,
      tradeActions: TradeActionStruct[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateTradeTargetAmount"
  ): TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetToken: AddressLike,
      tradeActions: TradeActionStruct[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "controllerType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPair"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [PairStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createStrategy"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      orders: [OrderStruct, OrderStruct]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "deleteStrategy"
  ): TypedContractMethod<[strategyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleMember"
  ): TypedContractMethod<
    [role: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleMemberCount"
  ): TypedContractMethod<[role: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pair"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [PairStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pairTradingFeePPM"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pairs"
  ): TypedContractMethod<[], [[string, string][]], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "postUpgrade"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roleEmergencyStopper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "roleFeesManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setPairTradingFeePPM"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      newPairTradingFeePPM: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTradingFeePPM"
  ): TypedContractMethod<
    [newTradingFeePPM: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "strategiesByPair"
  ): TypedContractMethod<
    [
      token0: AddressLike,
      token1: AddressLike,
      startIndex: BigNumberish,
      endIndex: BigNumberish
    ],
    [StrategyStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "strategiesByPairCount"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "strategy"
  ): TypedContractMethod<[id: BigNumberish], [StrategyStructOutput], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tradeBySourceAmount"
  ): TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetToken: AddressLike,
      tradeActions: TradeActionStruct[],
      deadline: BigNumberish,
      minReturn: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tradeByTargetAmount"
  ): TypedContractMethod<
    [
      sourceToken: AddressLike,
      targetToken: AddressLike,
      tradeActions: TradeActionStruct[],
      deadline: BigNumberish,
      maxInput: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tradingFeePPM"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStrategy"
  ): TypedContractMethod<
    [
      strategyId: BigNumberish,
      currentOrders: [OrderStruct, OrderStruct],
      newOrders: [OrderStruct, OrderStruct]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawFees"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "FeesWithdrawn"
  ): TypedContractEvent<
    FeesWithdrawnEvent.InputTuple,
    FeesWithdrawnEvent.OutputTuple,
    FeesWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "PairCreated"
  ): TypedContractEvent<
    PairCreatedEvent.InputTuple,
    PairCreatedEvent.OutputTuple,
    PairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PairTradingFeePPMUpdated"
  ): TypedContractEvent<
    PairTradingFeePPMUpdatedEvent.InputTuple,
    PairTradingFeePPMUpdatedEvent.OutputTuple,
    PairTradingFeePPMUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyCreated"
  ): TypedContractEvent<
    StrategyCreatedEvent.InputTuple,
    StrategyCreatedEvent.OutputTuple,
    StrategyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyDeleted"
  ): TypedContractEvent<
    StrategyDeletedEvent.InputTuple,
    StrategyDeletedEvent.OutputTuple,
    StrategyDeletedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyUpdated"
  ): TypedContractEvent<
    StrategyUpdatedEvent.InputTuple,
    StrategyUpdatedEvent.OutputTuple,
    StrategyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TokensTraded"
  ): TypedContractEvent<
    TokensTradedEvent.InputTuple,
    TokensTradedEvent.OutputTuple,
    TokensTradedEvent.OutputObject
  >;
  getEvent(
    key: "TradingFeePPMUpdated"
  ): TypedContractEvent<
    TradingFeePPMUpdatedEvent.InputTuple,
    TradingFeePPMUpdatedEvent.OutputTuple,
    TradingFeePPMUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "FeesWithdrawn(address,address,uint256,address)": TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;
    FeesWithdrawn: TypedContractEvent<
      FeesWithdrawnEvent.InputTuple,
      FeesWithdrawnEvent.OutputTuple,
      FeesWithdrawnEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "PairCreated(uint128,address,address)": TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;
    PairCreated: TypedContractEvent<
      PairCreatedEvent.InputTuple,
      PairCreatedEvent.OutputTuple,
      PairCreatedEvent.OutputObject
    >;

    "PairTradingFeePPMUpdated(address,address,uint32,uint32)": TypedContractEvent<
      PairTradingFeePPMUpdatedEvent.InputTuple,
      PairTradingFeePPMUpdatedEvent.OutputTuple,
      PairTradingFeePPMUpdatedEvent.OutputObject
    >;
    PairTradingFeePPMUpdated: TypedContractEvent<
      PairTradingFeePPMUpdatedEvent.InputTuple,
      PairTradingFeePPMUpdatedEvent.OutputTuple,
      PairTradingFeePPMUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StrategyCreated(uint256,address,address,address,tuple,tuple)": TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;
    StrategyCreated: TypedContractEvent<
      StrategyCreatedEvent.InputTuple,
      StrategyCreatedEvent.OutputTuple,
      StrategyCreatedEvent.OutputObject
    >;

    "StrategyDeleted(uint256,address,address,address,tuple,tuple)": TypedContractEvent<
      StrategyDeletedEvent.InputTuple,
      StrategyDeletedEvent.OutputTuple,
      StrategyDeletedEvent.OutputObject
    >;
    StrategyDeleted: TypedContractEvent<
      StrategyDeletedEvent.InputTuple,
      StrategyDeletedEvent.OutputTuple,
      StrategyDeletedEvent.OutputObject
    >;

    "StrategyUpdated(uint256,address,address,tuple,tuple,uint8)": TypedContractEvent<
      StrategyUpdatedEvent.InputTuple,
      StrategyUpdatedEvent.OutputTuple,
      StrategyUpdatedEvent.OutputObject
    >;
    StrategyUpdated: TypedContractEvent<
      StrategyUpdatedEvent.InputTuple,
      StrategyUpdatedEvent.OutputTuple,
      StrategyUpdatedEvent.OutputObject
    >;

    "TokensTraded(address,address,address,uint256,uint256,uint128,bool)": TypedContractEvent<
      TokensTradedEvent.InputTuple,
      TokensTradedEvent.OutputTuple,
      TokensTradedEvent.OutputObject
    >;
    TokensTraded: TypedContractEvent<
      TokensTradedEvent.InputTuple,
      TokensTradedEvent.OutputTuple,
      TokensTradedEvent.OutputObject
    >;

    "TradingFeePPMUpdated(uint32,uint32)": TypedContractEvent<
      TradingFeePPMUpdatedEvent.InputTuple,
      TradingFeePPMUpdatedEvent.OutputTuple,
      TradingFeePPMUpdatedEvent.OutputObject
    >;
    TradingFeePPMUpdated: TypedContractEvent<
      TradingFeePPMUpdatedEvent.InputTuple,
      TradingFeePPMUpdatedEvent.OutputTuple,
      TradingFeePPMUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
