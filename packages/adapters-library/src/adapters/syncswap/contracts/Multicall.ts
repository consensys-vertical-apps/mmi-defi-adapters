/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IFeeManagerV2 {
  export type FeeDataStruct = {
    gamma: BigNumberish;
    minFee: BigNumberish;
    maxFee: BigNumberish;
  };

  export type FeeDataStructOutput = [
    gamma: bigint,
    minFee: bigint,
    maxFee: bigint
  ] & { gamma: bigint; minFee: bigint; maxFee: bigint };
}

export declare namespace Multicall {
  export type TokenStruct = {
    token: AddressLike;
    symbol: string;
    name: string;
    decimals: BigNumberish;
  };

  export type TokenStructOutput = [
    token: string,
    symbol: string,
    name: string,
    decimals: bigint
  ] & { token: string; symbol: string; name: string; decimals: bigint };

  export type CryptoPoolDataStruct = {
    gamma: BigNumberish;
    invariantLast: BigNumberish;
    priceScale: BigNumberish;
    futureParamsTime: BigNumberish;
    virtualPrice: BigNumberish;
    totalSupply: BigNumberish;
  };

  export type CryptoPoolDataStructOutput = [
    gamma: bigint,
    invariantLast: bigint,
    priceScale: bigint,
    futureParamsTime: bigint,
    virtualPrice: bigint,
    totalSupply: bigint
  ] & {
    gamma: bigint;
    invariantLast: bigint;
    priceScale: bigint;
    futureParamsTime: bigint;
    virtualPrice: bigint;
    totalSupply: bigint;
  };

  export type PoolDataStruct = {
    isV2: boolean;
    pool: AddressLike;
    poolType: BigNumberish;
    swapFee01: IFeeManagerV2.FeeDataStruct;
    swapFee10: IFeeManagerV2.FeeDataStruct;
    protocolFee: BigNumberish;
    token0: Multicall.TokenStruct;
    token1: Multicall.TokenStruct;
    reserve0: BigNumberish;
    reserve1: BigNumberish;
    totalSupply: BigNumberish;
    accountBalance: BigNumberish;
    routerAllowance: BigNumberish;
    token0Value: BigNumberish;
    token1Value: BigNumberish;
    feesCurrentEpoch: BigNumberish;
    feesLastEpoch: BigNumberish;
    feeStartTime: BigNumberish;
    totalFeeAmount: BigNumberish;
    a: BigNumberish;
    cryptoPoolData: Multicall.CryptoPoolDataStruct[];
  };

  export type PoolDataStructOutput = [
    isV2: boolean,
    pool: string,
    poolType: bigint,
    swapFee01: IFeeManagerV2.FeeDataStructOutput,
    swapFee10: IFeeManagerV2.FeeDataStructOutput,
    protocolFee: bigint,
    token0: Multicall.TokenStructOutput,
    token1: Multicall.TokenStructOutput,
    reserve0: bigint,
    reserve1: bigint,
    totalSupply: bigint,
    accountBalance: bigint,
    routerAllowance: bigint,
    token0Value: bigint,
    token1Value: bigint,
    feesCurrentEpoch: bigint,
    feesLastEpoch: bigint,
    feeStartTime: bigint,
    totalFeeAmount: bigint,
    a: bigint,
    cryptoPoolData: Multicall.CryptoPoolDataStructOutput[]
  ] & {
    isV2: boolean;
    pool: string;
    poolType: bigint;
    swapFee01: IFeeManagerV2.FeeDataStructOutput;
    swapFee10: IFeeManagerV2.FeeDataStructOutput;
    protocolFee: bigint;
    token0: Multicall.TokenStructOutput;
    token1: Multicall.TokenStructOutput;
    reserve0: bigint;
    reserve1: bigint;
    totalSupply: bigint;
    accountBalance: bigint;
    routerAllowance: bigint;
    token0Value: bigint;
    token1Value: bigint;
    feesCurrentEpoch: bigint;
    feesLastEpoch: bigint;
    feeStartTime: bigint;
    totalFeeAmount: bigint;
    a: bigint;
    cryptoPoolData: Multicall.CryptoPoolDataStructOutput[];
  };

  export type GetPoolsStruct = { pools: Multicall.PoolDataStruct[] };

  export type GetPoolsStructOutput = [
    pools: Multicall.PoolDataStructOutput[]
  ] & { pools: Multicall.PoolDataStructOutput[] };

  export type PoolFeesStruct = {
    defaultProtocolFees: BigNumberish[];
    defaultSwapFees: IFeeManagerV2.FeeDataStruct[];
  };

  export type PoolFeesStructOutput = [
    defaultProtocolFees: bigint[],
    defaultSwapFees: IFeeManagerV2.FeeDataStructOutput[]
  ] & {
    defaultProtocolFees: bigint[];
    defaultSwapFees: IFeeManagerV2.FeeDataStructOutput[];
  };

  export type GetPoolStruct = {
    pool: Multicall.PoolDataStruct;
    feesV1: Multicall.PoolFeesStruct;
    feesV2: Multicall.PoolFeesStruct;
  };

  export type GetPoolStructOutput = [
    pool: Multicall.PoolDataStructOutput,
    feesV1: Multicall.PoolFeesStructOutput,
    feesV2: Multicall.PoolFeesStructOutput
  ] & {
    pool: Multicall.PoolDataStructOutput;
    feesV1: Multicall.PoolFeesStructOutput;
    feesV2: Multicall.PoolFeesStructOutput;
  };
}

export interface MulticallInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllPools"
      | "getEnteredPools"
      | "getPool"
      | "getPoolByAddress"
      | "getPools"
      | "tryDecimals"
      | "tryName"
      | "trySymbol"
      | "tryToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllPools",
    values: [
      boolean,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnteredPools",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike[],
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean,
      AddressLike[],
      AddressLike[],
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolByAddress",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      boolean,
      AddressLike[],
      AddressLike[],
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike[],
      AddressLike[],
      AddressLike[],
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tryDecimals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryName",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trySymbol",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnteredPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tryDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tryName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trySymbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tryToken", data: BytesLike): Result;
}

export interface Multicall extends BaseContract {
  connect(runner?: ContractRunner | null): Multicall;
  waitForDeployment(): Promise<this>;

  interface: MulticallInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllPools: TypedContractMethod<
    [
      isV2: boolean,
      master: AddressLike,
      router: AddressLike,
      account: AddressLike,
      startIndex: BigNumberish,
      count: BigNumberish,
      factories: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolsStructOutput],
    "view"
  >;

  getEnteredPools: TypedContractMethod<
    [
      masterV1: AddressLike,
      masterV2: AddressLike,
      router: AddressLike,
      account: AddressLike,
      startIndex: BigNumberish,
      count: BigNumberish,
      factoriesV1: AddressLike[],
      factoriesV2: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolsStructOutput],
    "view"
  >;

  getPool: TypedContractMethod<
    [
      factory: AddressLike,
      tokenA: AddressLike,
      tokenB: AddressLike,
      masterV1: AddressLike,
      masterV2: AddressLike,
      account: AddressLike,
      router: AddressLike,
      expectV2: boolean,
      factoriesV1: AddressLike[],
      factoriesV2: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolStructOutput],
    "view"
  >;

  getPoolByAddress: TypedContractMethod<
    [
      pool: AddressLike,
      masterV1: AddressLike,
      masterV2: AddressLike,
      account: AddressLike,
      router: AddressLike,
      expectV2: boolean,
      factoriesV1: AddressLike[],
      factoriesV2: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolStructOutput],
    "view"
  >;

  getPools: TypedContractMethod<
    [
      masterV1: AddressLike,
      masterV2: AddressLike,
      router: AddressLike,
      account: AddressLike,
      poolAddresses: AddressLike[],
      factoriesV1: AddressLike[],
      factoriesV2: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolsStructOutput],
    "view"
  >;

  tryDecimals: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  tryName: TypedContractMethod<[token: AddressLike], [string], "view">;

  trySymbol: TypedContractMethod<[token: AddressLike], [string], "view">;

  tryToken: TypedContractMethod<
    [token: AddressLike],
    [Multicall.TokenStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllPools"
  ): TypedContractMethod<
    [
      isV2: boolean,
      master: AddressLike,
      router: AddressLike,
      account: AddressLike,
      startIndex: BigNumberish,
      count: BigNumberish,
      factories: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEnteredPools"
  ): TypedContractMethod<
    [
      masterV1: AddressLike,
      masterV2: AddressLike,
      router: AddressLike,
      account: AddressLike,
      startIndex: BigNumberish,
      count: BigNumberish,
      factoriesV1: AddressLike[],
      factoriesV2: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<
    [
      factory: AddressLike,
      tokenA: AddressLike,
      tokenB: AddressLike,
      masterV1: AddressLike,
      masterV2: AddressLike,
      account: AddressLike,
      router: AddressLike,
      expectV2: boolean,
      factoriesV1: AddressLike[],
      factoriesV2: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolByAddress"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      masterV1: AddressLike,
      masterV2: AddressLike,
      account: AddressLike,
      router: AddressLike,
      expectV2: boolean,
      factoriesV1: AddressLike[],
      factoriesV2: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPools"
  ): TypedContractMethod<
    [
      masterV1: AddressLike,
      masterV2: AddressLike,
      router: AddressLike,
      account: AddressLike,
      poolAddresses: AddressLike[],
      factoriesV1: AddressLike[],
      factoriesV2: AddressLike[],
      tokenTo: AddressLike,
      connectorTokens: AddressLike[]
    ],
    [Multicall.GetPoolsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "tryDecimals"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tryName"
  ): TypedContractMethod<[token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "trySymbol"
  ): TypedContractMethod<[token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "tryToken"
  ): TypedContractMethod<
    [token: AddressLike],
    [Multicall.TokenStructOutput],
    "view"
  >;

  filters: {};
}
