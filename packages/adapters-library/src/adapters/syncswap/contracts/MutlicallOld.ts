/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SyncSwapMulticall {
  export type TokenStruct = {
    token: AddressLike;
    symbol: string;
    name: string;
    decimals: BigNumberish;
  };

  export type TokenStructOutput = [
    token: string,
    symbol: string,
    name: string,
    decimals: bigint
  ] & { token: string; symbol: string; name: string; decimals: bigint };

  export type PoolDataStruct = {
    pool: AddressLike;
    poolType: BigNumberish;
    swapFee01: BigNumberish;
    swapFee10: BigNumberish;
    protocolFee: BigNumberish;
    token0: SyncSwapMulticall.TokenStruct;
    token1: SyncSwapMulticall.TokenStruct;
    reserve0: BigNumberish;
    reserve1: BigNumberish;
    totalSupply: BigNumberish;
    accountBalance: BigNumberish;
    routerAllowance: BigNumberish;
  };

  export type PoolDataStructOutput = [
    pool: string,
    poolType: bigint,
    swapFee01: bigint,
    swapFee10: bigint,
    protocolFee: bigint,
    token0: SyncSwapMulticall.TokenStructOutput,
    token1: SyncSwapMulticall.TokenStructOutput,
    reserve0: bigint,
    reserve1: bigint,
    totalSupply: bigint,
    accountBalance: bigint,
    routerAllowance: bigint
  ] & {
    pool: string;
    poolType: bigint;
    swapFee01: bigint;
    swapFee10: bigint;
    protocolFee: bigint;
    token0: SyncSwapMulticall.TokenStructOutput;
    token1: SyncSwapMulticall.TokenStructOutput;
    reserve0: bigint;
    reserve1: bigint;
    totalSupply: bigint;
    accountBalance: bigint;
    routerAllowance: bigint;
  };

  export type GetPoolsStruct = {
    defaultProtocolFees: BigNumberish[];
    defaultSwapFees: BigNumberish[];
    pools: SyncSwapMulticall.PoolDataStruct[];
  };

  export type GetPoolsStructOutput = [
    defaultProtocolFees: bigint[],
    defaultSwapFees: bigint[],
    pools: SyncSwapMulticall.PoolDataStructOutput[]
  ] & {
    defaultProtocolFees: bigint[];
    defaultSwapFees: bigint[];
    pools: SyncSwapMulticall.PoolDataStructOutput[];
  };

  export type GetPoolStruct = {
    defaultSwapFees: BigNumberish[];
    defaultProtocolFees: BigNumberish[];
    pool: SyncSwapMulticall.PoolDataStruct;
  };

  export type GetPoolStructOutput = [
    defaultSwapFees: bigint[],
    defaultProtocolFees: bigint[],
    pool: SyncSwapMulticall.PoolDataStructOutput
  ] & {
    defaultSwapFees: bigint[];
    defaultProtocolFees: bigint[];
    pool: SyncSwapMulticall.PoolDataStructOutput;
  };

  export type RoutePoolStruct = {
    pool: AddressLike;
    tokenA: AddressLike;
    tokenB: AddressLike;
    poolType: BigNumberish;
    reserveA: BigNumberish;
    reserveB: BigNumberish;
    swapFeeAB: BigNumberish;
    swapFeeBA: BigNumberish;
  };

  export type RoutePoolStructOutput = [
    pool: string,
    tokenA: string,
    tokenB: string,
    poolType: bigint,
    reserveA: bigint,
    reserveB: bigint,
    swapFeeAB: bigint,
    swapFeeBA: bigint
  ] & {
    pool: string;
    tokenA: string;
    tokenB: string;
    poolType: bigint;
    reserveA: bigint;
    reserveB: bigint;
    swapFeeAB: bigint;
    swapFeeBA: bigint;
  };

  export type RoutePoolsStruct = {
    poolsDirect: SyncSwapMulticall.RoutePoolStruct[];
    poolsA: SyncSwapMulticall.RoutePoolStruct[];
    poolsB: SyncSwapMulticall.RoutePoolStruct[];
    poolsBase: SyncSwapMulticall.RoutePoolStruct[];
  };

  export type RoutePoolsStructOutput = [
    poolsDirect: SyncSwapMulticall.RoutePoolStructOutput[],
    poolsA: SyncSwapMulticall.RoutePoolStructOutput[],
    poolsB: SyncSwapMulticall.RoutePoolStructOutput[],
    poolsBase: SyncSwapMulticall.RoutePoolStructOutput[]
  ] & {
    poolsDirect: SyncSwapMulticall.RoutePoolStructOutput[];
    poolsA: SyncSwapMulticall.RoutePoolStructOutput[];
    poolsB: SyncSwapMulticall.RoutePoolStructOutput[];
    poolsBase: SyncSwapMulticall.RoutePoolStructOutput[];
  };

  export type TokenDataStruct = {
    name: string;
    symbol: string;
    decimals: BigNumberish;
    totalSupply: BigNumberish;
    balance: BigNumberish;
    allowance: BigNumberish;
    isPermit: boolean;
    price: BigNumberish;
  };

  export type TokenDataStructOutput = [
    name: string,
    symbol: string,
    decimals: bigint,
    totalSupply: bigint,
    balance: bigint,
    allowance: bigint,
    isPermit: boolean,
    price: bigint
  ] & {
    name: string;
    symbol: string;
    decimals: bigint;
    totalSupply: bigint;
    balance: bigint;
    allowance: bigint;
    isPermit: boolean;
    price: bigint;
  };
}

export interface MutlicallOldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getEnteredPools"
      | "getPool"
      | "getPoolByAddress"
      | "getPools"
      | "getRoutePools"
      | "isContract"
      | "quote"
      | "quoteLPWithRouteTokens"
      | "quoteTokens"
      | "quoteWithRouteTokens"
      | "tokenData"
      | "tokenMetadata"
      | "tokenPermitData"
      | "tryToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getEnteredPools",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolByAddress",
    values: [AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [AddressLike, AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoutePools",
    values: [
      AddressLike,
      AddressLike,
      AddressLike[],
      AddressLike[],
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteLPWithRouteTokens",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteTokens",
    values: [
      AddressLike,
      AddressLike,
      AddressLike[],
      BigNumberish[],
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteWithRouteTokens",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenData",
    values: [
      AddressLike,
      AddressLike,
      AddressLike[],
      AddressLike[],
      AddressLike,
      AddressLike,
      AddressLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPermitData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tryToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getEnteredPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoutePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isContract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteLPWithRouteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteWithRouteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPermitData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tryToken", data: BytesLike): Result;
}

export interface MutlicallOld extends BaseContract {
  connect(runner?: ContractRunner | null): MutlicallOld;
  waitForDeployment(): Promise<this>;

  interface: MutlicallOldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getEnteredPools: TypedContractMethod<
    [
      master: AddressLike,
      router: AddressLike,
      account: AddressLike,
      startIndex: BigNumberish,
      count: BigNumberish
    ],
    [
      [SyncSwapMulticall.GetPoolsStructOutput, bigint] & {
        data: SyncSwapMulticall.GetPoolsStructOutput;
        length: bigint;
      }
    ],
    "view"
  >;

  getPool: TypedContractMethod<
    [
      router: AddressLike,
      factory: AddressLike,
      master: AddressLike,
      account: AddressLike,
      tokenA: AddressLike,
      tokenB: AddressLike
    ],
    [SyncSwapMulticall.GetPoolStructOutput],
    "view"
  >;

  getPoolByAddress: TypedContractMethod<
    [
      pool: AddressLike,
      master: AddressLike,
      account: AddressLike,
      router: AddressLike
    ],
    [SyncSwapMulticall.GetPoolStructOutput],
    "view"
  >;

  getPools: TypedContractMethod<
    [
      master: AddressLike,
      router: AddressLike,
      account: AddressLike,
      pools: AddressLike[]
    ],
    [SyncSwapMulticall.GetPoolsStructOutput],
    "view"
  >;

  getRoutePools: TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      factories: AddressLike[],
      baseTokens: AddressLike[],
      master: AddressLike,
      account: AddressLike
    ],
    [SyncSwapMulticall.RoutePoolsStructOutput],
    "view"
  >;

  isContract: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  quote: TypedContractMethod<
    [
      classicFactory: AddressLike,
      stableFactory: AddressLike,
      tokenA: AddressLike,
      amountA: BigNumberish,
      tokenB: AddressLike
    ],
    [[bigint, bigint] & { bestAmountB: bigint; bestReserveB: bigint }],
    "view"
  >;

  quoteLPWithRouteTokens: TypedContractMethod<
    [
      classicFactory: AddressLike,
      stableFactory: AddressLike,
      pool: AddressLike,
      liquidity: BigNumberish,
      tokenTo: AddressLike,
      pathTokens: AddressLike[]
    ],
    [bigint],
    "view"
  >;

  quoteTokens: TypedContractMethod<
    [
      classicFactory: AddressLike,
      stableFactory: AddressLike,
      tokensIn: AddressLike[],
      amountsIn: BigNumberish[],
      tokenOut: AddressLike
    ],
    [bigint[]],
    "view"
  >;

  quoteWithRouteTokens: TypedContractMethod<
    [
      classicFactory: AddressLike,
      stableFactory: AddressLike,
      tokenA: AddressLike,
      amountA: BigNumberish,
      tokenB: AddressLike,
      routeTokens: AddressLike[]
    ],
    [bigint],
    "view"
  >;

  tokenData: TypedContractMethod<
    [
      account: AddressLike,
      spender: AddressLike,
      tokens: AddressLike[],
      factories: AddressLike[],
      tokenUSD: AddressLike,
      wETH: AddressLike,
      routeTokens: AddressLike[]
    ],
    [SyncSwapMulticall.TokenDataStructOutput[]],
    "view"
  >;

  tokenMetadata: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, string, string, boolean] & {
        decimals: bigint;
        symbol: string;
        name: string;
        isPermit: boolean;
      }
    ],
    "view"
  >;

  tokenPermitData: TypedContractMethod<
    [token: AddressLike, owner: AddressLike],
    [
      [string, bigint, string, bigint] & {
        domainSeparator: string;
        nonce: bigint;
        name: string;
        chainId: bigint;
      }
    ],
    "view"
  >;

  tryToken: TypedContractMethod<
    [token: AddressLike],
    [SyncSwapMulticall.TokenStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getEnteredPools"
  ): TypedContractMethod<
    [
      master: AddressLike,
      router: AddressLike,
      account: AddressLike,
      startIndex: BigNumberish,
      count: BigNumberish
    ],
    [
      [SyncSwapMulticall.GetPoolsStructOutput, bigint] & {
        data: SyncSwapMulticall.GetPoolsStructOutput;
        length: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<
    [
      router: AddressLike,
      factory: AddressLike,
      master: AddressLike,
      account: AddressLike,
      tokenA: AddressLike,
      tokenB: AddressLike
    ],
    [SyncSwapMulticall.GetPoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolByAddress"
  ): TypedContractMethod<
    [
      pool: AddressLike,
      master: AddressLike,
      account: AddressLike,
      router: AddressLike
    ],
    [SyncSwapMulticall.GetPoolStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPools"
  ): TypedContractMethod<
    [
      master: AddressLike,
      router: AddressLike,
      account: AddressLike,
      pools: AddressLike[]
    ],
    [SyncSwapMulticall.GetPoolsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoutePools"
  ): TypedContractMethod<
    [
      tokenA: AddressLike,
      tokenB: AddressLike,
      factories: AddressLike[],
      baseTokens: AddressLike[],
      master: AddressLike,
      account: AddressLike
    ],
    [SyncSwapMulticall.RoutePoolsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isContract"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [
      classicFactory: AddressLike,
      stableFactory: AddressLike,
      tokenA: AddressLike,
      amountA: BigNumberish,
      tokenB: AddressLike
    ],
    [[bigint, bigint] & { bestAmountB: bigint; bestReserveB: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteLPWithRouteTokens"
  ): TypedContractMethod<
    [
      classicFactory: AddressLike,
      stableFactory: AddressLike,
      pool: AddressLike,
      liquidity: BigNumberish,
      tokenTo: AddressLike,
      pathTokens: AddressLike[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteTokens"
  ): TypedContractMethod<
    [
      classicFactory: AddressLike,
      stableFactory: AddressLike,
      tokensIn: AddressLike[],
      amountsIn: BigNumberish[],
      tokenOut: AddressLike
    ],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteWithRouteTokens"
  ): TypedContractMethod<
    [
      classicFactory: AddressLike,
      stableFactory: AddressLike,
      tokenA: AddressLike,
      amountA: BigNumberish,
      tokenB: AddressLike,
      routeTokens: AddressLike[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenData"
  ): TypedContractMethod<
    [
      account: AddressLike,
      spender: AddressLike,
      tokens: AddressLike[],
      factories: AddressLike[],
      tokenUSD: AddressLike,
      wETH: AddressLike,
      routeTokens: AddressLike[]
    ],
    [SyncSwapMulticall.TokenDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenMetadata"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, string, string, boolean] & {
        decimals: bigint;
        symbol: string;
        name: string;
        isPermit: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenPermitData"
  ): TypedContractMethod<
    [token: AddressLike, owner: AddressLike],
    [
      [string, bigint, string, bigint] & {
        domainSeparator: string;
        nonce: bigint;
        name: string;
        chainId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tryToken"
  ): TypedContractMethod<
    [token: AddressLike],
    [SyncSwapMulticall.TokenStructOutput],
    "view"
  >;

  filters: {};
}
