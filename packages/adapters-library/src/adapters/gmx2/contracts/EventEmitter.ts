/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  EventLog,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EventUtils {
  export type AddressKeyValueStruct = { key: string; value: AddressLike };

  export type AddressKeyValueStructOutput = [key: string, value: string] & {
    key: string;
    value: string;
  };

  export type AddressArrayKeyValueStruct = {
    key: string;
    value: AddressLike[];
  };

  export type AddressArrayKeyValueStructOutput = [
    key: string,
    value: string[]
  ] & { key: string; value: string[] };

  export type AddressItemsStruct = {
    items: EventUtils.AddressKeyValueStruct[];
    arrayItems: EventUtils.AddressArrayKeyValueStruct[];
  };

  export type AddressItemsStructOutput = [
    items: EventUtils.AddressKeyValueStructOutput[],
    arrayItems: EventUtils.AddressArrayKeyValueStructOutput[]
  ] & {
    items: EventUtils.AddressKeyValueStructOutput[];
    arrayItems: EventUtils.AddressArrayKeyValueStructOutput[];
  };

  export type UintKeyValueStruct = { key: string; value: BigNumberish };

  export type UintKeyValueStructOutput = [key: string, value: bigint] & {
    key: string;
    value: bigint;
  };

  export type UintArrayKeyValueStruct = { key: string; value: BigNumberish[] };

  export type UintArrayKeyValueStructOutput = [key: string, value: bigint[]] & {
    key: string;
    value: bigint[];
  };

  export type UintItemsStruct = {
    items: EventUtils.UintKeyValueStruct[];
    arrayItems: EventUtils.UintArrayKeyValueStruct[];
  };

  export type UintItemsStructOutput = [
    items: EventUtils.UintKeyValueStructOutput[],
    arrayItems: EventUtils.UintArrayKeyValueStructOutput[]
  ] & {
    items: EventUtils.UintKeyValueStructOutput[];
    arrayItems: EventUtils.UintArrayKeyValueStructOutput[];
  };

  export type IntKeyValueStruct = { key: string; value: BigNumberish };

  export type IntKeyValueStructOutput = [key: string, value: bigint] & {
    key: string;
    value: bigint;
  };

  export type IntArrayKeyValueStruct = { key: string; value: BigNumberish[] };

  export type IntArrayKeyValueStructOutput = [key: string, value: bigint[]] & {
    key: string;
    value: bigint[];
  };

  export type IntItemsStruct = {
    items: EventUtils.IntKeyValueStruct[];
    arrayItems: EventUtils.IntArrayKeyValueStruct[];
  };

  export type IntItemsStructOutput = [
    items: EventUtils.IntKeyValueStructOutput[],
    arrayItems: EventUtils.IntArrayKeyValueStructOutput[]
  ] & {
    items: EventUtils.IntKeyValueStructOutput[];
    arrayItems: EventUtils.IntArrayKeyValueStructOutput[];
  };

  export type BoolKeyValueStruct = { key: string; value: boolean };

  export type BoolKeyValueStructOutput = [key: string, value: boolean] & {
    key: string;
    value: boolean;
  };

  export type BoolArrayKeyValueStruct = { key: string; value: boolean[] };

  export type BoolArrayKeyValueStructOutput = [
    key: string,
    value: boolean[]
  ] & { key: string; value: boolean[] };

  export type BoolItemsStruct = {
    items: EventUtils.BoolKeyValueStruct[];
    arrayItems: EventUtils.BoolArrayKeyValueStruct[];
  };

  export type BoolItemsStructOutput = [
    items: EventUtils.BoolKeyValueStructOutput[],
    arrayItems: EventUtils.BoolArrayKeyValueStructOutput[]
  ] & {
    items: EventUtils.BoolKeyValueStructOutput[];
    arrayItems: EventUtils.BoolArrayKeyValueStructOutput[];
  };

  export type Bytes32KeyValueStruct = { key: string; value: BytesLike };

  export type Bytes32KeyValueStructOutput = [key: string, value: string] & {
    key: string;
    value: string;
  };

  export type Bytes32ArrayKeyValueStruct = { key: string; value: BytesLike[] };

  export type Bytes32ArrayKeyValueStructOutput = [
    key: string,
    value: string[]
  ] & { key: string; value: string[] };

  export type Bytes32ItemsStruct = {
    items: EventUtils.Bytes32KeyValueStruct[];
    arrayItems: EventUtils.Bytes32ArrayKeyValueStruct[];
  };

  export type Bytes32ItemsStructOutput = [
    items: EventUtils.Bytes32KeyValueStructOutput[],
    arrayItems: EventUtils.Bytes32ArrayKeyValueStructOutput[]
  ] & {
    items: EventUtils.Bytes32KeyValueStructOutput[];
    arrayItems: EventUtils.Bytes32ArrayKeyValueStructOutput[];
  };

  export type BytesKeyValueStruct = { key: string; value: BytesLike };

  export type BytesKeyValueStructOutput = [key: string, value: string] & {
    key: string;
    value: string;
  };

  export type BytesArrayKeyValueStruct = { key: string; value: BytesLike[] };

  export type BytesArrayKeyValueStructOutput = [
    key: string,
    value: string[]
  ] & { key: string; value: string[] };

  export type BytesItemsStruct = {
    items: EventUtils.BytesKeyValueStruct[];
    arrayItems: EventUtils.BytesArrayKeyValueStruct[];
  };

  export type BytesItemsStructOutput = [
    items: EventUtils.BytesKeyValueStructOutput[],
    arrayItems: EventUtils.BytesArrayKeyValueStructOutput[]
  ] & {
    items: EventUtils.BytesKeyValueStructOutput[];
    arrayItems: EventUtils.BytesArrayKeyValueStructOutput[];
  };

  export type StringKeyValueStruct = { key: string; value: string };

  export type StringKeyValueStructOutput = [key: string, value: string] & {
    key: string;
    value: string;
  };

  export type StringArrayKeyValueStruct = { key: string; value: string[] };

  export type StringArrayKeyValueStructOutput = [
    key: string,
    value: string[]
  ] & { key: string; value: string[] };

  export type StringItemsStruct = {
    items: EventUtils.StringKeyValueStruct[];
    arrayItems: EventUtils.StringArrayKeyValueStruct[];
  };

  export type StringItemsStructOutput = [
    items: EventUtils.StringKeyValueStructOutput[],
    arrayItems: EventUtils.StringArrayKeyValueStructOutput[]
  ] & {
    items: EventUtils.StringKeyValueStructOutput[];
    arrayItems: EventUtils.StringArrayKeyValueStructOutput[];
  };

  export type EventLogDataStruct = {
    addressItems: EventUtils.AddressItemsStruct;
    uintItems: EventUtils.UintItemsStruct;
    intItems: EventUtils.IntItemsStruct;
    boolItems: EventUtils.BoolItemsStruct;
    bytes32Items: EventUtils.Bytes32ItemsStruct;
    bytesItems: EventUtils.BytesItemsStruct;
    stringItems: EventUtils.StringItemsStruct;
  };

  export type EventLogDataStructOutput = [
    addressItems: EventUtils.AddressItemsStructOutput,
    uintItems: EventUtils.UintItemsStructOutput,
    intItems: EventUtils.IntItemsStructOutput,
    boolItems: EventUtils.BoolItemsStructOutput,
    bytes32Items: EventUtils.Bytes32ItemsStructOutput,
    bytesItems: EventUtils.BytesItemsStructOutput,
    stringItems: EventUtils.StringItemsStructOutput
  ] & {
    addressItems: EventUtils.AddressItemsStructOutput;
    uintItems: EventUtils.UintItemsStructOutput;
    intItems: EventUtils.IntItemsStructOutput;
    boolItems: EventUtils.BoolItemsStructOutput;
    bytes32Items: EventUtils.Bytes32ItemsStructOutput;
    bytesItems: EventUtils.BytesItemsStructOutput;
    stringItems: EventUtils.StringItemsStructOutput;
  };
}

export interface EventEmitterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "emitDataLog1"
      | "emitDataLog2"
      | "emitDataLog3"
      | "emitDataLog4"
      | "emitEventLog"
      | "emitEventLog1"
      | "emitEventLog2"
      | "roleStore"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "EventLog" | "EventLog1" | "EventLog2"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "emitDataLog1",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDataLog2",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDataLog3",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDataLog4",
    values: [BytesLike, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitEventLog",
    values: [string, EventUtils.EventLogDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitEventLog1",
    values: [string, BytesLike, EventUtils.EventLogDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitEventLog2",
    values: [string, BytesLike, BytesLike, EventUtils.EventLogDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "emitDataLog1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDataLog2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDataLog3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDataLog4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitEventLog",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitEventLog1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitEventLog2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
}

export namespace EventLogEvent {
  export type InputTuple = [
    msgSender: AddressLike,
    eventName: string,
    eventNameHash: string,
    eventData: EventUtils.EventLogDataStruct
  ];
  export type OutputTuple = [
    msgSender: string,
    eventName: string,
    eventNameHash: string,
    eventData: EventUtils.EventLogDataStructOutput
  ];
  export interface OutputObject {
    msgSender: string;
    eventName: string;
    eventNameHash: string;
    eventData: EventUtils.EventLogDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventLog1Event {
  export type InputTuple = [
    msgSender: AddressLike,
    eventName: string,
    eventNameHash: string,
    topic1: BytesLike,
    eventData: EventUtils.EventLogDataStruct
  ];
  export type OutputTuple = [
    msgSender: string,
    eventName: string,
    eventNameHash: string,
    topic1: string,
    eventData: EventUtils.EventLogDataStructOutput
  ];
  export interface OutputObject {
    msgSender: string;
    eventName: string;
    eventNameHash: string;
    topic1: string;
    eventData: EventUtils.EventLogDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EventLog2Event {
  export type InputTuple = [
    msgSender: AddressLike,
    eventName: string,
    eventNameHash: string,
    topic1: BytesLike,
    topic2: BytesLike,
    eventData: EventUtils.EventLogDataStruct
  ];
  export type OutputTuple = [
    msgSender: string,
    eventName: string,
    eventNameHash: string,
    topic1: string,
    topic2: string,
    eventData: EventUtils.EventLogDataStructOutput
  ];
  export interface OutputObject {
    msgSender: string;
    eventName: string;
    eventNameHash: string;
    topic1: string;
    topic2: string;
    eventData: EventUtils.EventLogDataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventEmitter extends BaseContract {
  connect(runner?: ContractRunner | null): EventEmitter;
  waitForDeployment(): Promise<this>;

  interface: EventEmitterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  emitDataLog1: TypedContractMethod<
    [topic1: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  emitDataLog2: TypedContractMethod<
    [topic1: BytesLike, topic2: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  emitDataLog3: TypedContractMethod<
    [topic1: BytesLike, topic2: BytesLike, topic3: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  emitDataLog4: TypedContractMethod<
    [
      topic1: BytesLike,
      topic2: BytesLike,
      topic3: BytesLike,
      topic4: BytesLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  emitEventLog: TypedContractMethod<
    [eventName: string, eventData: EventUtils.EventLogDataStruct],
    [void],
    "nonpayable"
  >;

  emitEventLog1: TypedContractMethod<
    [
      eventName: string,
      topic1: BytesLike,
      eventData: EventUtils.EventLogDataStruct
    ],
    [void],
    "nonpayable"
  >;

  emitEventLog2: TypedContractMethod<
    [
      eventName: string,
      topic1: BytesLike,
      topic2: BytesLike,
      eventData: EventUtils.EventLogDataStruct
    ],
    [void],
    "nonpayable"
  >;

  roleStore: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "emitDataLog1"
  ): TypedContractMethod<
    [topic1: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitDataLog2"
  ): TypedContractMethod<
    [topic1: BytesLike, topic2: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitDataLog3"
  ): TypedContractMethod<
    [topic1: BytesLike, topic2: BytesLike, topic3: BytesLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitDataLog4"
  ): TypedContractMethod<
    [
      topic1: BytesLike,
      topic2: BytesLike,
      topic3: BytesLike,
      topic4: BytesLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitEventLog"
  ): TypedContractMethod<
    [eventName: string, eventData: EventUtils.EventLogDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitEventLog1"
  ): TypedContractMethod<
    [
      eventName: string,
      topic1: BytesLike,
      eventData: EventUtils.EventLogDataStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitEventLog2"
  ): TypedContractMethod<
    [
      eventName: string,
      topic1: BytesLike,
      topic2: BytesLike,
      eventData: EventUtils.EventLogDataStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleStore"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EventLog"
  ): TypedContractEvent<
    EventLogEvent.InputTuple,
    EventLogEvent.OutputTuple,
    EventLogEvent.OutputObject
  >;
  getEvent(
    key: "EventLog1"
  ): TypedContractEvent<
    EventLog1Event.InputTuple,
    EventLog1Event.OutputTuple,
    EventLog1Event.OutputObject
  >;
  getEvent(
    key: "EventLog2"
  ): TypedContractEvent<
    EventLog2Event.InputTuple,
    EventLog2Event.OutputTuple,
    EventLog2Event.OutputObject
  >;

  filters: {
    "EventLog(address,string,string,tuple)": TypedContractEvent<
      EventLogEvent.InputTuple,
      EventLogEvent.OutputTuple,
      EventLogEvent.OutputObject
    >;
    EventLog: TypedContractEvent<
      EventLogEvent.InputTuple,
      EventLogEvent.OutputTuple,
      EventLogEvent.OutputObject
    >;

    "EventLog1(address,string,string,bytes32,tuple)": TypedContractEvent<
      EventLog1Event.InputTuple,
      EventLog1Event.OutputTuple,
      EventLog1Event.OutputObject
    >;
    EventLog1: TypedContractEvent<
      EventLog1Event.InputTuple,
      EventLog1Event.OutputTuple,
      EventLog1Event.OutputObject
    >;

    "EventLog2(address,string,string,bytes32,bytes32,tuple)": TypedContractEvent<
      EventLog2Event.InputTuple,
      EventLog2Event.OutputTuple,
      EventLog2Event.OutputObject
    >;
    EventLog2: TypedContractEvent<
      EventLog2Event.InputTuple,
      EventLog2Event.OutputTuple,
      EventLog2Event.OutputObject
    >;
  };
}
