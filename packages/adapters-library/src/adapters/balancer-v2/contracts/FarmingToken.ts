/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FarmingTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit(uint256)"
      | "deposit(uint256,address)"
      | "deposit(uint256,address,bool)"
      | "withdraw(uint256)"
      | "withdraw(uint256,bool)"
      | "claim_rewards()"
      | "claim_rewards(address)"
      | "claim_rewards(address,address)"
      | "transferFrom"
      | "transfer"
      | "approve"
      | "permit"
      | "increaseAllowance"
      | "decreaseAllowance"
      | "user_checkpoint"
      | "set_rewards_receiver"
      | "kick"
      | "deposit_reward_token"
      | "add_reward"
      | "set_reward_distributor"
      | "killGauge"
      | "unkillGauge"
      | "claimed_reward"
      | "claimable_reward"
      | "claimable_tokens"
      | "integrate_checkpoint"
      | "future_epoch_time"
      | "inflation_rate"
      | "decimals"
      | "version"
      | "allowance"
      | "initialize"
      | "balanceOf"
      | "totalSupply"
      | "name"
      | "symbol"
      | "DOMAIN_SEPARATOR"
      | "nonces"
      | "lp_token"
      | "is_killed"
      | "reward_count"
      | "reward_data"
      | "rewards_receiver"
      | "reward_integral_for"
      | "working_balances"
      | "working_supply"
      | "integrate_inv_supply_of"
      | "integrate_checkpoint_of"
      | "integrate_fraction"
      | "period"
      | "reward_tokens"
      | "period_timestamp"
      | "integrate_inv_supply"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Withdraw"
      | "UpdateLiquidityLimit"
      | "Transfer"
      | "Approval"
      | "RewardDistributorUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address,bool)",
    values: [BigNumberish, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,bool)",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_rewards()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim_rewards(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_rewards(address,address)",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_checkpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "set_rewards_receiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "kick", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "deposit_reward_token",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_reward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reward_distributor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "killGauge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unkillGauge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimed_reward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_reward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable_tokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inflation_rate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "lp_token", values?: undefined): string;
  encodeFunctionData(functionFragment: "is_killed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reward_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward_data",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards_receiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reward_integral_for",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "working_balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "working_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply_of",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_checkpoint_of",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_fraction",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reward_tokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "period_timestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "integrate_inv_supply",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim_rewards()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim_rewards(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claim_rewards(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_rewards_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kick", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deposit_reward_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add_reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_reward_distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killGauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unkillGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimed_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimable_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflation_rate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lp_token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "is_killed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reward_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewards_receiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_integral_for",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "working_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "working_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_checkpoint_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_fraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reward_tokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "period_timestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "integrate_inv_supply",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [provider: AddressLike, value: BigNumberish];
  export type OutputTuple = [provider: string, value: bigint];
  export interface OutputObject {
    provider: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [provider: AddressLike, value: BigNumberish];
  export type OutputTuple = [provider: string, value: bigint];
  export interface OutputObject {
    provider: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLiquidityLimitEvent {
  export type InputTuple = [
    user: AddressLike,
    original_balance: BigNumberish,
    original_supply: BigNumberish,
    working_balance: BigNumberish,
    working_supply: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    original_balance: bigint,
    original_supply: bigint,
    working_balance: bigint,
    working_supply: bigint
  ];
  export interface OutputObject {
    user: string;
    original_balance: bigint;
    original_supply: bigint;
    working_balance: bigint;
    working_supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    _from: AddressLike,
    _to: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_from: string, _to: string, _value: bigint];
  export interface OutputObject {
    _from: string;
    _to: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _spender: AddressLike,
    _value: BigNumberish
  ];
  export type OutputTuple = [_owner: string, _spender: string, _value: bigint];
  export interface OutputObject {
    _owner: string;
    _spender: string;
    _value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardDistributorUpdatedEvent {
  export type InputTuple = [
    reward_token: AddressLike,
    distributor: AddressLike
  ];
  export type OutputTuple = [reward_token: string, distributor: string];
  export interface OutputObject {
    reward_token: string;
    distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FarmingToken extends BaseContract {
  connect(runner?: ContractRunner | null): FarmingToken;
  waitForDeployment(): Promise<this>;

  interface: FarmingTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  "deposit(uint256)": TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  "deposit(uint256,address)": TypedContractMethod<
    [_value: BigNumberish, _addr: AddressLike],
    [void],
    "nonpayable"
  >;

  "deposit(uint256,address,bool)": TypedContractMethod<
    [_value: BigNumberish, _addr: AddressLike, _claim_rewards: boolean],
    [void],
    "nonpayable"
  >;

  "withdraw(uint256)": TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  "withdraw(uint256,bool)": TypedContractMethod<
    [_value: BigNumberish, _claim_rewards: boolean],
    [void],
    "nonpayable"
  >;

  "claim_rewards()": TypedContractMethod<[], [void], "nonpayable">;

  "claim_rewards(address)": TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  "claim_rewards(address,address)": TypedContractMethod<
    [_addr: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [_spender: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  permit: TypedContractMethod<
    [
      _owner: AddressLike,
      _spender: AddressLike,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [_spender: AddressLike, _added_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  decreaseAllowance: TypedContractMethod<
    [_spender: AddressLike, _subtracted_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  user_checkpoint: TypedContractMethod<
    [addr: AddressLike],
    [boolean],
    "nonpayable"
  >;

  set_rewards_receiver: TypedContractMethod<
    [_receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  kick: TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;

  deposit_reward_token: TypedContractMethod<
    [_reward_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  add_reward: TypedContractMethod<
    [_reward_token: AddressLike, _distributor: AddressLike],
    [void],
    "nonpayable"
  >;

  set_reward_distributor: TypedContractMethod<
    [_reward_token: AddressLike, _distributor: AddressLike],
    [void],
    "nonpayable"
  >;

  killGauge: TypedContractMethod<[], [void], "nonpayable">;

  unkillGauge: TypedContractMethod<[], [void], "nonpayable">;

  claimed_reward: TypedContractMethod<
    [_addr: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;

  claimable_reward: TypedContractMethod<
    [_user: AddressLike, _reward_token: AddressLike],
    [bigint],
    "view"
  >;

  claimable_tokens: TypedContractMethod<
    [addr: AddressLike],
    [bigint],
    "nonpayable"
  >;

  integrate_checkpoint: TypedContractMethod<[], [bigint], "view">;

  future_epoch_time: TypedContractMethod<[], [bigint], "view">;

  inflation_rate: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  version: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_lp_token: AddressLike],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lp_token: TypedContractMethod<[], [string], "view">;

  is_killed: TypedContractMethod<[], [boolean], "view">;

  reward_count: TypedContractMethod<[], [bigint], "view">;

  reward_data: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        token: string;
        distributor: string;
        period_finish: bigint;
        rate: bigint;
        last_update: bigint;
        integral: bigint;
      }
    ],
    "view"
  >;

  rewards_receiver: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  reward_integral_for: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  working_balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  working_supply: TypedContractMethod<[], [bigint], "view">;

  integrate_inv_supply_of: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  integrate_checkpoint_of: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  integrate_fraction: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  period: TypedContractMethod<[], [bigint], "view">;

  reward_tokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  period_timestamp: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  integrate_inv_supply: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit(uint256)"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit(uint256,address)"
  ): TypedContractMethod<
    [_value: BigNumberish, _addr: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit(uint256,address,bool)"
  ): TypedContractMethod<
    [_value: BigNumberish, _addr: AddressLike, _claim_rewards: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw(uint256)"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw(uint256,bool)"
  ): TypedContractMethod<
    [_value: BigNumberish, _claim_rewards: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claim_rewards()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim_rewards(address)"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim_rewards(address,address)"
  ): TypedContractMethod<
    [_addr: AddressLike, _receiver: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_spender: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      _owner: AddressLike,
      _spender: AddressLike,
      _value: BigNumberish,
      _deadline: BigNumberish,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [_spender: AddressLike, _added_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [_spender: AddressLike, _subtracted_value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "user_checkpoint"
  ): TypedContractMethod<[addr: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "set_rewards_receiver"
  ): TypedContractMethod<[_receiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "kick"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit_reward_token"
  ): TypedContractMethod<
    [_reward_token: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "add_reward"
  ): TypedContractMethod<
    [_reward_token: AddressLike, _distributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "set_reward_distributor"
  ): TypedContractMethod<
    [_reward_token: AddressLike, _distributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "killGauge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unkillGauge"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimed_reward"
  ): TypedContractMethod<
    [_addr: AddressLike, _token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimable_reward"
  ): TypedContractMethod<
    [_user: AddressLike, _reward_token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimable_tokens"
  ): TypedContractMethod<[addr: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "integrate_checkpoint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_epoch_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "inflation_rate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_lp_token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lp_token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "is_killed"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "reward_count"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reward_data"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, bigint, bigint, bigint, bigint] & {
        token: string;
        distributor: string;
        period_finish: bigint;
        rate: bigint;
        last_update: bigint;
        integral: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewards_receiver"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "reward_integral_for"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "working_balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "working_supply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "integrate_inv_supply_of"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "integrate_checkpoint_of"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "integrate_fraction"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "period"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reward_tokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "period_timestamp"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "integrate_inv_supply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLiquidityLimit"
  ): TypedContractEvent<
    UpdateLiquidityLimitEvent.InputTuple,
    UpdateLiquidityLimitEvent.OutputTuple,
    UpdateLiquidityLimitEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "RewardDistributorUpdated"
  ): TypedContractEvent<
    RewardDistributorUpdatedEvent.InputTuple,
    RewardDistributorUpdatedEvent.OutputTuple,
    RewardDistributorUpdatedEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "UpdateLiquidityLimit(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      UpdateLiquidityLimitEvent.InputTuple,
      UpdateLiquidityLimitEvent.OutputTuple,
      UpdateLiquidityLimitEvent.OutputObject
    >;
    UpdateLiquidityLimit: TypedContractEvent<
      UpdateLiquidityLimitEvent.InputTuple,
      UpdateLiquidityLimitEvent.OutputTuple,
      UpdateLiquidityLimitEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "RewardDistributorUpdated(address,address)": TypedContractEvent<
      RewardDistributorUpdatedEvent.InputTuple,
      RewardDistributorUpdatedEvent.OutputTuple,
      RewardDistributorUpdatedEvent.OutputObject
    >;
    RewardDistributorUpdated: TypedContractEvent<
      RewardDistributorUpdatedEvent.InputTuple,
      RewardDistributorUpdatedEvent.OutputTuple,
      RewardDistributorUpdatedEvent.OutputObject
    >;
  };
}
