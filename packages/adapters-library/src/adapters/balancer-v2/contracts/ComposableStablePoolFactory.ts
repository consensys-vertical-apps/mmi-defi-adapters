/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ComposableStablePoolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "create"
      | "disable"
      | "getActionId"
      | "getAuthorizer"
      | "getCreationCode"
      | "getCreationCodeContracts"
      | "getPauseConfiguration"
      | "getPoolVersion"
      | "getProtocolFeePercentagesProvider"
      | "getVault"
      | "isDisabled"
      | "isPoolFromFactory"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "FactoryDisabled" | "PoolCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      string,
      AddressLike[],
      BigNumberish,
      AddressLike[],
      BigNumberish[],
      boolean,
      BigNumberish,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "disable", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActionId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationCode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreationCodeContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPauseConfiguration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeePercentagesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolFromFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreationCodeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPauseConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeePercentagesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDisabled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolFromFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace FactoryDisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [pool: AddressLike];
  export type OutputTuple = [pool: string];
  export interface OutputObject {
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ComposableStablePoolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ComposableStablePoolFactory;
  waitForDeployment(): Promise<this>;

  interface: ComposableStablePoolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  create: TypedContractMethod<
    [
      name: string,
      symbol: string,
      tokens: AddressLike[],
      amplificationParameter: BigNumberish,
      rateProviders: AddressLike[],
      tokenRateCacheDurations: BigNumberish[],
      exemptFromYieldProtocolFeeFlag: boolean,
      swapFeePercentage: BigNumberish,
      owner: AddressLike,
      salt: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  disable: TypedContractMethod<[], [void], "nonpayable">;

  getActionId: TypedContractMethod<[selector: BytesLike], [string], "view">;

  getAuthorizer: TypedContractMethod<[], [string], "view">;

  getCreationCode: TypedContractMethod<[], [string], "view">;

  getCreationCodeContracts: TypedContractMethod<
    [],
    [[string, string] & { contractA: string; contractB: string }],
    "view"
  >;

  getPauseConfiguration: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        pauseWindowDuration: bigint;
        bufferPeriodDuration: bigint;
      }
    ],
    "view"
  >;

  getPoolVersion: TypedContractMethod<[], [string], "view">;

  getProtocolFeePercentagesProvider: TypedContractMethod<[], [string], "view">;

  getVault: TypedContractMethod<[], [string], "view">;

  isDisabled: TypedContractMethod<[], [boolean], "view">;

  isPoolFromFactory: TypedContractMethod<
    [pool: AddressLike],
    [boolean],
    "view"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "create"
  ): TypedContractMethod<
    [
      name: string,
      symbol: string,
      tokens: AddressLike[],
      amplificationParameter: BigNumberish,
      rateProviders: AddressLike[],
      tokenRateCacheDurations: BigNumberish[],
      exemptFromYieldProtocolFeeFlag: boolean,
      swapFeePercentage: BigNumberish,
      owner: AddressLike,
      salt: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "disable"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActionId"
  ): TypedContractMethod<[selector: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getAuthorizer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCreationCode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getCreationCodeContracts"
  ): TypedContractMethod<
    [],
    [[string, string] & { contractA: string; contractB: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPauseConfiguration"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        pauseWindowDuration: bigint;
        bufferPeriodDuration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProtocolFeePercentagesProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isDisabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPoolFromFactory"
  ): TypedContractMethod<[pool: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FactoryDisabled"
  ): TypedContractEvent<
    FactoryDisabledEvent.InputTuple,
    FactoryDisabledEvent.OutputTuple,
    FactoryDisabledEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;

  filters: {
    "FactoryDisabled()": TypedContractEvent<
      FactoryDisabledEvent.InputTuple,
      FactoryDisabledEvent.OutputTuple,
      FactoryDisabledEvent.OutputObject
    >;
    FactoryDisabled: TypedContractEvent<
      FactoryDisabledEvent.InputTuple,
      FactoryDisabledEvent.OutputTuple,
      FactoryDisabledEvent.OutputObject
    >;

    "PoolCreated(address)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
  };
}
