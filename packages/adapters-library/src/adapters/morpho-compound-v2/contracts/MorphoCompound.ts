/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Types {
  export type MaxGasForMatchingStruct = {
    supply: BigNumberish;
    borrow: BigNumberish;
    withdraw: BigNumberish;
    repay: BigNumberish;
  };

  export type MaxGasForMatchingStructOutput = [
    supply: bigint,
    borrow: bigint,
    withdraw: bigint,
    repay: bigint
  ] & { supply: bigint; borrow: bigint; withdraw: bigint; repay: bigint };

  export type MarketParametersStruct = {
    reserveFactor: BigNumberish;
    p2pIndexCursor: BigNumberish;
  };

  export type MarketParametersStructOutput = [
    reserveFactor: bigint,
    p2pIndexCursor: bigint
  ] & { reserveFactor: bigint; p2pIndexCursor: bigint };
}

export interface MorphoCompoundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CTOKEN_DECIMALS"
      | "MAX_BASIS_POINTS"
      | "MAX_CLAIMABLE_RESERVE"
      | "WAD"
      | "borrow(address,uint256)"
      | "borrow(address,uint256,uint256)"
      | "borrowBalanceInOf"
      | "cEth"
      | "claimRewards"
      | "claimToTreasury"
      | "comptroller"
      | "createMarket"
      | "defaultMaxGasForMatching"
      | "deltas"
      | "dustThreshold"
      | "enteredMarkets"
      | "getAllMarkets"
      | "getEnteredMarkets"
      | "getHead"
      | "getNext"
      | "incentivesVault"
      | "initialize"
      | "interestRatesManager"
      | "lastBorrowBlock"
      | "lastPoolIndexes"
      | "liquidate"
      | "marketParameters"
      | "marketStatus"
      | "marketPauseStatus"
      | "marketsCreated"
      | "maxSortedUsers"
      | "owner"
      | "p2pBorrowIndex"
      | "p2pDisabled"
      | "p2pSupplyIndex"
      | "positionsManager"
      | "renounceOwnership"
      | "repay"
      | "rewardsManager"
      | "setDefaultMaxGasForMatching"
      | "setDustThreshold"
      | "setIncentivesVault"
      | "setInterestRates"
      | "setIsBorrowPaused"
      | "setIsClaimRewardsPaused"
      | "setIsDeprecated"
      | "setIsLiquidateBorrowPaused"
      | "setIsLiquidateCollateralPaused"
      | "setIsP2PDisabled"
      | "setIsPausedForAllMarkets"
      | "setIsRepayPaused"
      | "setIsSupplyPaused"
      | "setIsWithdrawPaused"
      | "setMaxSortedUsers"
      | "setP2PIndexCursor"
      | "setPositionsManager"
      | "setReserveFactor"
      | "setRewardsManager"
      | "setTreasuryVault"
      | "supply(address,address,uint256)"
      | "supply(address,address,uint256,uint256)"
      | "supplyBalanceInOf"
      | "transferOwnership"
      | "treasuryVault"
      | "updateP2PIndexes"
      | "userMembership"
      | "wEth"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "P2PIndexesUpdated"
      | "Borrowed"
      | "BorrowerPositionUpdated"
      | "Liquidated"
      | "P2PAmountsUpdated"
      | "P2PBorrowDeltaUpdated"
      | "P2PSupplyDeltaUpdated"
      | "Repaid"
      | "Supplied"
      | "SupplierPositionUpdated"
      | "Withdrawn"
      | "DefaultMaxGasForMatchingSet"
      | "DustThresholdSet"
      | "IncentivesVaultSet"
      | "InterestRatesSet"
      | "IsBorrowPausedSet"
      | "IsDeprecatedSet"
      | "IsLiquidateBorrowPausedSet"
      | "IsLiquidateCollateralPausedSet"
      | "IsRepayPausedSet"
      | "IsSupplyPausedSet"
      | "IsWithdrawPausedSet"
      | "MarketCreated"
      | "MaxSortedUsersSet"
      | "OwnershipTransferred"
      | "P2PIndexCursorSet"
      | "P2PStatusSet"
      | "PartialPauseStatusSet"
      | "PauseStatusSet"
      | "PositionsManagerSet"
      | "ReserveFactorSet"
      | "ReserveFeeClaimed"
      | "RewardsClaimed"
      | "RewardsClaimedAndTraded"
      | "RewardsManagerSet"
      | "TreasuryVaultSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CTOKEN_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CLAIMABLE_RESERVE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WAD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow(address,uint256)",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(address,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "cEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToTreasury",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [AddressLike, Types.MarketParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMaxGasForMatching",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deltas", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "dustThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enteredMarkets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnteredMarkets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getHead",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNext",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incentivesVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      Types.MaxGasForMatchingStruct,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRatesManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBorrowBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPoolIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketParameters",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketPauseStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketsCreated",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSortedUsers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "p2pBorrowIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "p2pDisabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "p2pSupplyIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "positionsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMaxGasForMatching",
    values: [Types.MaxGasForMatchingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setDustThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentivesVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestRates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsBorrowPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsClaimRewardsPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsDeprecated",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLiquidateBorrowPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLiquidateCollateralPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsP2PDisabled",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsPausedForAllMarkets",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsRepayPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSupplyPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWithdrawPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSortedUsers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setP2PIndexCursor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionsManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supply(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supply(address,address,uint256,uint256)",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateP2PIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userMembership",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "wEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CTOKEN_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CLAIMABLE_RESERVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WAD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultMaxGasForMatching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deltas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dustThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enteredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnteredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incentivesVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRatesManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBorrowBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPoolIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketPauseStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSortedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "p2pBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p2pDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p2pSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "positionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMaxGasForMatching",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDustThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentivesVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsClaimRewardsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLiquidateBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLiquidateCollateralPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsP2PDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsPausedForAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsRepayPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSupplyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWithdrawPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSortedUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setP2PIndexCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supply(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supply(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateP2PIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace P2PIndexesUpdatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _p2pSupplyIndex: BigNumberish,
    _p2pBorrowIndex: BigNumberish,
    _poolSupplyIndex: BigNumberish,
    _poolBorrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    _poolToken: string,
    _p2pSupplyIndex: bigint,
    _p2pBorrowIndex: bigint,
    _poolSupplyIndex: bigint,
    _poolBorrowIndex: bigint
  ];
  export interface OutputObject {
    _poolToken: string;
    _p2pSupplyIndex: bigint;
    _p2pBorrowIndex: bigint;
    _poolSupplyIndex: bigint;
    _poolBorrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowedEvent {
  export type InputTuple = [
    _borrower: AddressLike,
    _poolToken: AddressLike,
    _amount: BigNumberish,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _borrower: string,
    _poolToken: string,
    _amount: bigint,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _borrower: string;
    _poolToken: string;
    _amount: bigint;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowerPositionUpdatedEvent {
  export type InputTuple = [
    _user: AddressLike,
    _poolToken: AddressLike,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _poolToken: string,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _user: string;
    _poolToken: string;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [
    _liquidator: AddressLike,
    _liquidated: AddressLike,
    _poolTokenBorrowedAddress: AddressLike,
    _amountRepaid: BigNumberish,
    _poolTokenCollateralAddress: AddressLike,
    _amountSeized: BigNumberish
  ];
  export type OutputTuple = [
    _liquidator: string,
    _liquidated: string,
    _poolTokenBorrowedAddress: string,
    _amountRepaid: bigint,
    _poolTokenCollateralAddress: string,
    _amountSeized: bigint
  ];
  export interface OutputObject {
    _liquidator: string;
    _liquidated: string;
    _poolTokenBorrowedAddress: string;
    _amountRepaid: bigint;
    _poolTokenCollateralAddress: string;
    _amountSeized: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PAmountsUpdatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _p2pSupplyAmount: BigNumberish,
    _p2pBorrowAmount: BigNumberish
  ];
  export type OutputTuple = [
    _poolToken: string,
    _p2pSupplyAmount: bigint,
    _p2pBorrowAmount: bigint
  ];
  export interface OutputObject {
    _poolToken: string;
    _p2pSupplyAmount: bigint;
    _p2pBorrowAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PBorrowDeltaUpdatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _p2pBorrowDelta: BigNumberish
  ];
  export type OutputTuple = [_poolToken: string, _p2pBorrowDelta: bigint];
  export interface OutputObject {
    _poolToken: string;
    _p2pBorrowDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PSupplyDeltaUpdatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _p2pSupplyDelta: BigNumberish
  ];
  export type OutputTuple = [_poolToken: string, _p2pSupplyDelta: bigint];
  export interface OutputObject {
    _poolToken: string;
    _p2pSupplyDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [
    _repayer: AddressLike,
    _onBehalf: AddressLike,
    _poolToken: AddressLike,
    _amount: BigNumberish,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _repayer: string,
    _onBehalf: string,
    _poolToken: string,
    _amount: bigint,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _repayer: string;
    _onBehalf: string;
    _poolToken: string;
    _amount: bigint;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuppliedEvent {
  export type InputTuple = [
    _supplier: AddressLike,
    _onBehalf: AddressLike,
    _poolToken: AddressLike,
    _amount: BigNumberish,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _supplier: string,
    _onBehalf: string,
    _poolToken: string,
    _amount: bigint,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _supplier: string;
    _onBehalf: string;
    _poolToken: string;
    _amount: bigint;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplierPositionUpdatedEvent {
  export type InputTuple = [
    _user: AddressLike,
    _poolToken: AddressLike,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _user: string,
    _poolToken: string,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _user: string;
    _poolToken: string;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    _supplier: AddressLike,
    _receiver: AddressLike,
    _poolToken: AddressLike,
    _amount: BigNumberish,
    _balanceOnPool: BigNumberish,
    _balanceInP2P: BigNumberish
  ];
  export type OutputTuple = [
    _supplier: string,
    _receiver: string,
    _poolToken: string,
    _amount: bigint,
    _balanceOnPool: bigint,
    _balanceInP2P: bigint
  ];
  export interface OutputObject {
    _supplier: string;
    _receiver: string;
    _poolToken: string;
    _amount: bigint;
    _balanceOnPool: bigint;
    _balanceInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultMaxGasForMatchingSetEvent {
  export type InputTuple = [
    _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct
  ];
  export type OutputTuple = [
    _defaultMaxGasForMatching: Types.MaxGasForMatchingStructOutput
  ];
  export interface OutputObject {
    _defaultMaxGasForMatching: Types.MaxGasForMatchingStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DustThresholdSetEvent {
  export type InputTuple = [_dustThreshold: BigNumberish];
  export type OutputTuple = [_dustThreshold: bigint];
  export interface OutputObject {
    _dustThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IncentivesVaultSetEvent {
  export type InputTuple = [_newIncentivesVaultAddress: AddressLike];
  export type OutputTuple = [_newIncentivesVaultAddress: string];
  export interface OutputObject {
    _newIncentivesVaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestRatesSetEvent {
  export type InputTuple = [_interestRatesManager: AddressLike];
  export type OutputTuple = [_interestRatesManager: string];
  export interface OutputObject {
    _interestRatesManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsBorrowPausedSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isPaused: boolean];
  export type OutputTuple = [_poolToken: string, _isPaused: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsDeprecatedSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isDeprecated: boolean];
  export type OutputTuple = [_poolToken: string, _isDeprecated: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isDeprecated: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsLiquidateBorrowPausedSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isPaused: boolean];
  export type OutputTuple = [_poolToken: string, _isPaused: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsLiquidateCollateralPausedSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isPaused: boolean];
  export type OutputTuple = [_poolToken: string, _isPaused: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsRepayPausedSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isPaused: boolean];
  export type OutputTuple = [_poolToken: string, _isPaused: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsSupplyPausedSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isPaused: boolean];
  export type OutputTuple = [_poolToken: string, _isPaused: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsWithdrawPausedSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isPaused: boolean];
  export type OutputTuple = [_poolToken: string, _isPaused: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _reserveFactor: BigNumberish,
    _p2pIndexCursor: BigNumberish
  ];
  export type OutputTuple = [
    _poolToken: string,
    _reserveFactor: bigint,
    _p2pIndexCursor: bigint
  ];
  export interface OutputObject {
    _poolToken: string;
    _reserveFactor: bigint;
    _p2pIndexCursor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxSortedUsersSetEvent {
  export type InputTuple = [_newValue: BigNumberish];
  export type OutputTuple = [_newValue: bigint];
  export interface OutputObject {
    _newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PIndexCursorSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _newValue: BigNumberish];
  export type OutputTuple = [_poolToken: string, _newValue: bigint];
  export interface OutputObject {
    _poolToken: string;
    _newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PStatusSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _isP2PDisabled: boolean];
  export type OutputTuple = [_poolToken: string, _isP2PDisabled: boolean];
  export interface OutputObject {
    _poolToken: string;
    _isP2PDisabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PartialPauseStatusSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _newStatus: boolean];
  export type OutputTuple = [_poolToken: string, _newStatus: boolean];
  export interface OutputObject {
    _poolToken: string;
    _newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseStatusSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _newStatus: boolean];
  export type OutputTuple = [_poolToken: string, _newStatus: boolean];
  export interface OutputObject {
    _poolToken: string;
    _newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionsManagerSetEvent {
  export type InputTuple = [_positionsManager: AddressLike];
  export type OutputTuple = [_positionsManager: string];
  export interface OutputObject {
    _positionsManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFactorSetEvent {
  export type InputTuple = [_poolToken: AddressLike, _newValue: BigNumberish];
  export type OutputTuple = [_poolToken: string, _newValue: bigint];
  export interface OutputObject {
    _poolToken: string;
    _newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFeeClaimedEvent {
  export type InputTuple = [
    _poolToken: AddressLike,
    _amountClaimed: BigNumberish
  ];
  export type OutputTuple = [_poolToken: string, _amountClaimed: bigint];
  export interface OutputObject {
    _poolToken: string;
    _amountClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [_user: AddressLike, _amountClaimed: BigNumberish];
  export type OutputTuple = [_user: string, _amountClaimed: bigint];
  export interface OutputObject {
    _user: string;
    _amountClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedAndTradedEvent {
  export type InputTuple = [_user: AddressLike, _amountSent: BigNumberish];
  export type OutputTuple = [_user: string, _amountSent: bigint];
  export interface OutputObject {
    _user: string;
    _amountSent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsManagerSetEvent {
  export type InputTuple = [_newRewardsManagerAddress: AddressLike];
  export type OutputTuple = [_newRewardsManagerAddress: string];
  export interface OutputObject {
    _newRewardsManagerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryVaultSetEvent {
  export type InputTuple = [_newTreasuryVaultAddress: AddressLike];
  export type OutputTuple = [_newTreasuryVaultAddress: string];
  export interface OutputObject {
    _newTreasuryVaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MorphoCompound extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoCompound;
  waitForDeployment(): Promise<this>;

  interface: MorphoCompoundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CTOKEN_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  MAX_BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  MAX_CLAIMABLE_RESERVE: TypedContractMethod<[], [bigint], "view">;

  WAD: TypedContractMethod<[], [bigint], "view">;

  "borrow(address,uint256)": TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "borrow(address,uint256,uint256)": TypedContractMethod<
    [
      _poolToken: AddressLike,
      _amount: BigNumberish,
      _maxGasForMatching: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  borrowBalanceInOf: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { inP2P: bigint; onPool: bigint }],
    "view"
  >;

  cEth: TypedContractMethod<[], [string], "view">;

  claimRewards: TypedContractMethod<
    [_cTokenAddresses: AddressLike[], _tradeForMorphoToken: boolean],
    [void],
    "nonpayable"
  >;

  claimToTreasury: TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  comptroller: TypedContractMethod<[], [string], "view">;

  createMarket: TypedContractMethod<
    [_poolToken: AddressLike, _marketParams: Types.MarketParametersStruct],
    [void],
    "nonpayable"
  >;

  defaultMaxGasForMatching: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        supply: bigint;
        borrow: bigint;
        withdraw: bigint;
        repay: bigint;
      }
    ],
    "view"
  >;

  deltas: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyDelta: bigint;
        p2pBorrowDelta: bigint;
        p2pSupplyAmount: bigint;
        p2pBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  dustThreshold: TypedContractMethod<[], [bigint], "view">;

  enteredMarkets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getAllMarkets: TypedContractMethod<[], [string[]], "view">;

  getEnteredMarkets: TypedContractMethod<
    [_user: AddressLike],
    [string[]],
    "view"
  >;

  getHead: TypedContractMethod<
    [_poolToken: AddressLike, _positionType: BigNumberish],
    [string],
    "view"
  >;

  getNext: TypedContractMethod<
    [_poolToken: AddressLike, _positionType: BigNumberish, _user: AddressLike],
    [string],
    "view"
  >;

  incentivesVault: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      _positionsManager: AddressLike,
      _interestRatesManager: AddressLike,
      _comptroller: AddressLike,
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      _dustThreshold: BigNumberish,
      _maxSortedUsers: BigNumberish,
      _cEth: AddressLike,
      _wEth: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  interestRatesManager: TypedContractMethod<[], [string], "view">;

  lastBorrowBlock: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastPoolIndexes: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastUpdateBlockNumber: bigint;
        lastSupplyPoolIndex: bigint;
        lastBorrowPoolIndex: bigint;
      }
    ],
    "view"
  >;

  liquidate: TypedContractMethod<
    [
      _poolTokenBorrowedAddress: AddressLike,
      _poolTokenCollateralAddress: AddressLike,
      _borrower: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  marketParameters: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { reserveFactor: bigint; p2pIndexCursor: bigint }],
    "view"
  >;

  marketStatus: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, boolean] & {
        isCreated: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
      }
    ],
    "view"
  >;

  marketPauseStatus: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, boolean, boolean, boolean, boolean, boolean] & {
        isSupplyPaused: boolean;
        isBorrowPaused: boolean;
        isWithdrawPaused: boolean;
        isRepayPaused: boolean;
        isLiquidateCollateralPaused: boolean;
        isLiquidateBorrowPaused: boolean;
        isDeprecated: boolean;
      }
    ],
    "view"
  >;

  marketsCreated: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  maxSortedUsers: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  p2pBorrowIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  p2pDisabled: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  p2pSupplyIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  positionsManager: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<
    [_poolToken: AddressLike, _onBehalf: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  rewardsManager: TypedContractMethod<[], [string], "view">;

  setDefaultMaxGasForMatching: TypedContractMethod<
    [_defaultMaxGasForMatching: Types.MaxGasForMatchingStruct],
    [void],
    "nonpayable"
  >;

  setDustThreshold: TypedContractMethod<
    [_dustThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIncentivesVault: TypedContractMethod<
    [_incentivesVault: AddressLike],
    [void],
    "nonpayable"
  >;

  setInterestRates: TypedContractMethod<
    [_interestRatesManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setIsBorrowPaused: TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsClaimRewardsPaused: TypedContractMethod<
    [_isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsDeprecated: TypedContractMethod<
    [_poolToken: AddressLike, _isDeprecated: boolean],
    [void],
    "nonpayable"
  >;

  setIsLiquidateBorrowPaused: TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsLiquidateCollateralPaused: TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsP2PDisabled: TypedContractMethod<
    [_poolToken: AddressLike, _isP2PDisabled: boolean],
    [void],
    "nonpayable"
  >;

  setIsPausedForAllMarkets: TypedContractMethod<
    [_isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsRepayPaused: TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsSupplyPaused: TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsWithdrawPaused: TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setMaxSortedUsers: TypedContractMethod<
    [_newMaxSortedUsers: BigNumberish],
    [void],
    "nonpayable"
  >;

  setP2PIndexCursor: TypedContractMethod<
    [_poolToken: AddressLike, _p2pIndexCursor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPositionsManager: TypedContractMethod<
    [_positionsManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setReserveFactor: TypedContractMethod<
    [_poolToken: AddressLike, _newReserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardsManager: TypedContractMethod<
    [_rewardsManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryVault: TypedContractMethod<
    [_treasuryVault: AddressLike],
    [void],
    "nonpayable"
  >;

  "supply(address,address,uint256)": TypedContractMethod<
    [_poolToken: AddressLike, _onBehalf: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "supply(address,address,uint256,uint256)": TypedContractMethod<
    [
      _poolToken: AddressLike,
      _onBehalf: AddressLike,
      _amount: BigNumberish,
      _maxGasForMatching: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supplyBalanceInOf: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { inP2P: bigint; onPool: bigint }],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryVault: TypedContractMethod<[], [string], "view">;

  updateP2PIndexes: TypedContractMethod<
    [_poolToken: AddressLike],
    [void],
    "nonpayable"
  >;

  userMembership: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  wEth: TypedContractMethod<[], [string], "view">;

  withdraw: TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CTOKEN_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_CLAIMABLE_RESERVE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WAD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrow(address,uint256)"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow(address,uint256,uint256)"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _amount: BigNumberish,
      _maxGasForMatching: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowBalanceInOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { inP2P: bigint; onPool: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "cEth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [_cTokenAddresses: AddressLike[], _tradeForMorphoToken: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimToTreasury"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "comptroller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _marketParams: Types.MarketParametersStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultMaxGasForMatching"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        supply: bigint;
        borrow: bigint;
        withdraw: bigint;
        repay: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "deltas"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyDelta: bigint;
        p2pBorrowDelta: bigint;
        p2pSupplyAmount: bigint;
        p2pBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "dustThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "enteredMarkets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEnteredMarkets"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getHead"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _positionType: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNext"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _positionType: BigNumberish, _user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "incentivesVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _positionsManager: AddressLike,
      _interestRatesManager: AddressLike,
      _comptroller: AddressLike,
      _defaultMaxGasForMatching: Types.MaxGasForMatchingStruct,
      _dustThreshold: BigNumberish,
      _maxSortedUsers: BigNumberish,
      _cEth: AddressLike,
      _wEth: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "interestRatesManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lastBorrowBlock"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastPoolIndexes"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        lastUpdateBlockNumber: bigint;
        lastSupplyPoolIndex: bigint;
        lastBorrowPoolIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      _poolTokenBorrowedAddress: AddressLike,
      _poolTokenCollateralAddress: AddressLike,
      _borrower: AddressLike,
      _amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketParameters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { reserveFactor: bigint; p2pIndexCursor: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketStatus"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, boolean] & {
        isCreated: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketPauseStatus"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, boolean, boolean, boolean, boolean, boolean, boolean] & {
        isSupplyPaused: boolean;
        isBorrowPaused: boolean;
        isWithdrawPaused: boolean;
        isRepayPaused: boolean;
        isLiquidateCollateralPaused: boolean;
        isLiquidateBorrowPaused: boolean;
        isDeprecated: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketsCreated"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "maxSortedUsers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "p2pBorrowIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "p2pDisabled"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "p2pSupplyIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "positionsManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _onBehalf: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardsManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDefaultMaxGasForMatching"
  ): TypedContractMethod<
    [_defaultMaxGasForMatching: Types.MaxGasForMatchingStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDustThreshold"
  ): TypedContractMethod<[_dustThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIncentivesVault"
  ): TypedContractMethod<[_incentivesVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setInterestRates"
  ): TypedContractMethod<
    [_interestRatesManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsBorrowPaused"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsClaimRewardsPaused"
  ): TypedContractMethod<[_isPaused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsDeprecated"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _isDeprecated: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsLiquidateBorrowPaused"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsLiquidateCollateralPaused"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsP2PDisabled"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _isP2PDisabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsPausedForAllMarkets"
  ): TypedContractMethod<[_isPaused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsRepayPaused"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsSupplyPaused"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsWithdrawPaused"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxSortedUsers"
  ): TypedContractMethod<
    [_newMaxSortedUsers: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setP2PIndexCursor"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _p2pIndexCursor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPositionsManager"
  ): TypedContractMethod<
    [_positionsManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReserveFactor"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _newReserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardsManager"
  ): TypedContractMethod<[_rewardsManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryVault"
  ): TypedContractMethod<[_treasuryVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supply(address,address,uint256)"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _onBehalf: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supply(address,address,uint256,uint256)"
  ): TypedContractMethod<
    [
      _poolToken: AddressLike,
      _onBehalf: AddressLike,
      _amount: BigNumberish,
      _maxGasForMatching: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyBalanceInOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [[bigint, bigint] & { inP2P: bigint; onPool: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateP2PIndexes"
  ): TypedContractMethod<[_poolToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userMembership"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "wEth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "P2PIndexesUpdated"
  ): TypedContractEvent<
    P2PIndexesUpdatedEvent.InputTuple,
    P2PIndexesUpdatedEvent.OutputTuple,
    P2PIndexesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "BorrowerPositionUpdated"
  ): TypedContractEvent<
    BorrowerPositionUpdatedEvent.InputTuple,
    BorrowerPositionUpdatedEvent.OutputTuple,
    BorrowerPositionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PAmountsUpdated"
  ): TypedContractEvent<
    P2PAmountsUpdatedEvent.InputTuple,
    P2PAmountsUpdatedEvent.OutputTuple,
    P2PAmountsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PBorrowDeltaUpdated"
  ): TypedContractEvent<
    P2PBorrowDeltaUpdatedEvent.InputTuple,
    P2PBorrowDeltaUpdatedEvent.OutputTuple,
    P2PBorrowDeltaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PSupplyDeltaUpdated"
  ): TypedContractEvent<
    P2PSupplyDeltaUpdatedEvent.InputTuple,
    P2PSupplyDeltaUpdatedEvent.OutputTuple,
    P2PSupplyDeltaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;
  getEvent(
    key: "Supplied"
  ): TypedContractEvent<
    SuppliedEvent.InputTuple,
    SuppliedEvent.OutputTuple,
    SuppliedEvent.OutputObject
  >;
  getEvent(
    key: "SupplierPositionUpdated"
  ): TypedContractEvent<
    SupplierPositionUpdatedEvent.InputTuple,
    SupplierPositionUpdatedEvent.OutputTuple,
    SupplierPositionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "DefaultMaxGasForMatchingSet"
  ): TypedContractEvent<
    DefaultMaxGasForMatchingSetEvent.InputTuple,
    DefaultMaxGasForMatchingSetEvent.OutputTuple,
    DefaultMaxGasForMatchingSetEvent.OutputObject
  >;
  getEvent(
    key: "DustThresholdSet"
  ): TypedContractEvent<
    DustThresholdSetEvent.InputTuple,
    DustThresholdSetEvent.OutputTuple,
    DustThresholdSetEvent.OutputObject
  >;
  getEvent(
    key: "IncentivesVaultSet"
  ): TypedContractEvent<
    IncentivesVaultSetEvent.InputTuple,
    IncentivesVaultSetEvent.OutputTuple,
    IncentivesVaultSetEvent.OutputObject
  >;
  getEvent(
    key: "InterestRatesSet"
  ): TypedContractEvent<
    InterestRatesSetEvent.InputTuple,
    InterestRatesSetEvent.OutputTuple,
    InterestRatesSetEvent.OutputObject
  >;
  getEvent(
    key: "IsBorrowPausedSet"
  ): TypedContractEvent<
    IsBorrowPausedSetEvent.InputTuple,
    IsBorrowPausedSetEvent.OutputTuple,
    IsBorrowPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsDeprecatedSet"
  ): TypedContractEvent<
    IsDeprecatedSetEvent.InputTuple,
    IsDeprecatedSetEvent.OutputTuple,
    IsDeprecatedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsLiquidateBorrowPausedSet"
  ): TypedContractEvent<
    IsLiquidateBorrowPausedSetEvent.InputTuple,
    IsLiquidateBorrowPausedSetEvent.OutputTuple,
    IsLiquidateBorrowPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsLiquidateCollateralPausedSet"
  ): TypedContractEvent<
    IsLiquidateCollateralPausedSetEvent.InputTuple,
    IsLiquidateCollateralPausedSetEvent.OutputTuple,
    IsLiquidateCollateralPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsRepayPausedSet"
  ): TypedContractEvent<
    IsRepayPausedSetEvent.InputTuple,
    IsRepayPausedSetEvent.OutputTuple,
    IsRepayPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsSupplyPausedSet"
  ): TypedContractEvent<
    IsSupplyPausedSetEvent.InputTuple,
    IsSupplyPausedSetEvent.OutputTuple,
    IsSupplyPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsWithdrawPausedSet"
  ): TypedContractEvent<
    IsWithdrawPausedSetEvent.InputTuple,
    IsWithdrawPausedSetEvent.OutputTuple,
    IsWithdrawPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxSortedUsersSet"
  ): TypedContractEvent<
    MaxSortedUsersSetEvent.InputTuple,
    MaxSortedUsersSetEvent.OutputTuple,
    MaxSortedUsersSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "P2PIndexCursorSet"
  ): TypedContractEvent<
    P2PIndexCursorSetEvent.InputTuple,
    P2PIndexCursorSetEvent.OutputTuple,
    P2PIndexCursorSetEvent.OutputObject
  >;
  getEvent(
    key: "P2PStatusSet"
  ): TypedContractEvent<
    P2PStatusSetEvent.InputTuple,
    P2PStatusSetEvent.OutputTuple,
    P2PStatusSetEvent.OutputObject
  >;
  getEvent(
    key: "PartialPauseStatusSet"
  ): TypedContractEvent<
    PartialPauseStatusSetEvent.InputTuple,
    PartialPauseStatusSetEvent.OutputTuple,
    PartialPauseStatusSetEvent.OutputObject
  >;
  getEvent(
    key: "PauseStatusSet"
  ): TypedContractEvent<
    PauseStatusSetEvent.InputTuple,
    PauseStatusSetEvent.OutputTuple,
    PauseStatusSetEvent.OutputObject
  >;
  getEvent(
    key: "PositionsManagerSet"
  ): TypedContractEvent<
    PositionsManagerSetEvent.InputTuple,
    PositionsManagerSetEvent.OutputTuple,
    PositionsManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFactorSet"
  ): TypedContractEvent<
    ReserveFactorSetEvent.InputTuple,
    ReserveFactorSetEvent.OutputTuple,
    ReserveFactorSetEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFeeClaimed"
  ): TypedContractEvent<
    ReserveFeeClaimedEvent.InputTuple,
    ReserveFeeClaimedEvent.OutputTuple,
    ReserveFeeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimedAndTraded"
  ): TypedContractEvent<
    RewardsClaimedAndTradedEvent.InputTuple,
    RewardsClaimedAndTradedEvent.OutputTuple,
    RewardsClaimedAndTradedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsManagerSet"
  ): TypedContractEvent<
    RewardsManagerSetEvent.InputTuple,
    RewardsManagerSetEvent.OutputTuple,
    RewardsManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryVaultSet"
  ): TypedContractEvent<
    TreasuryVaultSetEvent.InputTuple,
    TreasuryVaultSetEvent.OutputTuple,
    TreasuryVaultSetEvent.OutputObject
  >;

  filters: {
    "P2PIndexesUpdated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      P2PIndexesUpdatedEvent.InputTuple,
      P2PIndexesUpdatedEvent.OutputTuple,
      P2PIndexesUpdatedEvent.OutputObject
    >;
    P2PIndexesUpdated: TypedContractEvent<
      P2PIndexesUpdatedEvent.InputTuple,
      P2PIndexesUpdatedEvent.OutputTuple,
      P2PIndexesUpdatedEvent.OutputObject
    >;

    "Borrowed(address,address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "BorrowerPositionUpdated(address,address,uint256,uint256)": TypedContractEvent<
      BorrowerPositionUpdatedEvent.InputTuple,
      BorrowerPositionUpdatedEvent.OutputTuple,
      BorrowerPositionUpdatedEvent.OutputObject
    >;
    BorrowerPositionUpdated: TypedContractEvent<
      BorrowerPositionUpdatedEvent.InputTuple,
      BorrowerPositionUpdatedEvent.OutputTuple,
      BorrowerPositionUpdatedEvent.OutputObject
    >;

    "Liquidated(address,address,address,uint256,address,uint256)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "P2PAmountsUpdated(address,uint256,uint256)": TypedContractEvent<
      P2PAmountsUpdatedEvent.InputTuple,
      P2PAmountsUpdatedEvent.OutputTuple,
      P2PAmountsUpdatedEvent.OutputObject
    >;
    P2PAmountsUpdated: TypedContractEvent<
      P2PAmountsUpdatedEvent.InputTuple,
      P2PAmountsUpdatedEvent.OutputTuple,
      P2PAmountsUpdatedEvent.OutputObject
    >;

    "P2PBorrowDeltaUpdated(address,uint256)": TypedContractEvent<
      P2PBorrowDeltaUpdatedEvent.InputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputObject
    >;
    P2PBorrowDeltaUpdated: TypedContractEvent<
      P2PBorrowDeltaUpdatedEvent.InputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputObject
    >;

    "P2PSupplyDeltaUpdated(address,uint256)": TypedContractEvent<
      P2PSupplyDeltaUpdatedEvent.InputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputObject
    >;
    P2PSupplyDeltaUpdated: TypedContractEvent<
      P2PSupplyDeltaUpdatedEvent.InputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputObject
    >;

    "Repaid(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;

    "Supplied(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      SuppliedEvent.InputTuple,
      SuppliedEvent.OutputTuple,
      SuppliedEvent.OutputObject
    >;
    Supplied: TypedContractEvent<
      SuppliedEvent.InputTuple,
      SuppliedEvent.OutputTuple,
      SuppliedEvent.OutputObject
    >;

    "SupplierPositionUpdated(address,address,uint256,uint256)": TypedContractEvent<
      SupplierPositionUpdatedEvent.InputTuple,
      SupplierPositionUpdatedEvent.OutputTuple,
      SupplierPositionUpdatedEvent.OutputObject
    >;
    SupplierPositionUpdated: TypedContractEvent<
      SupplierPositionUpdatedEvent.InputTuple,
      SupplierPositionUpdatedEvent.OutputTuple,
      SupplierPositionUpdatedEvent.OutputObject
    >;

    "Withdrawn(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;

    "DefaultMaxGasForMatchingSet(tuple)": TypedContractEvent<
      DefaultMaxGasForMatchingSetEvent.InputTuple,
      DefaultMaxGasForMatchingSetEvent.OutputTuple,
      DefaultMaxGasForMatchingSetEvent.OutputObject
    >;
    DefaultMaxGasForMatchingSet: TypedContractEvent<
      DefaultMaxGasForMatchingSetEvent.InputTuple,
      DefaultMaxGasForMatchingSetEvent.OutputTuple,
      DefaultMaxGasForMatchingSetEvent.OutputObject
    >;

    "DustThresholdSet(uint256)": TypedContractEvent<
      DustThresholdSetEvent.InputTuple,
      DustThresholdSetEvent.OutputTuple,
      DustThresholdSetEvent.OutputObject
    >;
    DustThresholdSet: TypedContractEvent<
      DustThresholdSetEvent.InputTuple,
      DustThresholdSetEvent.OutputTuple,
      DustThresholdSetEvent.OutputObject
    >;

    "IncentivesVaultSet(address)": TypedContractEvent<
      IncentivesVaultSetEvent.InputTuple,
      IncentivesVaultSetEvent.OutputTuple,
      IncentivesVaultSetEvent.OutputObject
    >;
    IncentivesVaultSet: TypedContractEvent<
      IncentivesVaultSetEvent.InputTuple,
      IncentivesVaultSetEvent.OutputTuple,
      IncentivesVaultSetEvent.OutputObject
    >;

    "InterestRatesSet(address)": TypedContractEvent<
      InterestRatesSetEvent.InputTuple,
      InterestRatesSetEvent.OutputTuple,
      InterestRatesSetEvent.OutputObject
    >;
    InterestRatesSet: TypedContractEvent<
      InterestRatesSetEvent.InputTuple,
      InterestRatesSetEvent.OutputTuple,
      InterestRatesSetEvent.OutputObject
    >;

    "IsBorrowPausedSet(address,bool)": TypedContractEvent<
      IsBorrowPausedSetEvent.InputTuple,
      IsBorrowPausedSetEvent.OutputTuple,
      IsBorrowPausedSetEvent.OutputObject
    >;
    IsBorrowPausedSet: TypedContractEvent<
      IsBorrowPausedSetEvent.InputTuple,
      IsBorrowPausedSetEvent.OutputTuple,
      IsBorrowPausedSetEvent.OutputObject
    >;

    "IsDeprecatedSet(address,bool)": TypedContractEvent<
      IsDeprecatedSetEvent.InputTuple,
      IsDeprecatedSetEvent.OutputTuple,
      IsDeprecatedSetEvent.OutputObject
    >;
    IsDeprecatedSet: TypedContractEvent<
      IsDeprecatedSetEvent.InputTuple,
      IsDeprecatedSetEvent.OutputTuple,
      IsDeprecatedSetEvent.OutputObject
    >;

    "IsLiquidateBorrowPausedSet(address,bool)": TypedContractEvent<
      IsLiquidateBorrowPausedSetEvent.InputTuple,
      IsLiquidateBorrowPausedSetEvent.OutputTuple,
      IsLiquidateBorrowPausedSetEvent.OutputObject
    >;
    IsLiquidateBorrowPausedSet: TypedContractEvent<
      IsLiquidateBorrowPausedSetEvent.InputTuple,
      IsLiquidateBorrowPausedSetEvent.OutputTuple,
      IsLiquidateBorrowPausedSetEvent.OutputObject
    >;

    "IsLiquidateCollateralPausedSet(address,bool)": TypedContractEvent<
      IsLiquidateCollateralPausedSetEvent.InputTuple,
      IsLiquidateCollateralPausedSetEvent.OutputTuple,
      IsLiquidateCollateralPausedSetEvent.OutputObject
    >;
    IsLiquidateCollateralPausedSet: TypedContractEvent<
      IsLiquidateCollateralPausedSetEvent.InputTuple,
      IsLiquidateCollateralPausedSetEvent.OutputTuple,
      IsLiquidateCollateralPausedSetEvent.OutputObject
    >;

    "IsRepayPausedSet(address,bool)": TypedContractEvent<
      IsRepayPausedSetEvent.InputTuple,
      IsRepayPausedSetEvent.OutputTuple,
      IsRepayPausedSetEvent.OutputObject
    >;
    IsRepayPausedSet: TypedContractEvent<
      IsRepayPausedSetEvent.InputTuple,
      IsRepayPausedSetEvent.OutputTuple,
      IsRepayPausedSetEvent.OutputObject
    >;

    "IsSupplyPausedSet(address,bool)": TypedContractEvent<
      IsSupplyPausedSetEvent.InputTuple,
      IsSupplyPausedSetEvent.OutputTuple,
      IsSupplyPausedSetEvent.OutputObject
    >;
    IsSupplyPausedSet: TypedContractEvent<
      IsSupplyPausedSetEvent.InputTuple,
      IsSupplyPausedSetEvent.OutputTuple,
      IsSupplyPausedSetEvent.OutputObject
    >;

    "IsWithdrawPausedSet(address,bool)": TypedContractEvent<
      IsWithdrawPausedSetEvent.InputTuple,
      IsWithdrawPausedSetEvent.OutputTuple,
      IsWithdrawPausedSetEvent.OutputObject
    >;
    IsWithdrawPausedSet: TypedContractEvent<
      IsWithdrawPausedSetEvent.InputTuple,
      IsWithdrawPausedSetEvent.OutputTuple,
      IsWithdrawPausedSetEvent.OutputObject
    >;

    "MarketCreated(address,uint16,uint16)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MaxSortedUsersSet(uint256)": TypedContractEvent<
      MaxSortedUsersSetEvent.InputTuple,
      MaxSortedUsersSetEvent.OutputTuple,
      MaxSortedUsersSetEvent.OutputObject
    >;
    MaxSortedUsersSet: TypedContractEvent<
      MaxSortedUsersSetEvent.InputTuple,
      MaxSortedUsersSetEvent.OutputTuple,
      MaxSortedUsersSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "P2PIndexCursorSet(address,uint16)": TypedContractEvent<
      P2PIndexCursorSetEvent.InputTuple,
      P2PIndexCursorSetEvent.OutputTuple,
      P2PIndexCursorSetEvent.OutputObject
    >;
    P2PIndexCursorSet: TypedContractEvent<
      P2PIndexCursorSetEvent.InputTuple,
      P2PIndexCursorSetEvent.OutputTuple,
      P2PIndexCursorSetEvent.OutputObject
    >;

    "P2PStatusSet(address,bool)": TypedContractEvent<
      P2PStatusSetEvent.InputTuple,
      P2PStatusSetEvent.OutputTuple,
      P2PStatusSetEvent.OutputObject
    >;
    P2PStatusSet: TypedContractEvent<
      P2PStatusSetEvent.InputTuple,
      P2PStatusSetEvent.OutputTuple,
      P2PStatusSetEvent.OutputObject
    >;

    "PartialPauseStatusSet(address,bool)": TypedContractEvent<
      PartialPauseStatusSetEvent.InputTuple,
      PartialPauseStatusSetEvent.OutputTuple,
      PartialPauseStatusSetEvent.OutputObject
    >;
    PartialPauseStatusSet: TypedContractEvent<
      PartialPauseStatusSetEvent.InputTuple,
      PartialPauseStatusSetEvent.OutputTuple,
      PartialPauseStatusSetEvent.OutputObject
    >;

    "PauseStatusSet(address,bool)": TypedContractEvent<
      PauseStatusSetEvent.InputTuple,
      PauseStatusSetEvent.OutputTuple,
      PauseStatusSetEvent.OutputObject
    >;
    PauseStatusSet: TypedContractEvent<
      PauseStatusSetEvent.InputTuple,
      PauseStatusSetEvent.OutputTuple,
      PauseStatusSetEvent.OutputObject
    >;

    "PositionsManagerSet(address)": TypedContractEvent<
      PositionsManagerSetEvent.InputTuple,
      PositionsManagerSetEvent.OutputTuple,
      PositionsManagerSetEvent.OutputObject
    >;
    PositionsManagerSet: TypedContractEvent<
      PositionsManagerSetEvent.InputTuple,
      PositionsManagerSetEvent.OutputTuple,
      PositionsManagerSetEvent.OutputObject
    >;

    "ReserveFactorSet(address,uint16)": TypedContractEvent<
      ReserveFactorSetEvent.InputTuple,
      ReserveFactorSetEvent.OutputTuple,
      ReserveFactorSetEvent.OutputObject
    >;
    ReserveFactorSet: TypedContractEvent<
      ReserveFactorSetEvent.InputTuple,
      ReserveFactorSetEvent.OutputTuple,
      ReserveFactorSetEvent.OutputObject
    >;

    "ReserveFeeClaimed(address,uint256)": TypedContractEvent<
      ReserveFeeClaimedEvent.InputTuple,
      ReserveFeeClaimedEvent.OutputTuple,
      ReserveFeeClaimedEvent.OutputObject
    >;
    ReserveFeeClaimed: TypedContractEvent<
      ReserveFeeClaimedEvent.InputTuple,
      ReserveFeeClaimedEvent.OutputTuple,
      ReserveFeeClaimedEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "RewardsClaimedAndTraded(address,uint256)": TypedContractEvent<
      RewardsClaimedAndTradedEvent.InputTuple,
      RewardsClaimedAndTradedEvent.OutputTuple,
      RewardsClaimedAndTradedEvent.OutputObject
    >;
    RewardsClaimedAndTraded: TypedContractEvent<
      RewardsClaimedAndTradedEvent.InputTuple,
      RewardsClaimedAndTradedEvent.OutputTuple,
      RewardsClaimedAndTradedEvent.OutputObject
    >;

    "RewardsManagerSet(address)": TypedContractEvent<
      RewardsManagerSetEvent.InputTuple,
      RewardsManagerSetEvent.OutputTuple,
      RewardsManagerSetEvent.OutputObject
    >;
    RewardsManagerSet: TypedContractEvent<
      RewardsManagerSetEvent.InputTuple,
      RewardsManagerSetEvent.OutputTuple,
      RewardsManagerSetEvent.OutputObject
    >;

    "TreasuryVaultSet(address)": TypedContractEvent<
      TreasuryVaultSetEvent.InputTuple,
      TreasuryVaultSetEvent.OutputTuple,
      TreasuryVaultSetEvent.OutputObject
    >;
    TreasuryVaultSet: TypedContractEvent<
      TreasuryVaultSetEvent.InputTuple,
      TreasuryVaultSetEvent.OutputTuple,
      TreasuryVaultSetEvent.OutputObject
    >;
  };
}
