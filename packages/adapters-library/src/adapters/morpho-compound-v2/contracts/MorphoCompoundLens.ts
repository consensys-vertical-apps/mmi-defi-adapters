/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Types {
  export type AssetLiquidityDataStruct = {
    collateralValue: BigNumberish;
    maxDebtValue: BigNumberish;
    debtValue: BigNumberish;
    underlyingPrice: BigNumberish;
    collateralFactor: BigNumberish;
  };

  export type AssetLiquidityDataStructOutput = [
    collateralValue: bigint,
    maxDebtValue: bigint,
    debtValue: bigint,
    underlyingPrice: bigint,
    collateralFactor: bigint
  ] & {
    collateralValue: bigint;
    maxDebtValue: bigint;
    debtValue: bigint;
    underlyingPrice: bigint;
    collateralFactor: bigint;
  };
}

export interface MorphoCompoundLensInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_BASIS_POINTS"
      | "WAD"
      | "comptroller"
      | "computeLiquidationRepayAmount"
      | "getAccruedBorrowerComp"
      | "getAccruedSupplierComp"
      | "getAdvancedMarketData"
      | "getAllMarkets"
      | "getAverageBorrowRatePerBlock"
      | "getAverageSupplyRatePerBlock"
      | "getCurrentBorrowBalanceInOf"
      | "getCurrentCompBorrowIndex"
      | "getCurrentCompSupplyIndex"
      | "getCurrentP2PBorrowIndex"
      | "getCurrentP2PSupplyIndex"
      | "getCurrentPoolIndexes"
      | "getCurrentSupplyBalanceInOf"
      | "getCurrentUserBorrowRatePerBlock"
      | "getCurrentUserSupplyRatePerBlock"
      | "getEnteredMarkets"
      | "getIndexes"
      | "getMainMarketData"
      | "getMarketConfiguration"
      | "getNextUserBorrowRatePerBlock"
      | "getNextUserSupplyRatePerBlock"
      | "getRatesPerBlock"
      | "getTotalBorrow"
      | "getTotalMarketBorrow"
      | "getTotalMarketSupply"
      | "getTotalSupply"
      | "getUserBalanceStates"
      | "getUserHealthFactor"
      | "getUserHypotheticalBalanceStates"
      | "getUserLiquidityDataForAsset"
      | "getUserMaxCapacitiesForAsset"
      | "getUserUnclaimedRewards"
      | "initialize"
      | "isLiquidatable"
      | "isMarketCreated"
      | "isMarketCreatedAndNotPaused"
      | "isMarketCreatedAndNotPausedNorPartiallyPaused"
      | "morpho"
      | "rewardsManager"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WAD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidationRepayAmount",
    values: [AddressLike, AddressLike, AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedBorrowerComp",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedSupplierComp",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdvancedMarketData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageBorrowRatePerBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageSupplyRatePerBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBorrowBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCompBorrowIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentCompSupplyIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentP2PBorrowIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentP2PSupplyIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPoolIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSupplyBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserBorrowRatePerBlock",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserSupplyRatePerBlock",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnteredMarkets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexes",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainMarketData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketConfiguration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUserBorrowRatePerBlock",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUserSupplyRatePerBlock",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatesPerBlock",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMarketBorrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMarketSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalanceStates",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHealthFactor",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHypotheticalBalanceStates",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLiquidityDataForAsset",
    values: [AddressLike, AddressLike, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMaxCapacitiesForAsset",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnclaimedRewards",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreatedAndNotPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreatedAndNotPausedNorPartiallyPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "morpho", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WAD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidationRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedBorrowerComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedSupplierComp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdvancedMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageBorrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageSupplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBorrowBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCompBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentCompSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentP2PBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentP2PSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPoolIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSupplyBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserBorrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserSupplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnteredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMainMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUserBorrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUserSupplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRatesPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMarketBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMarketSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHypotheticalBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLiquidityDataForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMaxCapacitiesForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreatedAndNotPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreatedAndNotPausedNorPartiallyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "morpho", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;
}

export interface MorphoCompoundLens extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoCompoundLens;
  waitForDeployment(): Promise<this>;

  interface: MorphoCompoundLensInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  WAD: TypedContractMethod<[], [bigint], "view">;

  comptroller: TypedContractMethod<[], [string], "view">;

  computeLiquidationRepayAmount: TypedContractMethod<
    [
      _user: AddressLike,
      _poolTokenBorrowedAddress: AddressLike,
      _poolTokenCollateralAddress: AddressLike,
      _updatedMarkets: AddressLike[]
    ],
    [bigint],
    "view"
  >;

  getAccruedBorrowerComp: TypedContractMethod<
    [
      _borrower: AddressLike,
      _poolTokenAddress: AddressLike,
      _balance: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getAccruedSupplierComp: TypedContractMethod<
    [
      _supplier: AddressLike,
      _poolTokenAddress: AddressLike,
      _balance: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getAdvancedMarketData: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        p2pSupplyIndex: bigint;
        p2pBorrowIndex: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
        lastUpdateBlockNumber: bigint;
        p2pSupplyDelta: bigint;
        p2pBorrowDelta: bigint;
      }
    ],
    "view"
  >;

  getAllMarkets: TypedContractMethod<[], [string[]], "view">;

  getAverageBorrowRatePerBlock: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint] & {
        avgBorrowRatePerBlock: bigint;
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  getAverageSupplyRatePerBlock: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint] & {
        avgSupplyRatePerBlock: bigint;
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
      }
    ],
    "view"
  >;

  getCurrentBorrowBalanceInOf: TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balanceOnPool: bigint;
        balanceInP2P: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getCurrentCompBorrowIndex: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentCompSupplyIndex: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentP2PBorrowIndex: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentP2PSupplyIndex: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentPoolIndexes: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint] & {
        currentPoolSupplyIndex: bigint;
        currentPoolBorrowIndex: bigint;
      }
    ],
    "view"
  >;

  getCurrentSupplyBalanceInOf: TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balanceOnPool: bigint;
        balanceInP2P: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getCurrentUserBorrowRatePerBlock: TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentUserSupplyRatePerBlock: TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;

  getEnteredMarkets: TypedContractMethod<
    [_user: AddressLike],
    [string[]],
    "view"
  >;

  getIndexes: TypedContractMethod<
    [_poolTokenAddress: AddressLike, _getUpdatedIndexes: boolean],
    [
      [bigint, bigint, bigint, bigint] & {
        newP2PSupplyIndex: bigint;
        newP2PBorrowIndex: bigint;
        newPoolSupplyIndex: bigint;
        newPoolBorrowIndex: bigint;
      }
    ],
    "view"
  >;

  getMainMarketData: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        avgSupplyRatePerBlock: bigint;
        avgBorrowRatePerBlock: bigint;
        p2pSupplyAmount: bigint;
        p2pBorrowAmount: bigint;
        poolSupplyAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  getMarketConfiguration: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [string, boolean, boolean, boolean, boolean, bigint, bigint, bigint] & {
        underlying: string;
        isCreated: boolean;
        p2pDisabled: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        reserveFactor: bigint;
        p2pIndexCursor: bigint;
        collateralFactor: bigint;
      }
    ],
    "view"
  >;

  getNextUserBorrowRatePerBlock: TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike, _amount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        nextBorrowRatePerBlock: bigint;
        balanceOnPool: bigint;
        balanceInP2P: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getNextUserSupplyRatePerBlock: TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike, _amount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        nextSupplyRatePerBlock: bigint;
        balanceOnPool: bigint;
        balanceInP2P: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getRatesPerBlock: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyRate: bigint;
        p2pBorrowRate: bigint;
        poolSupplyRate: bigint;
        poolBorrowRate: bigint;
      }
    ],
    "view"
  >;

  getTotalBorrow: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
        totalBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  getTotalMarketBorrow: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [[bigint, bigint] & { p2pBorrowAmount: bigint; poolBorrowAmount: bigint }],
    "view"
  >;

  getTotalMarketSupply: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [[bigint, bigint] & { p2pSupplyAmount: bigint; poolSupplyAmount: bigint }],
    "view"
  >;

  getTotalSupply: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
        totalSupplyAmount: bigint;
      }
    ],
    "view"
  >;

  getUserBalanceStates: TypedContractMethod<
    [_user: AddressLike, _updatedMarkets: AddressLike[]],
    [
      [bigint, bigint, bigint] & {
        collateralValue: bigint;
        debtValue: bigint;
        maxDebtValue: bigint;
      }
    ],
    "view"
  >;

  getUserHealthFactor: TypedContractMethod<
    [_user: AddressLike, _updatedMarkets: AddressLike[]],
    [bigint],
    "view"
  >;

  getUserHypotheticalBalanceStates: TypedContractMethod<
    [
      _user: AddressLike,
      _poolTokenAddress: AddressLike,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish
    ],
    [[bigint, bigint] & { debtValue: bigint; maxDebtValue: bigint }],
    "view"
  >;

  getUserLiquidityDataForAsset: TypedContractMethod<
    [
      _user: AddressLike,
      _poolTokenAddress: AddressLike,
      _getUpdatedIndexes: boolean,
      _oracle: AddressLike
    ],
    [Types.AssetLiquidityDataStructOutput],
    "view"
  >;

  getUserMaxCapacitiesForAsset: TypedContractMethod<
    [_user: AddressLike, _poolTokenAddress: AddressLike],
    [[bigint, bigint] & { withdrawable: bigint; borrowable: bigint }],
    "view"
  >;

  getUserUnclaimedRewards: TypedContractMethod<
    [_poolTokenAddresses: AddressLike[], _user: AddressLike],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<
    [_morphoAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  isLiquidatable: TypedContractMethod<
    [_user: AddressLike, _updatedMarkets: AddressLike[]],
    [boolean],
    "view"
  >;

  isMarketCreated: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  isMarketCreatedAndNotPaused: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  isMarketCreatedAndNotPausedNorPartiallyPaused: TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [boolean],
    "view"
  >;

  morpho: TypedContractMethod<[], [string], "view">;

  rewardsManager: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "WAD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "comptroller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "computeLiquidationRepayAmount"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _poolTokenBorrowedAddress: AddressLike,
      _poolTokenCollateralAddress: AddressLike,
      _updatedMarkets: AddressLike[]
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccruedBorrowerComp"
  ): TypedContractMethod<
    [
      _borrower: AddressLike,
      _poolTokenAddress: AddressLike,
      _balance: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccruedSupplierComp"
  ): TypedContractMethod<
    [
      _supplier: AddressLike,
      _poolTokenAddress: AddressLike,
      _balance: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdvancedMarketData"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        p2pSupplyIndex: bigint;
        p2pBorrowIndex: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
        lastUpdateBlockNumber: bigint;
        p2pSupplyDelta: bigint;
        p2pBorrowDelta: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAverageBorrowRatePerBlock"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint] & {
        avgBorrowRatePerBlock: bigint;
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAverageSupplyRatePerBlock"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint] & {
        avgSupplyRatePerBlock: bigint;
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentBorrowBalanceInOf"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balanceOnPool: bigint;
        balanceInP2P: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentCompBorrowIndex"
  ): TypedContractMethod<[_poolTokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentCompSupplyIndex"
  ): TypedContractMethod<[_poolTokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentP2PBorrowIndex"
  ): TypedContractMethod<[_poolTokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentP2PSupplyIndex"
  ): TypedContractMethod<[_poolTokenAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentPoolIndexes"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint] & {
        currentPoolSupplyIndex: bigint;
        currentPoolBorrowIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentSupplyBalanceInOf"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balanceOnPool: bigint;
        balanceInP2P: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentUserBorrowRatePerBlock"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentUserSupplyRatePerBlock"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEnteredMarkets"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getIndexes"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike, _getUpdatedIndexes: boolean],
    [
      [bigint, bigint, bigint, bigint] & {
        newP2PSupplyIndex: bigint;
        newP2PBorrowIndex: bigint;
        newPoolSupplyIndex: bigint;
        newPoolBorrowIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMainMarketData"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        avgSupplyRatePerBlock: bigint;
        avgBorrowRatePerBlock: bigint;
        p2pSupplyAmount: bigint;
        p2pBorrowAmount: bigint;
        poolSupplyAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketConfiguration"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [string, boolean, boolean, boolean, boolean, bigint, bigint, bigint] & {
        underlying: string;
        isCreated: boolean;
        p2pDisabled: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        reserveFactor: bigint;
        p2pIndexCursor: bigint;
        collateralFactor: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextUserBorrowRatePerBlock"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike, _amount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        nextBorrowRatePerBlock: bigint;
        balanceOnPool: bigint;
        balanceInP2P: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextUserSupplyRatePerBlock"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike, _user: AddressLike, _amount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        nextSupplyRatePerBlock: bigint;
        balanceOnPool: bigint;
        balanceInP2P: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRatesPerBlock"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyRate: bigint;
        p2pBorrowRate: bigint;
        poolSupplyRate: bigint;
        poolBorrowRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalBorrow"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
        totalBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalMarketBorrow"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [[bigint, bigint] & { p2pBorrowAmount: bigint; poolBorrowAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalMarketSupply"
  ): TypedContractMethod<
    [_poolTokenAddress: AddressLike],
    [[bigint, bigint] & { p2pSupplyAmount: bigint; poolSupplyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalSupply"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
        totalSupplyAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBalanceStates"
  ): TypedContractMethod<
    [_user: AddressLike, _updatedMarkets: AddressLike[]],
    [
      [bigint, bigint, bigint] & {
        collateralValue: bigint;
        debtValue: bigint;
        maxDebtValue: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserHealthFactor"
  ): TypedContractMethod<
    [_user: AddressLike, _updatedMarkets: AddressLike[]],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserHypotheticalBalanceStates"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _poolTokenAddress: AddressLike,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish
    ],
    [[bigint, bigint] & { debtValue: bigint; maxDebtValue: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLiquidityDataForAsset"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _poolTokenAddress: AddressLike,
      _getUpdatedIndexes: boolean,
      _oracle: AddressLike
    ],
    [Types.AssetLiquidityDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMaxCapacitiesForAsset"
  ): TypedContractMethod<
    [_user: AddressLike, _poolTokenAddress: AddressLike],
    [[bigint, bigint] & { withdrawable: bigint; borrowable: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserUnclaimedRewards"
  ): TypedContractMethod<
    [_poolTokenAddresses: AddressLike[], _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_morphoAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isLiquidatable"
  ): TypedContractMethod<
    [_user: AddressLike, _updatedMarkets: AddressLike[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMarketCreated"
  ): TypedContractMethod<[_poolTokenAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMarketCreatedAndNotPaused"
  ): TypedContractMethod<[_poolTokenAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMarketCreatedAndNotPausedNorPartiallyPaused"
  ): TypedContractMethod<[_poolTokenAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "morpho"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardsManager"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
