/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IKeeperValidators {
  export type ApprovalParamsStruct = {
    validatorsRegistryRoot: BytesLike;
    validators: BytesLike;
    signatures: BytesLike;
    exitSignaturesIpfsHash: string;
  };

  export type ApprovalParamsStructOutput = [
    validatorsRegistryRoot: string,
    validators: string,
    signatures: string,
    exitSignaturesIpfsHash: string
  ] & {
    validatorsRegistryRoot: string;
    validators: string;
    signatures: string;
    exitSignaturesIpfsHash: string;
  };
}

export declare namespace IKeeperRewards {
  export type HarvestParamsStruct = {
    rewardsRoot: BytesLike;
    reward: BigNumberish;
    unlockedMevReward: BigNumberish;
    proof: BytesLike[];
  };

  export type HarvestParamsStructOutput = [
    rewardsRoot: string,
    reward: bigint,
    unlockedMevReward: bigint,
    proof: string[]
  ] & {
    rewardsRoot: string;
    reward: bigint;
    unlockedMevReward: bigint;
    proof: string[];
  };
}

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "admin"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burnOsToken"
      | "canUpdateExitQueue"
      | "capacity"
      | "claimExitedAssets"
      | "convertToAssets"
      | "convertToShares"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "enterExitQueue"
      | "feePercent"
      | "feeRecipient"
      | "getExitQueueIndex"
      | "implementation"
      | "increaseAllowance"
      | "initialize"
      | "keysManager"
      | "liquidateOsToken"
      | "mevEscrow"
      | "mintOsToken"
      | "multicall"
      | "name"
      | "nonces"
      | "osTokenPositions"
      | "permit"
      | "proxiableUUID"
      | "queuedShares"
      | "receiveFromMevEscrow"
      | "redeem"
      | "redeemOsToken"
      | "registerValidator"
      | "registerValidators"
      | "setFeeRecipient"
      | "setKeysManager"
      | "setMetadata"
      | "setValidatorsRoot"
      | "symbol"
      | "totalAssets"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "updateState"
      | "updateStateAndDeposit"
      | "validatorIndex"
      | "validatorsRoot"
      | "vaultId"
      | "version"
      | "withdrawableAssets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "CheckpointCreated"
      | "Deposit"
      | "ExitQueueEntered"
      | "ExitedAssetsClaimed"
      | "FeeRecipientUpdated"
      | "KeysManagerUpdated"
      | "MetadataUpdated"
      | "OsTokenBurned"
      | "OsTokenLiquidated"
      | "OsTokenMinted"
      | "OsTokenRedeemed"
      | "Redeem"
      | "Transfer"
      | "ValidatorRegistered"
      | "ValidatorsRootUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnOsToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canUpdateExitQueue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "capacity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimExitedAssets",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enterExitQueue",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExitQueueIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keysManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateOsToken",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "mevEscrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintOsToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "osTokenPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveFromMevEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemOsToken",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerValidator",
    values: [IKeeperValidators.ApprovalParamsStruct, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerValidators",
    values: [
      IKeeperValidators.ApprovalParamsStruct,
      BigNumberish[],
      boolean[],
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeysManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setMetadata", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setValidatorsRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values: [IKeeperRewards.HarvestParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStateAndDeposit",
    values: [AddressLike, AddressLike, IKeeperRewards.HarvestParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorsRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vaultId", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawableAssets",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnOsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUpdateExitQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "capacity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimExitedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterExitQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePercent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExitQueueIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "keysManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateOsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mevEscrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintOsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "osTokenPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveFromMevEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemOsToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeysManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorsRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStateAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorsRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableAssets",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckpointCreatedEvent {
  export type InputTuple = [shares: BigNumberish, assets: BigNumberish];
  export type OutputTuple = [shares: bigint, assets: bigint];
  export interface OutputObject {
    shares: bigint;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish,
    referrer: AddressLike
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    assets: bigint,
    shares: bigint,
    referrer: string
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    assets: bigint;
    shares: bigint;
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitQueueEnteredEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    positionTicket: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    positionTicket: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    positionTicket: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExitedAssetsClaimedEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    prevPositionTicket: BigNumberish,
    newPositionTicket: BigNumberish,
    withdrawnAssets: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    prevPositionTicket: bigint,
    newPositionTicket: bigint,
    withdrawnAssets: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    prevPositionTicket: bigint;
    newPositionTicket: bigint;
    withdrawnAssets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientUpdatedEvent {
  export type InputTuple = [caller: AddressLike, feeRecipient: AddressLike];
  export type OutputTuple = [caller: string, feeRecipient: string];
  export interface OutputObject {
    caller: string;
    feeRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeysManagerUpdatedEvent {
  export type InputTuple = [caller: AddressLike, keysManager: AddressLike];
  export type OutputTuple = [caller: string, keysManager: string];
  export interface OutputObject {
    caller: string;
    keysManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [caller: AddressLike, metadataIpfsHash: string];
  export type OutputTuple = [caller: string, metadataIpfsHash: string];
  export interface OutputObject {
    caller: string;
    metadataIpfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OsTokenBurnedEvent {
  export type InputTuple = [
    caller: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [caller: string, assets: bigint, shares: bigint];
  export interface OutputObject {
    caller: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OsTokenLiquidatedEvent {
  export type InputTuple = [
    caller: AddressLike,
    user: AddressLike,
    receiver: AddressLike,
    coveredShares: BigNumberish,
    receivedAssets: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    user: string,
    receiver: string,
    coveredShares: bigint,
    receivedAssets: bigint
  ];
  export interface OutputObject {
    caller: string;
    user: string;
    receiver: string;
    coveredShares: bigint;
    receivedAssets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OsTokenMintedEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish,
    referrer: AddressLike
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    assets: bigint,
    shares: bigint,
    referrer: string
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    assets: bigint;
    shares: bigint;
    referrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OsTokenRedeemedEvent {
  export type InputTuple = [
    caller: AddressLike,
    user: AddressLike,
    receiver: AddressLike,
    shares: BigNumberish,
    assets: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    user: string,
    receiver: string,
    shares: bigint,
    assets: bigint
  ];
  export interface OutputObject {
    caller: string;
    user: string;
    receiver: string;
    shares: bigint;
    assets: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRegisteredEvent {
  export type InputTuple = [publicKey: BytesLike];
  export type OutputTuple = [publicKey: string];
  export interface OutputObject {
    publicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorsRootUpdatedEvent {
  export type InputTuple = [caller: AddressLike, validatorsRoot: BytesLike];
  export type OutputTuple = [caller: string, validatorsRoot: string];
  export interface OutputObject {
    caller: string;
    validatorsRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  burnOsToken: TypedContractMethod<
    [osTokenShares: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  canUpdateExitQueue: TypedContractMethod<[], [boolean], "view">;

  capacity: TypedContractMethod<[], [bigint], "view">;

  claimExitedAssets: TypedContractMethod<
    [
      receiver: AddressLike,
      positionTicket: BigNumberish,
      exitQueueIndex: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        newPositionTicket: bigint;
        claimedShares: bigint;
        claimedAssets: bigint;
      }
    ],
    "nonpayable"
  >;

  convertToAssets: TypedContractMethod<
    [shares: BigNumberish],
    [bigint],
    "view"
  >;

  convertToShares: TypedContractMethod<
    [assets: BigNumberish],
    [bigint],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [receiver: AddressLike, referrer: AddressLike],
    [bigint],
    "payable"
  >;

  enterExitQueue: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  feePercent: TypedContractMethod<[], [bigint], "view">;

  feeRecipient: TypedContractMethod<[], [string], "view">;

  getExitQueueIndex: TypedContractMethod<
    [positionTicket: BigNumberish],
    [bigint],
    "view"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[params: BytesLike], [void], "payable">;

  keysManager: TypedContractMethod<[], [string], "view">;

  liquidateOsToken: TypedContractMethod<
    [osTokenShares: BigNumberish, owner: AddressLike, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  mevEscrow: TypedContractMethod<[], [string], "view">;

  mintOsToken: TypedContractMethod<
    [receiver: AddressLike, assets: BigNumberish, referrer: AddressLike],
    [bigint],
    "nonpayable"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  osTokenPositions: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  queuedShares: TypedContractMethod<[], [bigint], "view">;

  receiveFromMevEscrow: TypedContractMethod<[], [void], "payable">;

  redeem: TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  redeemOsToken: TypedContractMethod<
    [osTokenShares: BigNumberish, owner: AddressLike, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  registerValidator: TypedContractMethod<
    [keeperParams: IKeeperValidators.ApprovalParamsStruct, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  registerValidators: TypedContractMethod<
    [
      keeperParams: IKeeperValidators.ApprovalParamsStruct,
      indexes: BigNumberish[],
      proofFlags: boolean[],
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  setFeeRecipient: TypedContractMethod<
    [_feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setKeysManager: TypedContractMethod<
    [_keysManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setMetadata: TypedContractMethod<
    [metadataIpfsHash: string],
    [void],
    "nonpayable"
  >;

  setValidatorsRoot: TypedContractMethod<
    [_validatorsRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateState: TypedContractMethod<
    [harvestParams: IKeeperRewards.HarvestParamsStruct],
    [void],
    "nonpayable"
  >;

  updateStateAndDeposit: TypedContractMethod<
    [
      receiver: AddressLike,
      referrer: AddressLike,
      harvestParams: IKeeperRewards.HarvestParamsStruct
    ],
    [bigint],
    "payable"
  >;

  validatorIndex: TypedContractMethod<[], [bigint], "view">;

  validatorsRoot: TypedContractMethod<[], [string], "view">;

  vaultId: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [bigint], "view">;

  withdrawableAssets: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burnOsToken"
  ): TypedContractMethod<[osTokenShares: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "canUpdateExitQueue"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "capacity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimExitedAssets"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      positionTicket: BigNumberish,
      exitQueueIndex: BigNumberish
    ],
    [
      [bigint, bigint, bigint] & {
        newPositionTicket: bigint;
        claimedShares: bigint;
        claimedAssets: bigint;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shares: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assets: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [receiver: AddressLike, referrer: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "enterExitQueue"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getExitQueueIndex"
  ): TypedContractMethod<[positionTicket: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[params: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "keysManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidateOsToken"
  ): TypedContractMethod<
    [osTokenShares: BigNumberish, owner: AddressLike, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mevEscrow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mintOsToken"
  ): TypedContractMethod<
    [receiver: AddressLike, assets: BigNumberish, referrer: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "nonpayable">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "osTokenPositions"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "queuedShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "receiveFromMevEscrow"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [shares: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemOsToken"
  ): TypedContractMethod<
    [osTokenShares: BigNumberish, owner: AddressLike, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerValidator"
  ): TypedContractMethod<
    [keeperParams: IKeeperValidators.ApprovalParamsStruct, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerValidators"
  ): TypedContractMethod<
    [
      keeperParams: IKeeperValidators.ApprovalParamsStruct,
      indexes: BigNumberish[],
      proofFlags: boolean[],
      proof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[_feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setKeysManager"
  ): TypedContractMethod<[_keysManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetadata"
  ): TypedContractMethod<[metadataIpfsHash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setValidatorsRoot"
  ): TypedContractMethod<[_validatorsRoot: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateState"
  ): TypedContractMethod<
    [harvestParams: IKeeperRewards.HarvestParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateStateAndDeposit"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      referrer: AddressLike,
      harvestParams: IKeeperRewards.HarvestParamsStruct
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "validatorIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "validatorsRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vaultId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawableAssets"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "CheckpointCreated"
  ): TypedContractEvent<
    CheckpointCreatedEvent.InputTuple,
    CheckpointCreatedEvent.OutputTuple,
    CheckpointCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "ExitQueueEntered"
  ): TypedContractEvent<
    ExitQueueEnteredEvent.InputTuple,
    ExitQueueEnteredEvent.OutputTuple,
    ExitQueueEnteredEvent.OutputObject
  >;
  getEvent(
    key: "ExitedAssetsClaimed"
  ): TypedContractEvent<
    ExitedAssetsClaimedEvent.InputTuple,
    ExitedAssetsClaimedEvent.OutputTuple,
    ExitedAssetsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientUpdated"
  ): TypedContractEvent<
    FeeRecipientUpdatedEvent.InputTuple,
    FeeRecipientUpdatedEvent.OutputTuple,
    FeeRecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "KeysManagerUpdated"
  ): TypedContractEvent<
    KeysManagerUpdatedEvent.InputTuple,
    KeysManagerUpdatedEvent.OutputTuple,
    KeysManagerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OsTokenBurned"
  ): TypedContractEvent<
    OsTokenBurnedEvent.InputTuple,
    OsTokenBurnedEvent.OutputTuple,
    OsTokenBurnedEvent.OutputObject
  >;
  getEvent(
    key: "OsTokenLiquidated"
  ): TypedContractEvent<
    OsTokenLiquidatedEvent.InputTuple,
    OsTokenLiquidatedEvent.OutputTuple,
    OsTokenLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "OsTokenMinted"
  ): TypedContractEvent<
    OsTokenMintedEvent.InputTuple,
    OsTokenMintedEvent.OutputTuple,
    OsTokenMintedEvent.OutputObject
  >;
  getEvent(
    key: "OsTokenRedeemed"
  ): TypedContractEvent<
    OsTokenRedeemedEvent.InputTuple,
    OsTokenRedeemedEvent.OutputTuple,
    OsTokenRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRegistered"
  ): TypedContractEvent<
    ValidatorRegisteredEvent.InputTuple,
    ValidatorRegisteredEvent.OutputTuple,
    ValidatorRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorsRootUpdated"
  ): TypedContractEvent<
    ValidatorsRootUpdatedEvent.InputTuple,
    ValidatorsRootUpdatedEvent.OutputTuple,
    ValidatorsRootUpdatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "CheckpointCreated(uint256,uint256)": TypedContractEvent<
      CheckpointCreatedEvent.InputTuple,
      CheckpointCreatedEvent.OutputTuple,
      CheckpointCreatedEvent.OutputObject
    >;
    CheckpointCreated: TypedContractEvent<
      CheckpointCreatedEvent.InputTuple,
      CheckpointCreatedEvent.OutputTuple,
      CheckpointCreatedEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256,address)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "ExitQueueEntered(address,address,address,uint256,uint256)": TypedContractEvent<
      ExitQueueEnteredEvent.InputTuple,
      ExitQueueEnteredEvent.OutputTuple,
      ExitQueueEnteredEvent.OutputObject
    >;
    ExitQueueEntered: TypedContractEvent<
      ExitQueueEnteredEvent.InputTuple,
      ExitQueueEnteredEvent.OutputTuple,
      ExitQueueEnteredEvent.OutputObject
    >;

    "ExitedAssetsClaimed(address,address,uint256,uint256,uint256)": TypedContractEvent<
      ExitedAssetsClaimedEvent.InputTuple,
      ExitedAssetsClaimedEvent.OutputTuple,
      ExitedAssetsClaimedEvent.OutputObject
    >;
    ExitedAssetsClaimed: TypedContractEvent<
      ExitedAssetsClaimedEvent.InputTuple,
      ExitedAssetsClaimedEvent.OutputTuple,
      ExitedAssetsClaimedEvent.OutputObject
    >;

    "FeeRecipientUpdated(address,address)": TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;
    FeeRecipientUpdated: TypedContractEvent<
      FeeRecipientUpdatedEvent.InputTuple,
      FeeRecipientUpdatedEvent.OutputTuple,
      FeeRecipientUpdatedEvent.OutputObject
    >;

    "KeysManagerUpdated(address,address)": TypedContractEvent<
      KeysManagerUpdatedEvent.InputTuple,
      KeysManagerUpdatedEvent.OutputTuple,
      KeysManagerUpdatedEvent.OutputObject
    >;
    KeysManagerUpdated: TypedContractEvent<
      KeysManagerUpdatedEvent.InputTuple,
      KeysManagerUpdatedEvent.OutputTuple,
      KeysManagerUpdatedEvent.OutputObject
    >;

    "MetadataUpdated(address,string)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "OsTokenBurned(address,uint256,uint256)": TypedContractEvent<
      OsTokenBurnedEvent.InputTuple,
      OsTokenBurnedEvent.OutputTuple,
      OsTokenBurnedEvent.OutputObject
    >;
    OsTokenBurned: TypedContractEvent<
      OsTokenBurnedEvent.InputTuple,
      OsTokenBurnedEvent.OutputTuple,
      OsTokenBurnedEvent.OutputObject
    >;

    "OsTokenLiquidated(address,address,address,uint256,uint256)": TypedContractEvent<
      OsTokenLiquidatedEvent.InputTuple,
      OsTokenLiquidatedEvent.OutputTuple,
      OsTokenLiquidatedEvent.OutputObject
    >;
    OsTokenLiquidated: TypedContractEvent<
      OsTokenLiquidatedEvent.InputTuple,
      OsTokenLiquidatedEvent.OutputTuple,
      OsTokenLiquidatedEvent.OutputObject
    >;

    "OsTokenMinted(address,address,uint256,uint256,address)": TypedContractEvent<
      OsTokenMintedEvent.InputTuple,
      OsTokenMintedEvent.OutputTuple,
      OsTokenMintedEvent.OutputObject
    >;
    OsTokenMinted: TypedContractEvent<
      OsTokenMintedEvent.InputTuple,
      OsTokenMintedEvent.OutputTuple,
      OsTokenMintedEvent.OutputObject
    >;

    "OsTokenRedeemed(address,address,address,uint256,uint256)": TypedContractEvent<
      OsTokenRedeemedEvent.InputTuple,
      OsTokenRedeemedEvent.OutputTuple,
      OsTokenRedeemedEvent.OutputObject
    >;
    OsTokenRedeemed: TypedContractEvent<
      OsTokenRedeemedEvent.InputTuple,
      OsTokenRedeemedEvent.OutputTuple,
      OsTokenRedeemedEvent.OutputObject
    >;

    "Redeem(address,address,address,uint256,uint256)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "ValidatorRegistered(bytes)": TypedContractEvent<
      ValidatorRegisteredEvent.InputTuple,
      ValidatorRegisteredEvent.OutputTuple,
      ValidatorRegisteredEvent.OutputObject
    >;
    ValidatorRegistered: TypedContractEvent<
      ValidatorRegisteredEvent.InputTuple,
      ValidatorRegisteredEvent.OutputTuple,
      ValidatorRegisteredEvent.OutputObject
    >;

    "ValidatorsRootUpdated(address,bytes32)": TypedContractEvent<
      ValidatorsRootUpdatedEvent.InputTuple,
      ValidatorsRootUpdatedEvent.OutputTuple,
      ValidatorsRootUpdatedEvent.OutputObject
    >;
    ValidatorsRootUpdated: TypedContractEvent<
      ValidatorsRootUpdatedEvent.InputTuple,
      ValidatorsRootUpdatedEvent.OutputTuple,
      ValidatorsRootUpdatedEvent.OutputObject
    >;
  };
}
