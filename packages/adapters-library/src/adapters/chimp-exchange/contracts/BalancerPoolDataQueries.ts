/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type PoolDataQueryConfigStruct = {
  loadTokenBalanceUpdatesAfterBlock: boolean;
  loadTotalSupply: boolean;
  loadSwapFees: boolean;
  loadLinearWrappedTokenRates: boolean;
  loadLinearTargets: boolean;
  loadNormalizedWeights: boolean;
  loadScalingFactors: boolean;
  loadAmps: boolean;
  loadRates: boolean;
  blockNumber: BigNumberish;
  totalSupplyTypes: BigNumberish[];
  swapFeeTypes: BigNumberish[];
  linearPoolIdxs: BigNumberish[];
  weightedPoolIdxs: BigNumberish[];
  scalingFactorPoolIdxs: BigNumberish[];
  ampPoolIdxs: BigNumberish[];
  ratePoolIdxs: BigNumberish[];
};

export type PoolDataQueryConfigStructOutput = [
  loadTokenBalanceUpdatesAfterBlock: boolean,
  loadTotalSupply: boolean,
  loadSwapFees: boolean,
  loadLinearWrappedTokenRates: boolean,
  loadLinearTargets: boolean,
  loadNormalizedWeights: boolean,
  loadScalingFactors: boolean,
  loadAmps: boolean,
  loadRates: boolean,
  blockNumber: bigint,
  totalSupplyTypes: bigint[],
  swapFeeTypes: bigint[],
  linearPoolIdxs: bigint[],
  weightedPoolIdxs: bigint[],
  scalingFactorPoolIdxs: bigint[],
  ampPoolIdxs: bigint[],
  ratePoolIdxs: bigint[]
] & {
  loadTokenBalanceUpdatesAfterBlock: boolean;
  loadTotalSupply: boolean;
  loadSwapFees: boolean;
  loadLinearWrappedTokenRates: boolean;
  loadLinearTargets: boolean;
  loadNormalizedWeights: boolean;
  loadScalingFactors: boolean;
  loadAmps: boolean;
  loadRates: boolean;
  blockNumber: bigint;
  totalSupplyTypes: bigint[];
  swapFeeTypes: bigint[];
  linearPoolIdxs: bigint[];
  weightedPoolIdxs: bigint[];
  scalingFactorPoolIdxs: bigint[];
  ampPoolIdxs: bigint[];
  ratePoolIdxs: bigint[];
};

export type PoolStatusQueryConfigStruct = {
  loadInRecoveryMode: boolean;
  loadIsPaused: boolean;
};

export type PoolStatusQueryConfigStructOutput = [
  loadInRecoveryMode: boolean,
  loadIsPaused: boolean
] & { loadInRecoveryMode: boolean; loadIsPaused: boolean };

export interface BalancerPoolDataQueriesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAmpForPools"
      | "getInRecoveryModeForPools"
      | "getIsPausedForPools"
      | "getLinearTargetsForPools"
      | "getNormalizedWeightsForPools"
      | "getPoolData"
      | "getPoolStatus"
      | "getPoolTokenBalancesWithUpdatesAfterBlock"
      | "getRateForPools"
      | "getScalingFactorsForPools"
      | "getSwapFeePercentageForPools"
      | "getTotalSupplyForPools"
      | "getWrappedTokenRateForLinearPools"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAmpForPools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getInRecoveryModeForPools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getIsPausedForPools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLinearTargetsForPools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeightsForPools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolData",
    values: [BytesLike[], PoolDataQueryConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolStatus",
    values: [BytesLike[], PoolStatusQueryConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolTokenBalancesWithUpdatesAfterBlock",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRateForPools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getScalingFactorsForPools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentageForPools",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupplyForPools",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedTokenRateForLinearPools",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getAmpForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInRecoveryModeForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsPausedForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLinearTargetsForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeightsForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolTokenBalancesWithUpdatesAfterBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRateForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScalingFactorsForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentageForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupplyForPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedTokenRateForLinearPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export interface BalancerPoolDataQueries extends BaseContract {
  connect(runner?: ContractRunner | null): BalancerPoolDataQueries;
  waitForDeployment(): Promise<this>;

  interface: BalancerPoolDataQueriesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAmpForPools: TypedContractMethod<
    [poolAddresses: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getInRecoveryModeForPools: TypedContractMethod<
    [poolAddresses: AddressLike[]],
    [boolean[]],
    "view"
  >;

  getIsPausedForPools: TypedContractMethod<
    [poolAddresses: AddressLike[]],
    [boolean[]],
    "view"
  >;

  getLinearTargetsForPools: TypedContractMethod<
    [poolAddresses: AddressLike[]],
    [bigint[][]],
    "view"
  >;

  getNormalizedWeightsForPools: TypedContractMethod<
    [poolAddresses: AddressLike[]],
    [bigint[][]],
    "view"
  >;

  getPoolData: TypedContractMethod<
    [poolIds: BytesLike[], config: PoolDataQueryConfigStruct],
    [
      [
        bigint[][],
        bigint[],
        bigint[],
        bigint[],
        bigint[][],
        bigint[][],
        bigint[][],
        bigint[],
        bigint[],
        bigint[]
      ] & {
        balances: bigint[][];
        totalSupplies: bigint[];
        swapFees: bigint[];
        linearWrappedTokenRates: bigint[];
        linearTargets: bigint[][];
        weights: bigint[][];
        scalingFactors: bigint[][];
        amps: bigint[];
        rates: bigint[];
        ignoreIdxs: bigint[];
      }
    ],
    "view"
  >;

  getPoolStatus: TypedContractMethod<
    [poolIds: BytesLike[], config: PoolStatusQueryConfigStruct],
    [
      [boolean[], boolean[]] & {
        isPaused: boolean[];
        inRecoveryMode: boolean[];
      }
    ],
    "view"
  >;

  getPoolTokenBalancesWithUpdatesAfterBlock: TypedContractMethod<
    [poolIds: BytesLike[], blockNumber: BigNumberish],
    [bigint[][]],
    "view"
  >;

  getRateForPools: TypedContractMethod<
    [poolAddresses: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getScalingFactorsForPools: TypedContractMethod<
    [poolAddresses: AddressLike[]],
    [bigint[][]],
    "view"
  >;

  getSwapFeePercentageForPools: TypedContractMethod<
    [poolAddresses: AddressLike[], swapFeeTypes: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  getTotalSupplyForPools: TypedContractMethod<
    [poolAddresses: AddressLike[], totalSupplyTypes: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  getWrappedTokenRateForLinearPools: TypedContractMethod<
    [poolAddresses: AddressLike[]],
    [bigint[]],
    "view"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAmpForPools"
  ): TypedContractMethod<[poolAddresses: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getInRecoveryModeForPools"
  ): TypedContractMethod<[poolAddresses: AddressLike[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "getIsPausedForPools"
  ): TypedContractMethod<[poolAddresses: AddressLike[]], [boolean[]], "view">;
  getFunction(
    nameOrSignature: "getLinearTargetsForPools"
  ): TypedContractMethod<[poolAddresses: AddressLike[]], [bigint[][]], "view">;
  getFunction(
    nameOrSignature: "getNormalizedWeightsForPools"
  ): TypedContractMethod<[poolAddresses: AddressLike[]], [bigint[][]], "view">;
  getFunction(
    nameOrSignature: "getPoolData"
  ): TypedContractMethod<
    [poolIds: BytesLike[], config: PoolDataQueryConfigStruct],
    [
      [
        bigint[][],
        bigint[],
        bigint[],
        bigint[],
        bigint[][],
        bigint[][],
        bigint[][],
        bigint[],
        bigint[],
        bigint[]
      ] & {
        balances: bigint[][];
        totalSupplies: bigint[];
        swapFees: bigint[];
        linearWrappedTokenRates: bigint[];
        linearTargets: bigint[][];
        weights: bigint[][];
        scalingFactors: bigint[][];
        amps: bigint[];
        rates: bigint[];
        ignoreIdxs: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolStatus"
  ): TypedContractMethod<
    [poolIds: BytesLike[], config: PoolStatusQueryConfigStruct],
    [
      [boolean[], boolean[]] & {
        isPaused: boolean[];
        inRecoveryMode: boolean[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolTokenBalancesWithUpdatesAfterBlock"
  ): TypedContractMethod<
    [poolIds: BytesLike[], blockNumber: BigNumberish],
    [bigint[][]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRateForPools"
  ): TypedContractMethod<[poolAddresses: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getScalingFactorsForPools"
  ): TypedContractMethod<[poolAddresses: AddressLike[]], [bigint[][]], "view">;
  getFunction(
    nameOrSignature: "getSwapFeePercentageForPools"
  ): TypedContractMethod<
    [poolAddresses: AddressLike[], swapFeeTypes: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalSupplyForPools"
  ): TypedContractMethod<
    [poolAddresses: AddressLike[], totalSupplyTypes: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWrappedTokenRateForLinearPools"
  ): TypedContractMethod<[poolAddresses: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
