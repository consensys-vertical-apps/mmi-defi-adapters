/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StakedTokenIncentivesControllerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DISTRIBUTION_END"
      | "EMISSION_MANAGER"
      | "PRECISION"
      | "REVISION"
      | "REWARD_TOKEN"
      | "STAKE_TOKEN"
      | "assets"
      | "claimRewards"
      | "claimRewardsOnBehalf"
      | "claimRewardsToSelf"
      | "configureAssets"
      | "getAssetData"
      | "getClaimer"
      | "getDistributionEnd"
      | "getRewardsBalance"
      | "getUserAssetData"
      | "getUserUnclaimedRewards"
      | "handleAction"
      | "initialize"
      | "setClaimer"
      | "setDistributionEnd"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetConfigUpdated"
      | "AssetIndexUpdated"
      | "ClaimerSet"
      | "DistributionEndUpdated"
      | "RewardsAccrued"
      | "RewardsClaimed"
      | "UserIndexUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DISTRIBUTION_END",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EMISSION_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(functionFragment: "REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "REWARD_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAKE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assets", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike[], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsOnBehalf",
    values: [AddressLike[], BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewardsToSelf",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureAssets",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsBalance",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAssetData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserUnclaimedRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleAction",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionEnd",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_END",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EMISSION_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "REVISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "STAKE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewardsToSelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getClaimer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionEnd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAssetData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserUnclaimedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setClaimer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionEnd",
    data: BytesLike
  ): Result;
}

export namespace AssetConfigUpdatedEvent {
  export type InputTuple = [asset: AddressLike, emission: BigNumberish];
  export type OutputTuple = [asset: string, emission: bigint];
  export interface OutputObject {
    asset: string;
    emission: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetIndexUpdatedEvent {
  export type InputTuple = [asset: AddressLike, index: BigNumberish];
  export type OutputTuple = [asset: string, index: bigint];
  export interface OutputObject {
    asset: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimerSetEvent {
  export type InputTuple = [user: AddressLike, claimer: AddressLike];
  export type OutputTuple = [user: string, claimer: string];
  export interface OutputObject {
    user: string;
    claimer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DistributionEndUpdatedEvent {
  export type InputTuple = [newDistributionEnd: BigNumberish];
  export type OutputTuple = [newDistributionEnd: bigint];
  export interface OutputObject {
    newDistributionEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsAccruedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    to: AddressLike,
    claimer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    to: string,
    claimer: string,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    to: string;
    claimer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserIndexUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    asset: AddressLike,
    index: BigNumberish
  ];
  export type OutputTuple = [user: string, asset: string, index: bigint];
  export interface OutputObject {
    user: string;
    asset: string;
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StakedTokenIncentivesController extends BaseContract {
  connect(runner?: ContractRunner | null): StakedTokenIncentivesController;
  waitForDeployment(): Promise<this>;

  interface: StakedTokenIncentivesControllerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DISTRIBUTION_END: TypedContractMethod<[], [bigint], "view">;

  EMISSION_MANAGER: TypedContractMethod<[], [string], "view">;

  PRECISION: TypedContractMethod<[], [bigint], "view">;

  REVISION: TypedContractMethod<[], [bigint], "view">;

  REWARD_TOKEN: TypedContractMethod<[], [string], "view">;

  STAKE_TOKEN: TypedContractMethod<[], [string], "view">;

  assets: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        emissionPerSecond: bigint;
        index: bigint;
        lastUpdateTimestamp: bigint;
      }
    ],
    "view"
  >;

  claimRewards: TypedContractMethod<
    [assets: AddressLike[], amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimRewardsOnBehalf: TypedContractMethod<
    [
      assets: AddressLike[],
      amount: BigNumberish,
      user: AddressLike,
      to: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  claimRewardsToSelf: TypedContractMethod<
    [assets: AddressLike[], amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  configureAssets: TypedContractMethod<
    [assets: AddressLike[], emissionsPerSecond: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getAssetData: TypedContractMethod<
    [asset: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getClaimer: TypedContractMethod<[user: AddressLike], [string], "view">;

  getDistributionEnd: TypedContractMethod<[], [bigint], "view">;

  getRewardsBalance: TypedContractMethod<
    [assets: AddressLike[], user: AddressLike],
    [bigint],
    "view"
  >;

  getUserAssetData: TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [bigint],
    "view"
  >;

  getUserUnclaimedRewards: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  handleAction: TypedContractMethod<
    [user: AddressLike, totalSupply: BigNumberish, userBalance: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;

  setClaimer: TypedContractMethod<
    [user: AddressLike, caller: AddressLike],
    [void],
    "nonpayable"
  >;

  setDistributionEnd: TypedContractMethod<
    [distributionEnd: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DISTRIBUTION_END"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "EMISSION_MANAGER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REVISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "STAKE_TOKEN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        emissionPerSecond: bigint;
        index: bigint;
        lastUpdateTimestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [assets: AddressLike[], amount: BigNumberish, to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardsOnBehalf"
  ): TypedContractMethod<
    [
      assets: AddressLike[],
      amount: BigNumberish,
      user: AddressLike,
      to: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimRewardsToSelf"
  ): TypedContractMethod<
    [assets: AddressLike[], amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configureAssets"
  ): TypedContractMethod<
    [assets: AddressLike[], emissionsPerSecond: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAssetData"
  ): TypedContractMethod<
    [asset: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimer"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getDistributionEnd"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardsBalance"
  ): TypedContractMethod<
    [assets: AddressLike[], user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAssetData"
  ): TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserUnclaimedRewards"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "handleAction"
  ): TypedContractMethod<
    [user: AddressLike, totalSupply: BigNumberish, userBalance: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[arg0: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setClaimer"
  ): TypedContractMethod<
    [user: AddressLike, caller: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDistributionEnd"
  ): TypedContractMethod<[distributionEnd: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AssetConfigUpdated"
  ): TypedContractEvent<
    AssetConfigUpdatedEvent.InputTuple,
    AssetConfigUpdatedEvent.OutputTuple,
    AssetConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "AssetIndexUpdated"
  ): TypedContractEvent<
    AssetIndexUpdatedEvent.InputTuple,
    AssetIndexUpdatedEvent.OutputTuple,
    AssetIndexUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimerSet"
  ): TypedContractEvent<
    ClaimerSetEvent.InputTuple,
    ClaimerSetEvent.OutputTuple,
    ClaimerSetEvent.OutputObject
  >;
  getEvent(
    key: "DistributionEndUpdated"
  ): TypedContractEvent<
    DistributionEndUpdatedEvent.InputTuple,
    DistributionEndUpdatedEvent.OutputTuple,
    DistributionEndUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsAccrued"
  ): TypedContractEvent<
    RewardsAccruedEvent.InputTuple,
    RewardsAccruedEvent.OutputTuple,
    RewardsAccruedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "UserIndexUpdated"
  ): TypedContractEvent<
    UserIndexUpdatedEvent.InputTuple,
    UserIndexUpdatedEvent.OutputTuple,
    UserIndexUpdatedEvent.OutputObject
  >;

  filters: {
    "AssetConfigUpdated(address,uint256)": TypedContractEvent<
      AssetConfigUpdatedEvent.InputTuple,
      AssetConfigUpdatedEvent.OutputTuple,
      AssetConfigUpdatedEvent.OutputObject
    >;
    AssetConfigUpdated: TypedContractEvent<
      AssetConfigUpdatedEvent.InputTuple,
      AssetConfigUpdatedEvent.OutputTuple,
      AssetConfigUpdatedEvent.OutputObject
    >;

    "AssetIndexUpdated(address,uint256)": TypedContractEvent<
      AssetIndexUpdatedEvent.InputTuple,
      AssetIndexUpdatedEvent.OutputTuple,
      AssetIndexUpdatedEvent.OutputObject
    >;
    AssetIndexUpdated: TypedContractEvent<
      AssetIndexUpdatedEvent.InputTuple,
      AssetIndexUpdatedEvent.OutputTuple,
      AssetIndexUpdatedEvent.OutputObject
    >;

    "ClaimerSet(address,address)": TypedContractEvent<
      ClaimerSetEvent.InputTuple,
      ClaimerSetEvent.OutputTuple,
      ClaimerSetEvent.OutputObject
    >;
    ClaimerSet: TypedContractEvent<
      ClaimerSetEvent.InputTuple,
      ClaimerSetEvent.OutputTuple,
      ClaimerSetEvent.OutputObject
    >;

    "DistributionEndUpdated(uint256)": TypedContractEvent<
      DistributionEndUpdatedEvent.InputTuple,
      DistributionEndUpdatedEvent.OutputTuple,
      DistributionEndUpdatedEvent.OutputObject
    >;
    DistributionEndUpdated: TypedContractEvent<
      DistributionEndUpdatedEvent.InputTuple,
      DistributionEndUpdatedEvent.OutputTuple,
      DistributionEndUpdatedEvent.OutputObject
    >;

    "RewardsAccrued(address,uint256)": TypedContractEvent<
      RewardsAccruedEvent.InputTuple,
      RewardsAccruedEvent.OutputTuple,
      RewardsAccruedEvent.OutputObject
    >;
    RewardsAccrued: TypedContractEvent<
      RewardsAccruedEvent.InputTuple,
      RewardsAccruedEvent.OutputTuple,
      RewardsAccruedEvent.OutputObject
    >;

    "RewardsClaimed(address,address,address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "UserIndexUpdated(address,address,uint256)": TypedContractEvent<
      UserIndexUpdatedEvent.InputTuple,
      UserIndexUpdatedEvent.OutputTuple,
      UserIndexUpdatedEvent.OutputObject
    >;
    UserIndexUpdated: TypedContractEvent<
      UserIndexUpdatedEvent.InputTuple,
      UserIndexUpdatedEvent.OutputTuple,
      UserIndexUpdatedEvent.OutputObject
    >;
  };
}
