/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IMultiRewarder {
  export type RewardDetailsStruct = {
    rewardPerSec: BigNumberish;
    totalAllocPoints: BigNumberish;
    start: BigNumberish;
    end: BigNumberish;
    exists: boolean;
  };

  export type RewardDetailsStructOutput = [
    rewardPerSec: bigint,
    totalAllocPoints: bigint,
    start: bigint,
    end: bigint,
    exists: boolean
  ] & {
    rewardPerSec: bigint;
    totalAllocPoints: bigint;
    start: bigint;
    end: bigint;
    exists: boolean;
  };
}

export interface StargateMultiRewarderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allocPointsByReward"
      | "allocPointsByStake"
      | "connect"
      | "extendReward"
      | "getRewards"
      | "onUpdate"
      | "owner"
      | "renounceOwnership"
      | "rewardDetails"
      | "rewardTokens"
      | "setAllocPoints"
      | "setReward"
      | "staking"
      | "stopReward"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllocPointsSet"
      | "OwnershipTransferred"
      | "PoolRegistered"
      | "RewardExtended"
      | "RewardRegistered"
      | "RewardSet"
      | "RewardStopped"
      | "RewarderConnected"
      | "RewardsClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allocPointsByReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allocPointsByStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "connect",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extendReward",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onUpdate",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllocPoints",
    values: [AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stopReward",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocPointsByReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocPointsByStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllocPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stopReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AllocPointsSetEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    stakeToken: AddressLike[],
    allocPoint: BigNumberish[]
  ];
  export type OutputTuple = [
    rewardToken: string,
    stakeToken: string[],
    allocPoint: bigint[]
  ];
  export interface OutputObject {
    rewardToken: string;
    stakeToken: string[];
    allocPoint: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolRegisteredEvent {
  export type InputTuple = [rewardToken: AddressLike, stakeToken: AddressLike];
  export type OutputTuple = [rewardToken: string, stakeToken: string];
  export interface OutputObject {
    rewardToken: string;
    stakeToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardExtendedEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    amountAdded: BigNumberish,
    newEnd: BigNumberish
  ];
  export type OutputTuple = [
    rewardToken: string,
    amountAdded: bigint,
    newEnd: bigint
  ];
  export interface OutputObject {
    rewardToken: string;
    amountAdded: bigint;
    newEnd: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardRegisteredEvent {
  export type InputTuple = [rewardToken: AddressLike];
  export type OutputTuple = [rewardToken: string];
  export interface OutputObject {
    rewardToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardSetEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    amountAdded: BigNumberish,
    amountPeriod: BigNumberish,
    start: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    rewardToken: string,
    amountAdded: bigint,
    amountPeriod: bigint,
    start: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    rewardToken: string;
    amountAdded: bigint;
    amountPeriod: bigint;
    start: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardStoppedEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    receiver: AddressLike,
    pullTokens: boolean
  ];
  export type OutputTuple = [
    rewardToken: string,
    receiver: string,
    pullTokens: boolean
  ];
  export interface OutputObject {
    rewardToken: string;
    receiver: string;
    pullTokens: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewarderConnectedEvent {
  export type InputTuple = [stakingToken: AddressLike];
  export type OutputTuple = [stakingToken: string];
  export interface OutputObject {
    stakingToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    rewardTokens: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    user: string,
    rewardTokens: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    user: string;
    rewardTokens: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StargateMultiRewarder extends BaseContract {
  connect(runner?: ContractRunner | null): StargateMultiRewarder;
  waitForDeployment(): Promise<this>;

  interface: StargateMultiRewarderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allocPointsByReward: TypedContractMethod<
    [rewardToken: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;

  allocPointsByStake: TypedContractMethod<
    [stakingToken: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;

  extendReward: TypedContractMethod<
    [rewardToken: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  getRewards: TypedContractMethod<
    [stakingToken: AddressLike, user: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;

  onUpdate: TypedContractMethod<
    [
      stakingToken: AddressLike,
      user: AddressLike,
      oldStake: BigNumberish,
      oldSupply: BigNumberish,
      arg4: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  rewardDetails: TypedContractMethod<
    [rewardToken: AddressLike],
    [IMultiRewarder.RewardDetailsStructOutput],
    "view"
  >;

  rewardTokens: TypedContractMethod<[], [string[]], "view">;

  setAllocPoints: TypedContractMethod<
    [
      rewardToken: AddressLike,
      stakingTokens: AddressLike[],
      allocPoints: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  setReward: TypedContractMethod<
    [
      rewardToken: AddressLike,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "payable"
  >;

  staking: TypedContractMethod<[], [string], "view">;

  stopReward: TypedContractMethod<
    [rewardToken: AddressLike, receiver: AddressLike, pullTokens: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allocPointsByReward"
  ): TypedContractMethod<
    [rewardToken: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "allocPointsByStake"
  ): TypedContractMethod<
    [stakingToken: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "connect"
  ): TypedContractMethod<[stakingToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "extendReward"
  ): TypedContractMethod<
    [rewardToken: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getRewards"
  ): TypedContractMethod<
    [stakingToken: AddressLike, user: AddressLike],
    [[string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "onUpdate"
  ): TypedContractMethod<
    [
      stakingToken: AddressLike,
      user: AddressLike,
      oldStake: BigNumberish,
      oldSupply: BigNumberish,
      arg4: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "rewardDetails"
  ): TypedContractMethod<
    [rewardToken: AddressLike],
    [IMultiRewarder.RewardDetailsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "setAllocPoints"
  ): TypedContractMethod<
    [
      rewardToken: AddressLike,
      stakingTokens: AddressLike[],
      allocPoints: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReward"
  ): TypedContractMethod<
    [
      rewardToken: AddressLike,
      amount: BigNumberish,
      start: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "staking"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "stopReward"
  ): TypedContractMethod<
    [rewardToken: AddressLike, receiver: AddressLike, pullTokens: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AllocPointsSet"
  ): TypedContractEvent<
    AllocPointsSetEvent.InputTuple,
    AllocPointsSetEvent.OutputTuple,
    AllocPointsSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolRegistered"
  ): TypedContractEvent<
    PoolRegisteredEvent.InputTuple,
    PoolRegisteredEvent.OutputTuple,
    PoolRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RewardExtended"
  ): TypedContractEvent<
    RewardExtendedEvent.InputTuple,
    RewardExtendedEvent.OutputTuple,
    RewardExtendedEvent.OutputObject
  >;
  getEvent(
    key: "RewardRegistered"
  ): TypedContractEvent<
    RewardRegisteredEvent.InputTuple,
    RewardRegisteredEvent.OutputTuple,
    RewardRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RewardSet"
  ): TypedContractEvent<
    RewardSetEvent.InputTuple,
    RewardSetEvent.OutputTuple,
    RewardSetEvent.OutputObject
  >;
  getEvent(
    key: "RewardStopped"
  ): TypedContractEvent<
    RewardStoppedEvent.InputTuple,
    RewardStoppedEvent.OutputTuple,
    RewardStoppedEvent.OutputObject
  >;
  getEvent(
    key: "RewarderConnected"
  ): TypedContractEvent<
    RewarderConnectedEvent.InputTuple,
    RewarderConnectedEvent.OutputTuple,
    RewarderConnectedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;

  filters: {
    "AllocPointsSet(address,address[],uint48[])": TypedContractEvent<
      AllocPointsSetEvent.InputTuple,
      AllocPointsSetEvent.OutputTuple,
      AllocPointsSetEvent.OutputObject
    >;
    AllocPointsSet: TypedContractEvent<
      AllocPointsSetEvent.InputTuple,
      AllocPointsSetEvent.OutputTuple,
      AllocPointsSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolRegistered(address,address)": TypedContractEvent<
      PoolRegisteredEvent.InputTuple,
      PoolRegisteredEvent.OutputTuple,
      PoolRegisteredEvent.OutputObject
    >;
    PoolRegistered: TypedContractEvent<
      PoolRegisteredEvent.InputTuple,
      PoolRegisteredEvent.OutputTuple,
      PoolRegisteredEvent.OutputObject
    >;

    "RewardExtended(address,uint256,uint48)": TypedContractEvent<
      RewardExtendedEvent.InputTuple,
      RewardExtendedEvent.OutputTuple,
      RewardExtendedEvent.OutputObject
    >;
    RewardExtended: TypedContractEvent<
      RewardExtendedEvent.InputTuple,
      RewardExtendedEvent.OutputTuple,
      RewardExtendedEvent.OutputObject
    >;

    "RewardRegistered(address)": TypedContractEvent<
      RewardRegisteredEvent.InputTuple,
      RewardRegisteredEvent.OutputTuple,
      RewardRegisteredEvent.OutputObject
    >;
    RewardRegistered: TypedContractEvent<
      RewardRegisteredEvent.InputTuple,
      RewardRegisteredEvent.OutputTuple,
      RewardRegisteredEvent.OutputObject
    >;

    "RewardSet(address,uint256,uint256,uint48,uint48)": TypedContractEvent<
      RewardSetEvent.InputTuple,
      RewardSetEvent.OutputTuple,
      RewardSetEvent.OutputObject
    >;
    RewardSet: TypedContractEvent<
      RewardSetEvent.InputTuple,
      RewardSetEvent.OutputTuple,
      RewardSetEvent.OutputObject
    >;

    "RewardStopped(address,address,bool)": TypedContractEvent<
      RewardStoppedEvent.InputTuple,
      RewardStoppedEvent.OutputTuple,
      RewardStoppedEvent.OutputObject
    >;
    RewardStopped: TypedContractEvent<
      RewardStoppedEvent.InputTuple,
      RewardStoppedEvent.OutputTuple,
      RewardStoppedEvent.OutputObject
    >;

    "RewarderConnected(address)": TypedContractEvent<
      RewarderConnectedEvent.InputTuple,
      RewarderConnectedEvent.OutputTuple,
      RewarderConnectedEvent.OutputObject
    >;
    RewarderConnected: TypedContractEvent<
      RewarderConnectedEvent.InputTuple,
      RewarderConnectedEvent.OutputTuple,
      RewarderConnectedEvent.OutputObject
    >;

    "RewardsClaimed(address,address[],uint256[])": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
  };
}
