/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace Pool {
  export type CreditObjStruct = {
    credits: BigNumberish;
    idealBalance: BigNumberish;
  };

  export type CreditObjStructOutput = [
    credits: bigint,
    idealBalance: bigint
  ] & { credits: bigint; idealBalance: bigint };

  export type ChainPathStruct = {
    ready: boolean;
    dstChainId: BigNumberish;
    dstPoolId: BigNumberish;
    weight: BigNumberish;
    balance: BigNumberish;
    lkb: BigNumberish;
    credits: BigNumberish;
    idealBalance: BigNumberish;
  };

  export type ChainPathStructOutput = [
    ready: boolean,
    dstChainId: bigint,
    dstPoolId: bigint,
    weight: bigint,
    balance: bigint,
    lkb: bigint,
    credits: bigint,
    idealBalance: bigint
  ] & {
    ready: boolean;
    dstChainId: bigint;
    dstPoolId: bigint;
    weight: bigint;
    balance: bigint;
    lkb: bigint;
    credits: bigint;
    idealBalance: bigint;
  };

  export type SwapObjStruct = {
    amount: BigNumberish;
    eqFee: BigNumberish;
    eqReward: BigNumberish;
    lpFee: BigNumberish;
    protocolFee: BigNumberish;
    lkbRemove: BigNumberish;
  };

  export type SwapObjStructOutput = [
    amount: bigint,
    eqFee: bigint,
    eqReward: bigint,
    lpFee: bigint,
    protocolFee: bigint,
    lkbRemove: bigint
  ] & {
    amount: bigint;
    eqFee: bigint;
    eqReward: bigint;
    lpFee: bigint;
    protocolFee: bigint;
    lkbRemove: bigint;
  };
}

export interface StargateTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BP_DENOMINATOR"
      | "DOMAIN_SEPARATOR"
      | "PERMIT_TYPEHASH"
      | "activateChainPath"
      | "allowance"
      | "amountLPtoLD"
      | "approve"
      | "balanceOf"
      | "batched"
      | "callDelta"
      | "chainPathIndexLookup"
      | "chainPaths"
      | "convertRate"
      | "createChainPath"
      | "creditChainPath"
      | "decimals"
      | "decreaseAllowance"
      | "defaultLPMode"
      | "defaultSwapMode"
      | "deltaCredit"
      | "eqFeePool"
      | "feeLibrary"
      | "getChainPath"
      | "getChainPathsLength"
      | "increaseAllowance"
      | "instantRedeemLocal"
      | "localDecimals"
      | "lpDeltaBP"
      | "mint"
      | "mintFeeBP"
      | "mintFeeBalance"
      | "name"
      | "nonces"
      | "permit"
      | "poolId"
      | "protocolFeeBalance"
      | "redeemLocal"
      | "redeemLocalCallback"
      | "redeemLocalCheckOnRemote"
      | "redeemRemote"
      | "router"
      | "sendCredits"
      | "setDeltaParam"
      | "setFee"
      | "setFeeLibrary"
      | "setSwapStop"
      | "setWeightForChainPath"
      | "sharedDecimals"
      | "stopSwap"
      | "swap"
      | "swapDeltaBP"
      | "swapRemote"
      | "symbol"
      | "token"
      | "totalLiquidity"
      | "totalSupply"
      | "totalWeight"
      | "transfer"
      | "transferFrom"
      | "withdrawMintFeeBalance"
      | "withdrawProtocolFeeBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Burn"
      | "ChainPathUpdate"
      | "CreditChainPath"
      | "DeltaParamUpdated"
      | "FeeLibraryUpdated"
      | "FeesUpdated"
      | "InstantRedeemLocal"
      | "Mint"
      | "RedeemLocal"
      | "RedeemLocalCallback"
      | "RedeemRemote"
      | "SendCredits"
      | "StopSwapUpdated"
      | "Swap"
      | "SwapRemote"
      | "Transfer"
      | "WithdrawMintFeeBalance"
      | "WithdrawProtocolFeeBalance"
      | "WithdrawRemote"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BP_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activateChainPath",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "amountLPtoLD",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "batched", values?: undefined): string;
  encodeFunctionData(functionFragment: "callDelta", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "chainPathIndexLookup",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainPaths",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createChainPath",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "creditChainPath",
    values: [BigNumberish, BigNumberish, Pool.CreditObjStruct]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultLPMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSwapMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deltaCredit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eqFeePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainPath",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainPathsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "instantRedeemLocal",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "localDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpDeltaBP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mintFeeBP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintFeeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLocal",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLocalCallback",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLocalCheckOnRemote",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRemote",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sendCredits",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeltaParam",
    values: [boolean, BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeLibrary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapStop",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeightForChainPath",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stopSwap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapDeltaBP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRemote",
    values: [BigNumberish, BigNumberish, AddressLike, Pool.SwapObjStruct]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMintFeeBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProtocolFeeBalance",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BP_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountLPtoLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batched", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "callDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "chainPathIndexLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainPaths", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultLPMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSwapMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deltaCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eqFeePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeLibrary", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainPathsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instantRedeemLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "localDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpDeltaBP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintFeeBP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLocal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLocalCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLocalCheckOnRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeltaParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWeightForChainPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapDeltaBP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRemote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMintFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProtocolFeeBalance",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BurnEvent {
  export type InputTuple = [
    from: AddressLike,
    amountLP: BigNumberish,
    amountSD: BigNumberish
  ];
  export type OutputTuple = [from: string, amountLP: bigint, amountSD: bigint];
  export interface OutputObject {
    from: string;
    amountLP: bigint;
    amountSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChainPathUpdateEvent {
  export type InputTuple = [
    dstChainId: BigNumberish,
    dstPoolId: BigNumberish,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    dstChainId: bigint,
    dstPoolId: bigint,
    weight: bigint
  ];
  export interface OutputObject {
    dstChainId: bigint;
    dstPoolId: bigint;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditChainPathEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    srcPoolId: BigNumberish,
    amountSD: BigNumberish,
    idealBalance: BigNumberish
  ];
  export type OutputTuple = [
    chainId: bigint,
    srcPoolId: bigint,
    amountSD: bigint,
    idealBalance: bigint
  ];
  export interface OutputObject {
    chainId: bigint;
    srcPoolId: bigint;
    amountSD: bigint;
    idealBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeltaParamUpdatedEvent {
  export type InputTuple = [
    batched: boolean,
    swapDeltaBP: BigNumberish,
    lpDeltaBP: BigNumberish,
    defaultSwapMode: boolean,
    defaultLPMode: boolean
  ];
  export type OutputTuple = [
    batched: boolean,
    swapDeltaBP: bigint,
    lpDeltaBP: bigint,
    defaultSwapMode: boolean,
    defaultLPMode: boolean
  ];
  export interface OutputObject {
    batched: boolean;
    swapDeltaBP: bigint;
    lpDeltaBP: bigint;
    defaultSwapMode: boolean;
    defaultLPMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeLibraryUpdatedEvent {
  export type InputTuple = [feeLibraryAddr: AddressLike];
  export type OutputTuple = [feeLibraryAddr: string];
  export interface OutputObject {
    feeLibraryAddr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [mintFeeBP: BigNumberish];
  export type OutputTuple = [mintFeeBP: bigint];
  export interface OutputObject {
    mintFeeBP: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InstantRedeemLocalEvent {
  export type InputTuple = [
    from: AddressLike,
    amountLP: BigNumberish,
    amountSD: BigNumberish,
    to: AddressLike
  ];
  export type OutputTuple = [
    from: string,
    amountLP: bigint,
    amountSD: bigint,
    to: string
  ];
  export interface OutputObject {
    from: string;
    amountLP: bigint;
    amountSD: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    to: AddressLike,
    amountLP: BigNumberish,
    amountSD: BigNumberish,
    mintFeeAmountSD: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    amountLP: bigint,
    amountSD: bigint,
    mintFeeAmountSD: bigint
  ];
  export interface OutputObject {
    to: string;
    amountLP: bigint;
    amountSD: bigint;
    mintFeeAmountSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemLocalEvent {
  export type InputTuple = [
    from: AddressLike,
    amountLP: BigNumberish,
    amountSD: BigNumberish,
    chainId: BigNumberish,
    dstPoolId: BigNumberish,
    to: BytesLike
  ];
  export type OutputTuple = [
    from: string,
    amountLP: bigint,
    amountSD: bigint,
    chainId: bigint,
    dstPoolId: bigint,
    to: string
  ];
  export interface OutputObject {
    from: string;
    amountLP: bigint;
    amountSD: bigint;
    chainId: bigint;
    dstPoolId: bigint;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemLocalCallbackEvent {
  export type InputTuple = [
    _to: AddressLike,
    _amountSD: BigNumberish,
    _amountToMintSD: BigNumberish
  ];
  export type OutputTuple = [
    _to: string,
    _amountSD: bigint,
    _amountToMintSD: bigint
  ];
  export interface OutputObject {
    _to: string;
    _amountSD: bigint;
    _amountToMintSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemRemoteEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    dstPoolId: BigNumberish,
    from: AddressLike,
    amountLP: BigNumberish,
    amountSD: BigNumberish
  ];
  export type OutputTuple = [
    chainId: bigint,
    dstPoolId: bigint,
    from: string,
    amountLP: bigint,
    amountSD: bigint
  ];
  export interface OutputObject {
    chainId: bigint;
    dstPoolId: bigint;
    from: string;
    amountLP: bigint;
    amountSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendCreditsEvent {
  export type InputTuple = [
    dstChainId: BigNumberish,
    dstPoolId: BigNumberish,
    credits: BigNumberish,
    idealBalance: BigNumberish
  ];
  export type OutputTuple = [
    dstChainId: bigint,
    dstPoolId: bigint,
    credits: bigint,
    idealBalance: bigint
  ];
  export interface OutputObject {
    dstChainId: bigint;
    dstPoolId: bigint;
    credits: bigint;
    idealBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StopSwapUpdatedEvent {
  export type InputTuple = [swapStop: boolean];
  export type OutputTuple = [swapStop: boolean];
  export interface OutputObject {
    swapStop: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    chainId: BigNumberish,
    dstPoolId: BigNumberish,
    from: AddressLike,
    amountSD: BigNumberish,
    eqReward: BigNumberish,
    eqFee: BigNumberish,
    protocolFee: BigNumberish,
    lpFee: BigNumberish
  ];
  export type OutputTuple = [
    chainId: bigint,
    dstPoolId: bigint,
    from: string,
    amountSD: bigint,
    eqReward: bigint,
    eqFee: bigint,
    protocolFee: bigint,
    lpFee: bigint
  ];
  export interface OutputObject {
    chainId: bigint;
    dstPoolId: bigint;
    from: string;
    amountSD: bigint;
    eqReward: bigint;
    eqFee: bigint;
    protocolFee: bigint;
    lpFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapRemoteEvent {
  export type InputTuple = [
    to: AddressLike,
    amountSD: BigNumberish,
    protocolFee: BigNumberish,
    dstFee: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    amountSD: bigint,
    protocolFee: bigint,
    dstFee: bigint
  ];
  export interface OutputObject {
    to: string;
    amountSD: bigint;
    protocolFee: bigint;
    dstFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawMintFeeBalanceEvent {
  export type InputTuple = [to: AddressLike, amountSD: BigNumberish];
  export type OutputTuple = [to: string, amountSD: bigint];
  export interface OutputObject {
    to: string;
    amountSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawProtocolFeeBalanceEvent {
  export type InputTuple = [to: AddressLike, amountSD: BigNumberish];
  export type OutputTuple = [to: string, amountSD: bigint];
  export interface OutputObject {
    to: string;
    amountSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRemoteEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcPoolId: BigNumberish,
    swapAmount: BigNumberish,
    mintAmount: BigNumberish
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcPoolId: bigint,
    swapAmount: bigint,
    mintAmount: bigint
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcPoolId: bigint;
    swapAmount: bigint;
    mintAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StargateToken extends BaseContract {
  connect(runner?: ContractRunner | null): StargateToken;
  waitForDeployment(): Promise<this>;

  interface: StargateTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BP_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  activateChainPath: TypedContractMethod<
    [_dstChainId: BigNumberish, _dstPoolId: BigNumberish],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  amountLPtoLD: TypedContractMethod<
    [_amountLP: BigNumberish],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  batched: TypedContractMethod<[], [boolean], "view">;

  callDelta: TypedContractMethod<[_fullMode: boolean], [void], "nonpayable">;

  chainPathIndexLookup: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  chainPaths: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        ready: boolean;
        dstChainId: bigint;
        dstPoolId: bigint;
        weight: bigint;
        balance: bigint;
        lkb: bigint;
        credits: bigint;
        idealBalance: bigint;
      }
    ],
    "view"
  >;

  convertRate: TypedContractMethod<[], [bigint], "view">;

  createChainPath: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  creditChainPath: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _c: Pool.CreditObjStruct
    ],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  defaultLPMode: TypedContractMethod<[], [boolean], "view">;

  defaultSwapMode: TypedContractMethod<[], [boolean], "view">;

  deltaCredit: TypedContractMethod<[], [bigint], "view">;

  eqFeePool: TypedContractMethod<[], [bigint], "view">;

  feeLibrary: TypedContractMethod<[], [string], "view">;

  getChainPath: TypedContractMethod<
    [_dstChainId: BigNumberish, _dstPoolId: BigNumberish],
    [Pool.ChainPathStructOutput],
    "view"
  >;

  getChainPathsLength: TypedContractMethod<[], [bigint], "view">;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  instantRedeemLocal: TypedContractMethod<
    [_from: AddressLike, _amountLP: BigNumberish, _to: AddressLike],
    [bigint],
    "nonpayable"
  >;

  localDecimals: TypedContractMethod<[], [bigint], "view">;

  lpDeltaBP: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [_to: AddressLike, _amountLD: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  mintFeeBP: TypedContractMethod<[], [bigint], "view">;

  mintFeeBalance: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  poolId: TypedContractMethod<[], [bigint], "view">;

  protocolFeeBalance: TypedContractMethod<[], [bigint], "view">;

  redeemLocal: TypedContractMethod<
    [
      _from: AddressLike,
      _amountLP: BigNumberish,
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _to: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  redeemLocalCallback: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _to: AddressLike,
      _amountSD: BigNumberish,
      _amountToMintSD: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  redeemLocalCheckOnRemote: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _amountSD: BigNumberish
    ],
    [[bigint, bigint] & { swapAmount: bigint; mintAmount: bigint }],
    "nonpayable"
  >;

  redeemRemote: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _from: AddressLike,
      _amountLP: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  router: TypedContractMethod<[], [string], "view">;

  sendCredits: TypedContractMethod<
    [_dstChainId: BigNumberish, _dstPoolId: BigNumberish],
    [Pool.CreditObjStructOutput],
    "nonpayable"
  >;

  setDeltaParam: TypedContractMethod<
    [
      _batched: boolean,
      _swapDeltaBP: BigNumberish,
      _lpDeltaBP: BigNumberish,
      _defaultSwapMode: boolean,
      _defaultLPMode: boolean
    ],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<[_mintFeeBP: BigNumberish], [void], "nonpayable">;

  setFeeLibrary: TypedContractMethod<
    [_feeLibraryAddr: AddressLike],
    [void],
    "nonpayable"
  >;

  setSwapStop: TypedContractMethod<[_swapStop: boolean], [void], "nonpayable">;

  setWeightForChainPath: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  sharedDecimals: TypedContractMethod<[], [bigint], "view">;

  stopSwap: TypedContractMethod<[], [boolean], "view">;

  swap: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _from: AddressLike,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      newLiquidity: boolean
    ],
    [Pool.SwapObjStructOutput],
    "nonpayable"
  >;

  swapDeltaBP: TypedContractMethod<[], [bigint], "view">;

  swapRemote: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _to: AddressLike,
      _s: Pool.SwapObjStruct
    ],
    [bigint],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  totalLiquidity: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  totalWeight: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  withdrawMintFeeBalance: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawProtocolFeeBalance: TypedContractMethod<
    [_to: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BP_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "activateChainPath"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _dstPoolId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "amountLPtoLD"
  ): TypedContractMethod<[_amountLP: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batched"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "callDelta"
  ): TypedContractMethod<[_fullMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "chainPathIndexLookup"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "chainPaths"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        ready: boolean;
        dstChainId: bigint;
        dstPoolId: bigint;
        weight: bigint;
        balance: bigint;
        lkb: bigint;
        credits: bigint;
        idealBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createChainPath"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "creditChainPath"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _c: Pool.CreditObjStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultLPMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "defaultSwapMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deltaCredit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eqFeePool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeLibrary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getChainPath"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _dstPoolId: BigNumberish],
    [Pool.ChainPathStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChainPathsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "instantRedeemLocal"
  ): TypedContractMethod<
    [_from: AddressLike, _amountLP: BigNumberish, _to: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "localDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpDeltaBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_to: AddressLike, _amountLD: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintFeeBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintFeeBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "poolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolFeeBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeemLocal"
  ): TypedContractMethod<
    [
      _from: AddressLike,
      _amountLP: BigNumberish,
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _to: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemLocalCallback"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _to: AddressLike,
      _amountSD: BigNumberish,
      _amountToMintSD: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemLocalCheckOnRemote"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _amountSD: BigNumberish
    ],
    [[bigint, bigint] & { swapAmount: bigint; mintAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemRemote"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _from: AddressLike,
      _amountLP: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sendCredits"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _dstPoolId: BigNumberish],
    [Pool.CreditObjStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDeltaParam"
  ): TypedContractMethod<
    [
      _batched: boolean,
      _swapDeltaBP: BigNumberish,
      _lpDeltaBP: BigNumberish,
      _defaultSwapMode: boolean,
      _defaultLPMode: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<[_mintFeeBP: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeLibrary"
  ): TypedContractMethod<[_feeLibraryAddr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSwapStop"
  ): TypedContractMethod<[_swapStop: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWeightForChainPath"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _weight: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sharedDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stopSwap"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _dstPoolId: BigNumberish,
      _from: AddressLike,
      _amountLD: BigNumberish,
      _minAmountLD: BigNumberish,
      newLiquidity: boolean
    ],
    [Pool.SwapObjStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapDeltaBP"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swapRemote"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcPoolId: BigNumberish,
      _to: AddressLike,
      _s: Pool.SwapObjStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalLiquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWeight"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawMintFeeBalance"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawProtocolFeeBalance"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Burn"
  ): TypedContractEvent<
    BurnEvent.InputTuple,
    BurnEvent.OutputTuple,
    BurnEvent.OutputObject
  >;
  getEvent(
    key: "ChainPathUpdate"
  ): TypedContractEvent<
    ChainPathUpdateEvent.InputTuple,
    ChainPathUpdateEvent.OutputTuple,
    ChainPathUpdateEvent.OutputObject
  >;
  getEvent(
    key: "CreditChainPath"
  ): TypedContractEvent<
    CreditChainPathEvent.InputTuple,
    CreditChainPathEvent.OutputTuple,
    CreditChainPathEvent.OutputObject
  >;
  getEvent(
    key: "DeltaParamUpdated"
  ): TypedContractEvent<
    DeltaParamUpdatedEvent.InputTuple,
    DeltaParamUpdatedEvent.OutputTuple,
    DeltaParamUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeLibraryUpdated"
  ): TypedContractEvent<
    FeeLibraryUpdatedEvent.InputTuple,
    FeeLibraryUpdatedEvent.OutputTuple,
    FeeLibraryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "InstantRedeemLocal"
  ): TypedContractEvent<
    InstantRedeemLocalEvent.InputTuple,
    InstantRedeemLocalEvent.OutputTuple,
    InstantRedeemLocalEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "RedeemLocal"
  ): TypedContractEvent<
    RedeemLocalEvent.InputTuple,
    RedeemLocalEvent.OutputTuple,
    RedeemLocalEvent.OutputObject
  >;
  getEvent(
    key: "RedeemLocalCallback"
  ): TypedContractEvent<
    RedeemLocalCallbackEvent.InputTuple,
    RedeemLocalCallbackEvent.OutputTuple,
    RedeemLocalCallbackEvent.OutputObject
  >;
  getEvent(
    key: "RedeemRemote"
  ): TypedContractEvent<
    RedeemRemoteEvent.InputTuple,
    RedeemRemoteEvent.OutputTuple,
    RedeemRemoteEvent.OutputObject
  >;
  getEvent(
    key: "SendCredits"
  ): TypedContractEvent<
    SendCreditsEvent.InputTuple,
    SendCreditsEvent.OutputTuple,
    SendCreditsEvent.OutputObject
  >;
  getEvent(
    key: "StopSwapUpdated"
  ): TypedContractEvent<
    StopSwapUpdatedEvent.InputTuple,
    StopSwapUpdatedEvent.OutputTuple,
    StopSwapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "SwapRemote"
  ): TypedContractEvent<
    SwapRemoteEvent.InputTuple,
    SwapRemoteEvent.OutputTuple,
    SwapRemoteEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawMintFeeBalance"
  ): TypedContractEvent<
    WithdrawMintFeeBalanceEvent.InputTuple,
    WithdrawMintFeeBalanceEvent.OutputTuple,
    WithdrawMintFeeBalanceEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawProtocolFeeBalance"
  ): TypedContractEvent<
    WithdrawProtocolFeeBalanceEvent.InputTuple,
    WithdrawProtocolFeeBalanceEvent.OutputTuple,
    WithdrawProtocolFeeBalanceEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRemote"
  ): TypedContractEvent<
    WithdrawRemoteEvent.InputTuple,
    WithdrawRemoteEvent.OutputTuple,
    WithdrawRemoteEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Burn(address,uint256,uint256)": TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;
    Burn: TypedContractEvent<
      BurnEvent.InputTuple,
      BurnEvent.OutputTuple,
      BurnEvent.OutputObject
    >;

    "ChainPathUpdate(uint16,uint256,uint256)": TypedContractEvent<
      ChainPathUpdateEvent.InputTuple,
      ChainPathUpdateEvent.OutputTuple,
      ChainPathUpdateEvent.OutputObject
    >;
    ChainPathUpdate: TypedContractEvent<
      ChainPathUpdateEvent.InputTuple,
      ChainPathUpdateEvent.OutputTuple,
      ChainPathUpdateEvent.OutputObject
    >;

    "CreditChainPath(uint16,uint256,uint256,uint256)": TypedContractEvent<
      CreditChainPathEvent.InputTuple,
      CreditChainPathEvent.OutputTuple,
      CreditChainPathEvent.OutputObject
    >;
    CreditChainPath: TypedContractEvent<
      CreditChainPathEvent.InputTuple,
      CreditChainPathEvent.OutputTuple,
      CreditChainPathEvent.OutputObject
    >;

    "DeltaParamUpdated(bool,uint256,uint256,bool,bool)": TypedContractEvent<
      DeltaParamUpdatedEvent.InputTuple,
      DeltaParamUpdatedEvent.OutputTuple,
      DeltaParamUpdatedEvent.OutputObject
    >;
    DeltaParamUpdated: TypedContractEvent<
      DeltaParamUpdatedEvent.InputTuple,
      DeltaParamUpdatedEvent.OutputTuple,
      DeltaParamUpdatedEvent.OutputObject
    >;

    "FeeLibraryUpdated(address)": TypedContractEvent<
      FeeLibraryUpdatedEvent.InputTuple,
      FeeLibraryUpdatedEvent.OutputTuple,
      FeeLibraryUpdatedEvent.OutputObject
    >;
    FeeLibraryUpdated: TypedContractEvent<
      FeeLibraryUpdatedEvent.InputTuple,
      FeeLibraryUpdatedEvent.OutputTuple,
      FeeLibraryUpdatedEvent.OutputObject
    >;

    "FeesUpdated(uint256)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "InstantRedeemLocal(address,uint256,uint256,address)": TypedContractEvent<
      InstantRedeemLocalEvent.InputTuple,
      InstantRedeemLocalEvent.OutputTuple,
      InstantRedeemLocalEvent.OutputObject
    >;
    InstantRedeemLocal: TypedContractEvent<
      InstantRedeemLocalEvent.InputTuple,
      InstantRedeemLocalEvent.OutputTuple,
      InstantRedeemLocalEvent.OutputObject
    >;

    "Mint(address,uint256,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "RedeemLocal(address,uint256,uint256,uint16,uint256,bytes)": TypedContractEvent<
      RedeemLocalEvent.InputTuple,
      RedeemLocalEvent.OutputTuple,
      RedeemLocalEvent.OutputObject
    >;
    RedeemLocal: TypedContractEvent<
      RedeemLocalEvent.InputTuple,
      RedeemLocalEvent.OutputTuple,
      RedeemLocalEvent.OutputObject
    >;

    "RedeemLocalCallback(address,uint256,uint256)": TypedContractEvent<
      RedeemLocalCallbackEvent.InputTuple,
      RedeemLocalCallbackEvent.OutputTuple,
      RedeemLocalCallbackEvent.OutputObject
    >;
    RedeemLocalCallback: TypedContractEvent<
      RedeemLocalCallbackEvent.InputTuple,
      RedeemLocalCallbackEvent.OutputTuple,
      RedeemLocalCallbackEvent.OutputObject
    >;

    "RedeemRemote(uint16,uint256,address,uint256,uint256)": TypedContractEvent<
      RedeemRemoteEvent.InputTuple,
      RedeemRemoteEvent.OutputTuple,
      RedeemRemoteEvent.OutputObject
    >;
    RedeemRemote: TypedContractEvent<
      RedeemRemoteEvent.InputTuple,
      RedeemRemoteEvent.OutputTuple,
      RedeemRemoteEvent.OutputObject
    >;

    "SendCredits(uint16,uint256,uint256,uint256)": TypedContractEvent<
      SendCreditsEvent.InputTuple,
      SendCreditsEvent.OutputTuple,
      SendCreditsEvent.OutputObject
    >;
    SendCredits: TypedContractEvent<
      SendCreditsEvent.InputTuple,
      SendCreditsEvent.OutputTuple,
      SendCreditsEvent.OutputObject
    >;

    "StopSwapUpdated(bool)": TypedContractEvent<
      StopSwapUpdatedEvent.InputTuple,
      StopSwapUpdatedEvent.OutputTuple,
      StopSwapUpdatedEvent.OutputObject
    >;
    StopSwapUpdated: TypedContractEvent<
      StopSwapUpdatedEvent.InputTuple,
      StopSwapUpdatedEvent.OutputTuple,
      StopSwapUpdatedEvent.OutputObject
    >;

    "Swap(uint16,uint256,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "SwapRemote(address,uint256,uint256,uint256)": TypedContractEvent<
      SwapRemoteEvent.InputTuple,
      SwapRemoteEvent.OutputTuple,
      SwapRemoteEvent.OutputObject
    >;
    SwapRemote: TypedContractEvent<
      SwapRemoteEvent.InputTuple,
      SwapRemoteEvent.OutputTuple,
      SwapRemoteEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "WithdrawMintFeeBalance(address,uint256)": TypedContractEvent<
      WithdrawMintFeeBalanceEvent.InputTuple,
      WithdrawMintFeeBalanceEvent.OutputTuple,
      WithdrawMintFeeBalanceEvent.OutputObject
    >;
    WithdrawMintFeeBalance: TypedContractEvent<
      WithdrawMintFeeBalanceEvent.InputTuple,
      WithdrawMintFeeBalanceEvent.OutputTuple,
      WithdrawMintFeeBalanceEvent.OutputObject
    >;

    "WithdrawProtocolFeeBalance(address,uint256)": TypedContractEvent<
      WithdrawProtocolFeeBalanceEvent.InputTuple,
      WithdrawProtocolFeeBalanceEvent.OutputTuple,
      WithdrawProtocolFeeBalanceEvent.OutputObject
    >;
    WithdrawProtocolFeeBalance: TypedContractEvent<
      WithdrawProtocolFeeBalanceEvent.InputTuple,
      WithdrawProtocolFeeBalanceEvent.OutputTuple,
      WithdrawProtocolFeeBalanceEvent.OutputObject
    >;

    "WithdrawRemote(uint16,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawRemoteEvent.InputTuple,
      WithdrawRemoteEvent.OutputTuple,
      WithdrawRemoteEvent.OutputObject
    >;
    WithdrawRemote: TypedContractEvent<
      WithdrawRemoteEvent.InputTuple,
      WithdrawRemoteEvent.OutputTuple,
      WithdrawRemoteEvent.OutputObject
    >;
  };
}
