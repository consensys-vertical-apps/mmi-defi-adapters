/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CreditStruct = { srcEid: BigNumberish; amount: BigNumberish };

export type CreditStructOutput = [srcEid: bigint, amount: bigint] & {
  srcEid: bigint;
  amount: bigint;
};

export type SendParamStruct = {
  dstEid: BigNumberish;
  to: BytesLike;
  amountLD: BigNumberish;
  minAmountLD: BigNumberish;
  extraOptions: BytesLike;
  composeMsg: BytesLike;
  oftCmd: BytesLike;
};

export type SendParamStructOutput = [
  dstEid: bigint,
  to: string,
  amountLD: bigint,
  minAmountLD: bigint,
  extraOptions: string,
  composeMsg: string,
  oftCmd: string
] & {
  dstEid: bigint;
  to: string;
  amountLD: bigint;
  minAmountLD: bigint;
  extraOptions: string;
  composeMsg: string;
  oftCmd: string;
};

export type OFTLimitStruct = {
  minAmountLD: BigNumberish;
  maxAmountLD: BigNumberish;
};

export type OFTLimitStructOutput = [
  minAmountLD: bigint,
  maxAmountLD: bigint
] & { minAmountLD: bigint; maxAmountLD: bigint };

export type OFTFeeDetailStruct = {
  feeAmountLD: BigNumberish;
  description: string;
};

export type OFTFeeDetailStructOutput = [
  feeAmountLD: bigint,
  description: string
] & { feeAmountLD: bigint; description: string };

export type OFTReceiptStruct = {
  amountSentLD: BigNumberish;
  amountReceivedLD: BigNumberish;
};

export type OFTReceiptStructOutput = [
  amountSentLD: bigint,
  amountReceivedLD: bigint
] & { amountSentLD: bigint; amountReceivedLD: bigint };

export type MessagingFeeStruct = {
  nativeFee: BigNumberish;
  lzTokenFee: BigNumberish;
};

export type MessagingFeeStructOutput = [
  nativeFee: bigint,
  lzTokenFee: bigint
] & { nativeFee: bigint; lzTokenFee: bigint };

export type OriginStruct = {
  srcEid: BigNumberish;
  sender: BytesLike;
  nonce: BigNumberish;
};

export type OriginStructOutput = [
  srcEid: bigint,
  sender: string,
  nonce: bigint
] & { srcEid: bigint; sender: string; nonce: bigint };

export type MessagingReceiptStruct = {
  guid: BytesLike;
  nonce: BigNumberish;
  fee: MessagingFeeStruct;
};

export type MessagingReceiptStructOutput = [
  guid: string,
  nonce: bigint,
  fee: MessagingFeeStructOutput
] & { guid: string; nonce: bigint; fee: MessagingFeeStructOutput };

export type TargetCreditStruct = {
  srcEid: BigNumberish;
  amount: BigNumberish;
  minAmount: BigNumberish;
};

export type TargetCreditStructOutput = [
  srcEid: bigint,
  amount: bigint,
  minAmount: bigint
] & { srcEid: bigint; amount: bigint; minAmount: bigint };

export type TicketStruct = {
  ticketId: BigNumberish;
  passengerBytes: BytesLike;
};

export type TicketStructOutput = [ticketId: bigint, passengerBytes: string] & {
  ticketId: bigint;
  passengerBytes: string;
};

export declare namespace StargateBase {
  export type AddressConfigStruct = {
    feeLib: AddressLike;
    planner: AddressLike;
    treasurer: AddressLike;
    tokenMessaging: AddressLike;
    creditMessaging: AddressLike;
    lzToken: AddressLike;
  };

  export type AddressConfigStructOutput = [
    feeLib: string,
    planner: string,
    treasurer: string,
    tokenMessaging: string,
    creditMessaging: string,
    lzToken: string
  ] & {
    feeLib: string;
    planner: string;
    treasurer: string;
    tokenMessaging: string;
    creditMessaging: string;
    lzToken: string;
  };
}

export interface StargatePoolNativeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTreasuryFee"
      | "approvalRequired"
      | "deficitOffset"
      | "deposit"
      | "endpoint"
      | "getAddressConfig"
      | "getTransferGasLimit"
      | "localEid"
      | "lpToken"
      | "oftVersion"
      | "owner"
      | "paths"
      | "plannerFee"
      | "poolBalance"
      | "quoteOFT"
      | "quoteRedeemSend"
      | "quoteSend"
      | "receiveCredits"
      | "receiveTokenBus"
      | "receiveTokenTaxi"
      | "recoverToken"
      | "redeem"
      | "redeemSend"
      | "redeemable"
      | "renounceOwnership"
      | "retryReceiveToken"
      | "send"
      | "sendCredits"
      | "sendToken"
      | "setAddressConfig"
      | "setDeficitOffset"
      | "setOFTPath"
      | "setPause"
      | "setTransferGasLimit"
      | "sharedDecimals"
      | "stargateType"
      | "status"
      | "token"
      | "transferOwnership"
      | "treasuryFee"
      | "tvl"
      | "unreceivedTokens"
      | "withdrawPlannerFee"
      | "withdrawTreasuryFee"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressConfigSet"
      | "CreditsReceived"
      | "CreditsSent"
      | "Deposited"
      | "OFTPathSet"
      | "OFTReceived"
      | "OFTSent"
      | "OwnershipTransferred"
      | "PauseSet"
      | "PlannerFeeWithdrawn"
      | "Redeemed"
      | "TreasuryFeeAdded"
      | "TreasuryFeeWithdrawn"
      | "UnreceivedTokenCached"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTreasuryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approvalRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deficitOffset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAddressConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "localEid", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oftVersion",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paths", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "plannerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOFT",
    values: [SendParamStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteRedeemSend",
    values: [SendParamStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteSend",
    values: [SendParamStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveCredits",
    values: [BigNumberish, CreditStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveTokenBus",
    values: [OriginStruct, BytesLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveTokenTaxi",
    values: [OriginStruct, BytesLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemSend",
    values: [SendParamStruct, MessagingFeeStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryReceiveToken",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [SendParamStruct, MessagingFeeStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCredits",
    values: [BigNumberish, TargetCreditStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToken",
    values: [SendParamStruct, MessagingFeeStruct, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddressConfig",
    values: [StargateBase.AddressConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeficitOffset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOFTPath",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setPause", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setTransferGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharedDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stargateType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tvl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unreceivedTokens",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPlannerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTreasuryFee",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deficitOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "localEid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oftVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "plannerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteOFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteRedeemSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteSend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveTokenBus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveTokenTaxi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemSend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryReceiveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeficitOffset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOFTPath", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTransferGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharedDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stargateType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tvl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unreceivedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPlannerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTreasuryFee",
    data: BytesLike
  ): Result;
}

export namespace AddressConfigSetEvent {
  export type InputTuple = [config: StargateBase.AddressConfigStruct];
  export type OutputTuple = [config: StargateBase.AddressConfigStructOutput];
  export interface OutputObject {
    config: StargateBase.AddressConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditsReceivedEvent {
  export type InputTuple = [srcEid: BigNumberish, credits: CreditStruct[]];
  export type OutputTuple = [srcEid: bigint, credits: CreditStructOutput[]];
  export interface OutputObject {
    srcEid: bigint;
    credits: CreditStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditsSentEvent {
  export type InputTuple = [dstEid: BigNumberish, credits: CreditStruct[]];
  export type OutputTuple = [dstEid: bigint, credits: CreditStructOutput[]];
  export interface OutputObject {
    dstEid: bigint;
    credits: CreditStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    payer: AddressLike,
    receiver: AddressLike,
    amountLD: BigNumberish
  ];
  export type OutputTuple = [payer: string, receiver: string, amountLD: bigint];
  export interface OutputObject {
    payer: string;
    receiver: string;
    amountLD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OFTPathSetEvent {
  export type InputTuple = [dstEid: BigNumberish, oft: boolean];
  export type OutputTuple = [dstEid: bigint, oft: boolean];
  export interface OutputObject {
    dstEid: bigint;
    oft: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OFTReceivedEvent {
  export type InputTuple = [
    guid: BytesLike,
    srcEid: BigNumberish,
    toAddress: AddressLike,
    amountReceivedLD: BigNumberish
  ];
  export type OutputTuple = [
    guid: string,
    srcEid: bigint,
    toAddress: string,
    amountReceivedLD: bigint
  ];
  export interface OutputObject {
    guid: string;
    srcEid: bigint;
    toAddress: string;
    amountReceivedLD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OFTSentEvent {
  export type InputTuple = [
    guid: BytesLike,
    dstEid: BigNumberish,
    fromAddress: AddressLike,
    amountSentLD: BigNumberish,
    amountReceivedLD: BigNumberish
  ];
  export type OutputTuple = [
    guid: string,
    dstEid: bigint,
    fromAddress: string,
    amountSentLD: bigint,
    amountReceivedLD: bigint
  ];
  export interface OutputObject {
    guid: string;
    dstEid: bigint;
    fromAddress: string;
    amountSentLD: bigint;
    amountReceivedLD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PauseSetEvent {
  export type InputTuple = [paused: boolean];
  export type OutputTuple = [paused: boolean];
  export interface OutputObject {
    paused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlannerFeeWithdrawnEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedEvent {
  export type InputTuple = [
    payer: AddressLike,
    receiver: AddressLike,
    amountLD: BigNumberish
  ];
  export type OutputTuple = [payer: string, receiver: string, amountLD: bigint];
  export interface OutputObject {
    payer: string;
    receiver: string;
    amountLD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryFeeAddedEvent {
  export type InputTuple = [amountSD: BigNumberish];
  export type OutputTuple = [amountSD: bigint];
  export interface OutputObject {
    amountSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryFeeWithdrawnEvent {
  export type InputTuple = [to: AddressLike, amountSD: BigNumberish];
  export type OutputTuple = [to: string, amountSD: bigint];
  export interface OutputObject {
    to: string;
    amountSD: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnreceivedTokenCachedEvent {
  export type InputTuple = [
    guid: BytesLike,
    index: BigNumberish,
    srcEid: BigNumberish,
    receiver: AddressLike,
    amountLD: BigNumberish,
    composeMsg: BytesLike
  ];
  export type OutputTuple = [
    guid: string,
    index: bigint,
    srcEid: bigint,
    receiver: string,
    amountLD: bigint,
    composeMsg: string
  ];
  export interface OutputObject {
    guid: string;
    index: bigint;
    srcEid: bigint;
    receiver: string;
    amountLD: bigint;
    composeMsg: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StargatePoolNative extends BaseContract {
  connect(runner?: ContractRunner | null): StargatePoolNative;
  waitForDeployment(): Promise<this>;

  interface: StargatePoolNativeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTreasuryFee: TypedContractMethod<
    [_amountLD: BigNumberish],
    [void],
    "payable"
  >;

  approvalRequired: TypedContractMethod<[], [boolean], "view">;

  deficitOffset: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [_receiver: AddressLike, _amountLD: BigNumberish],
    [bigint],
    "payable"
  >;

  endpoint: TypedContractMethod<[], [string], "view">;

  getAddressConfig: TypedContractMethod<
    [],
    [StargateBase.AddressConfigStructOutput],
    "view"
  >;

  getTransferGasLimit: TypedContractMethod<[], [bigint], "view">;

  localEid: TypedContractMethod<[], [bigint], "view">;

  lpToken: TypedContractMethod<[], [string], "view">;

  oftVersion: TypedContractMethod<
    [],
    [[string, bigint] & { interfaceId: string; version: bigint }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  paths: TypedContractMethod<[eid: BigNumberish], [bigint], "view">;

  plannerFee: TypedContractMethod<[], [bigint], "view">;

  poolBalance: TypedContractMethod<[], [bigint], "view">;

  quoteOFT: TypedContractMethod<
    [_sendParam: SendParamStruct],
    [
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        limit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        receipt: OFTReceiptStructOutput;
      }
    ],
    "view"
  >;

  quoteRedeemSend: TypedContractMethod<
    [_sendParam: SendParamStruct, _payInLzToken: boolean],
    [MessagingFeeStructOutput],
    "view"
  >;

  quoteSend: TypedContractMethod<
    [_sendParam: SendParamStruct, _payInLzToken: boolean],
    [MessagingFeeStructOutput],
    "view"
  >;

  receiveCredits: TypedContractMethod<
    [_srcEid: BigNumberish, _credits: CreditStruct[]],
    [void],
    "nonpayable"
  >;

  receiveTokenBus: TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _seatNumber: BigNumberish,
      _receiver: AddressLike,
      _amountSD: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  receiveTokenTaxi: TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _receiver: AddressLike,
      _amountSD: BigNumberish,
      _composeMsg: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  recoverToken: TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  redeem: TypedContractMethod<
    [_amountLD: BigNumberish, _receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  redeemSend: TypedContractMethod<
    [
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: AddressLike
    ],
    [
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    ],
    "payable"
  >;

  redeemable: TypedContractMethod<[_owner: AddressLike], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retryReceiveToken: TypedContractMethod<
    [
      _guid: BytesLike,
      _index: BigNumberish,
      _srcEid: BigNumberish,
      _receiver: AddressLike,
      _amountLD: BigNumberish,
      _composeMsg: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  send: TypedContractMethod<
    [
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: AddressLike
    ],
    [
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    ],
    "payable"
  >;

  sendCredits: TypedContractMethod<
    [_dstEid: BigNumberish, _credits: TargetCreditStruct[]],
    [CreditStructOutput[]],
    "nonpayable"
  >;

  sendToken: TypedContractMethod<
    [
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: AddressLike
    ],
    [
      [
        MessagingReceiptStructOutput,
        OFTReceiptStructOutput,
        TicketStructOutput
      ] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
        ticket: TicketStructOutput;
      }
    ],
    "payable"
  >;

  setAddressConfig: TypedContractMethod<
    [_config: StargateBase.AddressConfigStruct],
    [void],
    "nonpayable"
  >;

  setDeficitOffset: TypedContractMethod<
    [_deficitOffsetLD: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOFTPath: TypedContractMethod<
    [_dstEid: BigNumberish, _oft: boolean],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setTransferGasLimit: TypedContractMethod<
    [_gasLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  sharedDecimals: TypedContractMethod<[], [bigint], "view">;

  stargateType: TypedContractMethod<[], [bigint], "view">;

  status: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryFee: TypedContractMethod<[], [bigint], "view">;

  tvl: TypedContractMethod<[], [bigint], "view">;

  unreceivedTokens: TypedContractMethod<
    [guid: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;

  withdrawPlannerFee: TypedContractMethod<[], [void], "nonpayable">;

  withdrawTreasuryFee: TypedContractMethod<
    [_to: AddressLike, _amountSD: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTreasuryFee"
  ): TypedContractMethod<[_amountLD: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "approvalRequired"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deficitOffset"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_receiver: AddressLike, _amountLD: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAddressConfig"
  ): TypedContractMethod<[], [StargateBase.AddressConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getTransferGasLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "localEid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oftVersion"
  ): TypedContractMethod<
    [],
    [[string, bigint] & { interfaceId: string; version: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paths"
  ): TypedContractMethod<[eid: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "plannerFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "poolBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteOFT"
  ): TypedContractMethod<
    [_sendParam: SendParamStruct],
    [
      [
        OFTLimitStructOutput,
        OFTFeeDetailStructOutput[],
        OFTReceiptStructOutput
      ] & {
        limit: OFTLimitStructOutput;
        oftFeeDetails: OFTFeeDetailStructOutput[];
        receipt: OFTReceiptStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteRedeemSend"
  ): TypedContractMethod<
    [_sendParam: SendParamStruct, _payInLzToken: boolean],
    [MessagingFeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "quoteSend"
  ): TypedContractMethod<
    [_sendParam: SendParamStruct, _payInLzToken: boolean],
    [MessagingFeeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "receiveCredits"
  ): TypedContractMethod<
    [_srcEid: BigNumberish, _credits: CreditStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveTokenBus"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _seatNumber: BigNumberish,
      _receiver: AddressLike,
      _amountSD: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveTokenTaxi"
  ): TypedContractMethod<
    [
      _origin: OriginStruct,
      _guid: BytesLike,
      _receiver: AddressLike,
      _amountSD: BigNumberish,
      _composeMsg: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverToken"
  ): TypedContractMethod<
    [_token: AddressLike, _to: AddressLike, _amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [_amountLD: BigNumberish, _receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemSend"
  ): TypedContractMethod<
    [
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: AddressLike
    ],
    [
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "redeemable"
  ): TypedContractMethod<[_owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retryReceiveToken"
  ): TypedContractMethod<
    [
      _guid: BytesLike,
      _index: BigNumberish,
      _srcEid: BigNumberish,
      _receiver: AddressLike,
      _amountLD: BigNumberish,
      _composeMsg: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: AddressLike
    ],
    [
      [MessagingReceiptStructOutput, OFTReceiptStructOutput] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendCredits"
  ): TypedContractMethod<
    [_dstEid: BigNumberish, _credits: TargetCreditStruct[]],
    [CreditStructOutput[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendToken"
  ): TypedContractMethod<
    [
      _sendParam: SendParamStruct,
      _fee: MessagingFeeStruct,
      _refundAddress: AddressLike
    ],
    [
      [
        MessagingReceiptStructOutput,
        OFTReceiptStructOutput,
        TicketStructOutput
      ] & {
        msgReceipt: MessagingReceiptStructOutput;
        oftReceipt: OFTReceiptStructOutput;
        ticket: TicketStructOutput;
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setAddressConfig"
  ): TypedContractMethod<
    [_config: StargateBase.AddressConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDeficitOffset"
  ): TypedContractMethod<
    [_deficitOffsetLD: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOFTPath"
  ): TypedContractMethod<
    [_dstEid: BigNumberish, _oft: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTransferGasLimit"
  ): TypedContractMethod<[_gasLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sharedDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stargateType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tvl"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unreceivedTokens"
  ): TypedContractMethod<
    [guid: BytesLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawPlannerFee"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTreasuryFee"
  ): TypedContractMethod<
    [_to: AddressLike, _amountSD: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddressConfigSet"
  ): TypedContractEvent<
    AddressConfigSetEvent.InputTuple,
    AddressConfigSetEvent.OutputTuple,
    AddressConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "CreditsReceived"
  ): TypedContractEvent<
    CreditsReceivedEvent.InputTuple,
    CreditsReceivedEvent.OutputTuple,
    CreditsReceivedEvent.OutputObject
  >;
  getEvent(
    key: "CreditsSent"
  ): TypedContractEvent<
    CreditsSentEvent.InputTuple,
    CreditsSentEvent.OutputTuple,
    CreditsSentEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "OFTPathSet"
  ): TypedContractEvent<
    OFTPathSetEvent.InputTuple,
    OFTPathSetEvent.OutputTuple,
    OFTPathSetEvent.OutputObject
  >;
  getEvent(
    key: "OFTReceived"
  ): TypedContractEvent<
    OFTReceivedEvent.InputTuple,
    OFTReceivedEvent.OutputTuple,
    OFTReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OFTSent"
  ): TypedContractEvent<
    OFTSentEvent.InputTuple,
    OFTSentEvent.OutputTuple,
    OFTSentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PauseSet"
  ): TypedContractEvent<
    PauseSetEvent.InputTuple,
    PauseSetEvent.OutputTuple,
    PauseSetEvent.OutputObject
  >;
  getEvent(
    key: "PlannerFeeWithdrawn"
  ): TypedContractEvent<
    PlannerFeeWithdrawnEvent.InputTuple,
    PlannerFeeWithdrawnEvent.OutputTuple,
    PlannerFeeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Redeemed"
  ): TypedContractEvent<
    RedeemedEvent.InputTuple,
    RedeemedEvent.OutputTuple,
    RedeemedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryFeeAdded"
  ): TypedContractEvent<
    TreasuryFeeAddedEvent.InputTuple,
    TreasuryFeeAddedEvent.OutputTuple,
    TreasuryFeeAddedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryFeeWithdrawn"
  ): TypedContractEvent<
    TreasuryFeeWithdrawnEvent.InputTuple,
    TreasuryFeeWithdrawnEvent.OutputTuple,
    TreasuryFeeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "UnreceivedTokenCached"
  ): TypedContractEvent<
    UnreceivedTokenCachedEvent.InputTuple,
    UnreceivedTokenCachedEvent.OutputTuple,
    UnreceivedTokenCachedEvent.OutputObject
  >;

  filters: {
    "AddressConfigSet(tuple)": TypedContractEvent<
      AddressConfigSetEvent.InputTuple,
      AddressConfigSetEvent.OutputTuple,
      AddressConfigSetEvent.OutputObject
    >;
    AddressConfigSet: TypedContractEvent<
      AddressConfigSetEvent.InputTuple,
      AddressConfigSetEvent.OutputTuple,
      AddressConfigSetEvent.OutputObject
    >;

    "CreditsReceived(uint32,tuple[])": TypedContractEvent<
      CreditsReceivedEvent.InputTuple,
      CreditsReceivedEvent.OutputTuple,
      CreditsReceivedEvent.OutputObject
    >;
    CreditsReceived: TypedContractEvent<
      CreditsReceivedEvent.InputTuple,
      CreditsReceivedEvent.OutputTuple,
      CreditsReceivedEvent.OutputObject
    >;

    "CreditsSent(uint32,tuple[])": TypedContractEvent<
      CreditsSentEvent.InputTuple,
      CreditsSentEvent.OutputTuple,
      CreditsSentEvent.OutputObject
    >;
    CreditsSent: TypedContractEvent<
      CreditsSentEvent.InputTuple,
      CreditsSentEvent.OutputTuple,
      CreditsSentEvent.OutputObject
    >;

    "Deposited(address,address,uint256)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "OFTPathSet(uint32,bool)": TypedContractEvent<
      OFTPathSetEvent.InputTuple,
      OFTPathSetEvent.OutputTuple,
      OFTPathSetEvent.OutputObject
    >;
    OFTPathSet: TypedContractEvent<
      OFTPathSetEvent.InputTuple,
      OFTPathSetEvent.OutputTuple,
      OFTPathSetEvent.OutputObject
    >;

    "OFTReceived(bytes32,uint32,address,uint256)": TypedContractEvent<
      OFTReceivedEvent.InputTuple,
      OFTReceivedEvent.OutputTuple,
      OFTReceivedEvent.OutputObject
    >;
    OFTReceived: TypedContractEvent<
      OFTReceivedEvent.InputTuple,
      OFTReceivedEvent.OutputTuple,
      OFTReceivedEvent.OutputObject
    >;

    "OFTSent(bytes32,uint32,address,uint256,uint256)": TypedContractEvent<
      OFTSentEvent.InputTuple,
      OFTSentEvent.OutputTuple,
      OFTSentEvent.OutputObject
    >;
    OFTSent: TypedContractEvent<
      OFTSentEvent.InputTuple,
      OFTSentEvent.OutputTuple,
      OFTSentEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PauseSet(bool)": TypedContractEvent<
      PauseSetEvent.InputTuple,
      PauseSetEvent.OutputTuple,
      PauseSetEvent.OutputObject
    >;
    PauseSet: TypedContractEvent<
      PauseSetEvent.InputTuple,
      PauseSetEvent.OutputTuple,
      PauseSetEvent.OutputObject
    >;

    "PlannerFeeWithdrawn(uint256)": TypedContractEvent<
      PlannerFeeWithdrawnEvent.InputTuple,
      PlannerFeeWithdrawnEvent.OutputTuple,
      PlannerFeeWithdrawnEvent.OutputObject
    >;
    PlannerFeeWithdrawn: TypedContractEvent<
      PlannerFeeWithdrawnEvent.InputTuple,
      PlannerFeeWithdrawnEvent.OutputTuple,
      PlannerFeeWithdrawnEvent.OutputObject
    >;

    "Redeemed(address,address,uint256)": TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
    Redeemed: TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;

    "TreasuryFeeAdded(uint64)": TypedContractEvent<
      TreasuryFeeAddedEvent.InputTuple,
      TreasuryFeeAddedEvent.OutputTuple,
      TreasuryFeeAddedEvent.OutputObject
    >;
    TreasuryFeeAdded: TypedContractEvent<
      TreasuryFeeAddedEvent.InputTuple,
      TreasuryFeeAddedEvent.OutputTuple,
      TreasuryFeeAddedEvent.OutputObject
    >;

    "TreasuryFeeWithdrawn(address,uint64)": TypedContractEvent<
      TreasuryFeeWithdrawnEvent.InputTuple,
      TreasuryFeeWithdrawnEvent.OutputTuple,
      TreasuryFeeWithdrawnEvent.OutputObject
    >;
    TreasuryFeeWithdrawn: TypedContractEvent<
      TreasuryFeeWithdrawnEvent.InputTuple,
      TreasuryFeeWithdrawnEvent.OutputTuple,
      TreasuryFeeWithdrawnEvent.OutputObject
    >;

    "UnreceivedTokenCached(bytes32,uint8,uint32,address,uint256,bytes)": TypedContractEvent<
      UnreceivedTokenCachedEvent.InputTuple,
      UnreceivedTokenCachedEvent.OutputTuple,
      UnreceivedTokenCachedEvent.OutputObject
    >;
    UnreceivedTokenCached: TypedContractEvent<
      UnreceivedTokenCachedEvent.InputTuple,
      UnreceivedTokenCachedEvent.OutputTuple,
      UnreceivedTokenCachedEvent.OutputObject
    >;
  };
}
