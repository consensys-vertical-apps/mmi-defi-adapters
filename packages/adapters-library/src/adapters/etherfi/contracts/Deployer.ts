/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authority"
      | "convertNameToBytes32"
      | "deployContract"
      | "getAddress"
      | "isDeployer"
      | "owner"
      | "setAuthority"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorityUpdated"
      | "ContractDeployed"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertNameToBytes32",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployContract",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAddress", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isDeployer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertNameToBytes32",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDeployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AuthorityUpdatedEvent {
  export type InputTuple = [user: AddressLike, newAuthority: AddressLike];
  export type OutputTuple = [user: string, newAuthority: string];
  export interface OutputObject {
    user: string;
    newAuthority: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractDeployedEvent {
  export type InputTuple = [
    name: string,
    contractAddress: AddressLike,
    creationCodeHash: BytesLike
  ];
  export type OutputTuple = [
    name: string,
    contractAddress: string,
    creationCodeHash: string
  ];
  export interface OutputObject {
    name: string;
    contractAddress: string;
    creationCodeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Deployer extends BaseContract {
  connect(runner?: ContractRunner | null): Deployer;
  waitForDeployment(): Promise<this>;

  interface: DeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authority: TypedContractMethod<[], [string], "view">;

  convertNameToBytes32: TypedContractMethod<[name: string], [string], "view">;

  deployContract: TypedContractMethod<
    [
      name: string,
      creationCode: BytesLike,
      constructorArgs: BytesLike,
      value: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getAddress: TypedContractMethod<[name: string], [string], "view">;

  isDeployer: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setAuthority: TypedContractMethod<
    [newAuthority: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "convertNameToBytes32"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "deployContract"
  ): TypedContractMethod<
    [
      name: string,
      creationCode: BytesLike,
      constructorArgs: BytesLike,
      value: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAddress"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "isDeployer"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthority"
  ): TypedContractMethod<[newAuthority: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AuthorityUpdated"
  ): TypedContractEvent<
    AuthorityUpdatedEvent.InputTuple,
    AuthorityUpdatedEvent.OutputTuple,
    AuthorityUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContractDeployed"
  ): TypedContractEvent<
    ContractDeployedEvent.InputTuple,
    ContractDeployedEvent.OutputTuple,
    ContractDeployedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AuthorityUpdated(address,address)": TypedContractEvent<
      AuthorityUpdatedEvent.InputTuple,
      AuthorityUpdatedEvent.OutputTuple,
      AuthorityUpdatedEvent.OutputObject
    >;
    AuthorityUpdated: TypedContractEvent<
      AuthorityUpdatedEvent.InputTuple,
      AuthorityUpdatedEvent.OutputTuple,
      AuthorityUpdatedEvent.OutputObject
    >;

    "ContractDeployed(string,address,bytes32)": TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;
    ContractDeployed: TypedContractEvent<
      ContractDeployedEvent.InputTuple,
      ContractDeployedEvent.OutputTuple,
      ContractDeployedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
