/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MetamorphofactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "MORPHO" | "createMetaMorpho" | "isMetaMorpho"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "CreateMetaMorpho"): EventFragment;

  encodeFunctionData(functionFragment: "MORPHO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createMetaMorpho",
    values: [AddressLike, BigNumberish, AddressLike, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMetaMorpho",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "MORPHO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMetaMorpho",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMetaMorpho",
    data: BytesLike
  ): Result;
}

export namespace CreateMetaMorphoEvent {
  export type InputTuple = [
    metaMorpho: AddressLike,
    caller: AddressLike,
    initialOwner: AddressLike,
    initialTimelock: BigNumberish,
    asset: AddressLike,
    name: string,
    symbol: string,
    salt: BytesLike
  ];
  export type OutputTuple = [
    metaMorpho: string,
    caller: string,
    initialOwner: string,
    initialTimelock: bigint,
    asset: string,
    name: string,
    symbol: string,
    salt: string
  ];
  export interface OutputObject {
    metaMorpho: string;
    caller: string;
    initialOwner: string;
    initialTimelock: bigint;
    asset: string;
    name: string;
    symbol: string;
    salt: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Metamorphofactory extends BaseContract {
  connect(runner?: ContractRunner | null): Metamorphofactory;
  waitForDeployment(): Promise<this>;

  interface: MetamorphofactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MORPHO: TypedContractMethod<[], [string], "view">;

  createMetaMorpho: TypedContractMethod<
    [
      initialOwner: AddressLike,
      initialTimelock: BigNumberish,
      asset: AddressLike,
      name: string,
      symbol: string,
      salt: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  isMetaMorpho: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MORPHO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createMetaMorpho"
  ): TypedContractMethod<
    [
      initialOwner: AddressLike,
      initialTimelock: BigNumberish,
      asset: AddressLike,
      name: string,
      symbol: string,
      salt: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isMetaMorpho"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "CreateMetaMorpho"
  ): TypedContractEvent<
    CreateMetaMorphoEvent.InputTuple,
    CreateMetaMorphoEvent.OutputTuple,
    CreateMetaMorphoEvent.OutputObject
  >;

  filters: {
    "CreateMetaMorpho(address,address,address,uint256,address,string,string,bytes32)": TypedContractEvent<
      CreateMetaMorphoEvent.InputTuple,
      CreateMetaMorphoEvent.OutputTuple,
      CreateMetaMorphoEvent.OutputObject
    >;
    CreateMetaMorpho: TypedContractEvent<
      CreateMetaMorphoEvent.InputTuple,
      CreateMetaMorphoEvent.OutputTuple,
      CreateMetaMorphoEvent.OutputObject
    >;
  };
}
