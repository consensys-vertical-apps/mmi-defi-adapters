/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface XRenzoDepositInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EXPECTED_DECIMALS"
      | "FEE_BASIS"
      | "allowedBridgeSweepers"
      | "bridgeDestinationDomain"
      | "bridgeFeeCollected"
      | "bridgeFeeShare"
      | "bridgeRouterFeeBps"
      | "bridgeTargetAddress"
      | "collateralToken"
      | "connext"
      | "deposit"
      | "depositETH"
      | "depositToken"
      | "getBridgeFeeShare"
      | "getMintRate"
      | "getRate"
      | "initialize"
      | "lastPrice"
      | "lastPriceTimestamp"
      | "oracle"
      | "owner"
      | "receiver"
      | "recoverERC20"
      | "recoverNative"
      | "renounceOwnership"
      | "setAllowedBridgeSweeper"
      | "setOraclePriceFeed"
      | "setReceiverPriceFeed"
      | "swapKey"
      | "sweep"
      | "sweepBatchSize"
      | "transferOwnership"
      | "updateBridgeFeeShare"
      | "updatePrice"
      | "updatePriceByOwner"
      | "updateSweepBatchSize"
      | "xezETH"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeFeeShareUpdated"
      | "BridgeSweeperAddressUpdated"
      | "BridgeSwept"
      | "Deposit"
      | "Initialized"
      | "OraclePriceFeedUpdated"
      | "OwnershipTransferred"
      | "PriceUpdated"
      | "ReceiverPriceFeedUpdated"
      | "SweepBatchSizeUpdated"
      | "SweeperBridgeFeeCollected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EXPECTED_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEE_BASIS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedBridgeSweepers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeDestinationDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeFeeCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeRouterFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeTargetAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "connext", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeFeeShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BytesLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "lastPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastPriceTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "receiver", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverNative",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowedBridgeSweeper",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOraclePriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiverPriceFeed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "swapKey", values?: undefined): string;
  encodeFunctionData(functionFragment: "sweep", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sweepBatchSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridgeFeeShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceByOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSweepBatchSize",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "xezETH", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "EXPECTED_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_BASIS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedBridgeSweepers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeDestinationDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeFeeCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeRouterFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeTargetAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "connext", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receiver", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAllowedBridgeSweeper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOraclePriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiverPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSweepBatchSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xezETH", data: BytesLike): Result;
}

export namespace BridgeFeeShareUpdatedEvent {
  export type InputTuple = [
    oldBridgeFeeShare: BigNumberish,
    newBridgeFeeShare: BigNumberish
  ];
  export type OutputTuple = [
    oldBridgeFeeShare: bigint,
    newBridgeFeeShare: bigint
  ];
  export interface OutputObject {
    oldBridgeFeeShare: bigint;
    newBridgeFeeShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeSweeperAddressUpdatedEvent {
  export type InputTuple = [sweeper: AddressLike, allowed: boolean];
  export type OutputTuple = [sweeper: string, allowed: boolean];
  export interface OutputObject {
    sweeper: string;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeSweptEvent {
  export type InputTuple = [
    destinationDomain: BigNumberish,
    destinationTarget: AddressLike,
    delegate: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    destinationDomain: bigint,
    destinationTarget: string,
    delegate: string,
    amount: bigint
  ];
  export interface OutputObject {
    destinationDomain: bigint;
    destinationTarget: string;
    delegate: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish
  ];
  export type OutputTuple = [user: string, amountIn: bigint, amountOut: bigint];
  export interface OutputObject {
    user: string;
    amountIn: bigint;
    amountOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OraclePriceFeedUpdatedEvent {
  export type InputTuple = [newOracle: AddressLike, oldOracle: AddressLike];
  export type OutputTuple = [newOracle: string, oldOracle: string];
  export interface OutputObject {
    newOracle: string;
    oldOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [price: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [price: bigint, timestamp: bigint];
  export interface OutputObject {
    price: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiverPriceFeedUpdatedEvent {
  export type InputTuple = [newReceiver: AddressLike, oldReceiver: AddressLike];
  export type OutputTuple = [newReceiver: string, oldReceiver: string];
  export interface OutputObject {
    newReceiver: string;
    oldReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SweepBatchSizeUpdatedEvent {
  export type InputTuple = [
    oldSweepBatchSize: BigNumberish,
    newSweepBatchSize: BigNumberish
  ];
  export type OutputTuple = [
    oldSweepBatchSize: bigint,
    newSweepBatchSize: bigint
  ];
  export interface OutputObject {
    oldSweepBatchSize: bigint;
    newSweepBatchSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SweeperBridgeFeeCollectedEvent {
  export type InputTuple = [sweeper: AddressLike, feeCollected: BigNumberish];
  export type OutputTuple = [sweeper: string, feeCollected: bigint];
  export interface OutputObject {
    sweeper: string;
    feeCollected: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface XRenzoDeposit extends BaseContract {
  connect(runner?: ContractRunner | null): XRenzoDeposit;
  waitForDeployment(): Promise<this>;

  interface: XRenzoDepositInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EXPECTED_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  FEE_BASIS: TypedContractMethod<[], [bigint], "view">;

  allowedBridgeSweepers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  bridgeDestinationDomain: TypedContractMethod<[], [bigint], "view">;

  bridgeFeeCollected: TypedContractMethod<[], [bigint], "view">;

  bridgeFeeShare: TypedContractMethod<[], [bigint], "view">;

  bridgeRouterFeeBps: TypedContractMethod<[], [bigint], "view">;

  bridgeTargetAddress: TypedContractMethod<[], [string], "view">;

  collateralToken: TypedContractMethod<[], [string], "view">;

  connext: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [_amountIn: BigNumberish, _minOut: BigNumberish, _deadline: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  depositETH: TypedContractMethod<
    [_minOut: BigNumberish, _deadline: BigNumberish],
    [bigint],
    "payable"
  >;

  depositToken: TypedContractMethod<[], [string], "view">;

  getBridgeFeeShare: TypedContractMethod<
    [_amountIn: BigNumberish],
    [bigint],
    "view"
  >;

  getMintRate: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getRate: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _currentPrice: BigNumberish,
      _xezETH: AddressLike,
      _depositToken: AddressLike,
      _collateralToken: AddressLike,
      _connext: AddressLike,
      _swapKey: BytesLike,
      _receiver: AddressLike,
      _bridgeDestinationDomain: BigNumberish,
      _bridgeTargetAddress: AddressLike,
      _oracle: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  lastPrice: TypedContractMethod<[], [bigint], "view">;

  lastPriceTimestamp: TypedContractMethod<[], [bigint], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  receiver: TypedContractMethod<[], [string], "view">;

  recoverERC20: TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  recoverNative: TypedContractMethod<
    [_amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAllowedBridgeSweeper: TypedContractMethod<
    [_sweeper: AddressLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;

  setOraclePriceFeed: TypedContractMethod<
    [_oracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setReceiverPriceFeed: TypedContractMethod<
    [_receiver: AddressLike],
    [void],
    "nonpayable"
  >;

  swapKey: TypedContractMethod<[], [string], "view">;

  sweep: TypedContractMethod<[], [void], "payable">;

  sweepBatchSize: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBridgeFeeShare: TypedContractMethod<
    [_newShare: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePrice: TypedContractMethod<
    [_price: BigNumberish, _timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  updatePriceByOwner: TypedContractMethod<
    [price: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateSweepBatchSize: TypedContractMethod<
    [_newBatchSize: BigNumberish],
    [void],
    "nonpayable"
  >;

  xezETH: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EXPECTED_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_BASIS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowedBridgeSweepers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "bridgeDestinationDomain"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeFeeCollected"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeFeeShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeRouterFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bridgeTargetAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collateralToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "connext"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [_amountIn: BigNumberish, _minOut: BigNumberish, _deadline: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<
    [_minOut: BigNumberish, _deadline: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBridgeFeeShare"
  ): TypedContractMethod<[_amountIn: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMintRate"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _currentPrice: BigNumberish,
      _xezETH: AddressLike,
      _depositToken: AddressLike,
      _collateralToken: AddressLike,
      _connext: AddressLike,
      _swapKey: BytesLike,
      _receiver: AddressLike,
      _bridgeDestinationDomain: BigNumberish,
      _bridgeTargetAddress: AddressLike,
      _oracle: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastPriceTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverERC20"
  ): TypedContractMethod<
    [_token: AddressLike, _amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recoverNative"
  ): TypedContractMethod<
    [_amount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAllowedBridgeSweeper"
  ): TypedContractMethod<
    [_sweeper: AddressLike, _allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOraclePriceFeed"
  ): TypedContractMethod<[_oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReceiverPriceFeed"
  ): TypedContractMethod<[_receiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapKey"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sweep"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "sweepBatchSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBridgeFeeShare"
  ): TypedContractMethod<[_newShare: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePrice"
  ): TypedContractMethod<
    [_price: BigNumberish, _timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePriceByOwner"
  ): TypedContractMethod<[price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSweepBatchSize"
  ): TypedContractMethod<[_newBatchSize: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "xezETH"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BridgeFeeShareUpdated"
  ): TypedContractEvent<
    BridgeFeeShareUpdatedEvent.InputTuple,
    BridgeFeeShareUpdatedEvent.OutputTuple,
    BridgeFeeShareUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeSweeperAddressUpdated"
  ): TypedContractEvent<
    BridgeSweeperAddressUpdatedEvent.InputTuple,
    BridgeSweeperAddressUpdatedEvent.OutputTuple,
    BridgeSweeperAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BridgeSwept"
  ): TypedContractEvent<
    BridgeSweptEvent.InputTuple,
    BridgeSweptEvent.OutputTuple,
    BridgeSweptEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OraclePriceFeedUpdated"
  ): TypedContractEvent<
    OraclePriceFeedUpdatedEvent.InputTuple,
    OraclePriceFeedUpdatedEvent.OutputTuple,
    OraclePriceFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReceiverPriceFeedUpdated"
  ): TypedContractEvent<
    ReceiverPriceFeedUpdatedEvent.InputTuple,
    ReceiverPriceFeedUpdatedEvent.OutputTuple,
    ReceiverPriceFeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SweepBatchSizeUpdated"
  ): TypedContractEvent<
    SweepBatchSizeUpdatedEvent.InputTuple,
    SweepBatchSizeUpdatedEvent.OutputTuple,
    SweepBatchSizeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SweeperBridgeFeeCollected"
  ): TypedContractEvent<
    SweeperBridgeFeeCollectedEvent.InputTuple,
    SweeperBridgeFeeCollectedEvent.OutputTuple,
    SweeperBridgeFeeCollectedEvent.OutputObject
  >;

  filters: {
    "BridgeFeeShareUpdated(uint256,uint256)": TypedContractEvent<
      BridgeFeeShareUpdatedEvent.InputTuple,
      BridgeFeeShareUpdatedEvent.OutputTuple,
      BridgeFeeShareUpdatedEvent.OutputObject
    >;
    BridgeFeeShareUpdated: TypedContractEvent<
      BridgeFeeShareUpdatedEvent.InputTuple,
      BridgeFeeShareUpdatedEvent.OutputTuple,
      BridgeFeeShareUpdatedEvent.OutputObject
    >;

    "BridgeSweeperAddressUpdated(address,bool)": TypedContractEvent<
      BridgeSweeperAddressUpdatedEvent.InputTuple,
      BridgeSweeperAddressUpdatedEvent.OutputTuple,
      BridgeSweeperAddressUpdatedEvent.OutputObject
    >;
    BridgeSweeperAddressUpdated: TypedContractEvent<
      BridgeSweeperAddressUpdatedEvent.InputTuple,
      BridgeSweeperAddressUpdatedEvent.OutputTuple,
      BridgeSweeperAddressUpdatedEvent.OutputObject
    >;

    "BridgeSwept(uint32,address,address,uint256)": TypedContractEvent<
      BridgeSweptEvent.InputTuple,
      BridgeSweptEvent.OutputTuple,
      BridgeSweptEvent.OutputObject
    >;
    BridgeSwept: TypedContractEvent<
      BridgeSweptEvent.InputTuple,
      BridgeSweptEvent.OutputTuple,
      BridgeSweptEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OraclePriceFeedUpdated(address,address)": TypedContractEvent<
      OraclePriceFeedUpdatedEvent.InputTuple,
      OraclePriceFeedUpdatedEvent.OutputTuple,
      OraclePriceFeedUpdatedEvent.OutputObject
    >;
    OraclePriceFeedUpdated: TypedContractEvent<
      OraclePriceFeedUpdatedEvent.InputTuple,
      OraclePriceFeedUpdatedEvent.OutputTuple,
      OraclePriceFeedUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PriceUpdated(uint256,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;

    "ReceiverPriceFeedUpdated(address,address)": TypedContractEvent<
      ReceiverPriceFeedUpdatedEvent.InputTuple,
      ReceiverPriceFeedUpdatedEvent.OutputTuple,
      ReceiverPriceFeedUpdatedEvent.OutputObject
    >;
    ReceiverPriceFeedUpdated: TypedContractEvent<
      ReceiverPriceFeedUpdatedEvent.InputTuple,
      ReceiverPriceFeedUpdatedEvent.OutputTuple,
      ReceiverPriceFeedUpdatedEvent.OutputObject
    >;

    "SweepBatchSizeUpdated(uint256,uint256)": TypedContractEvent<
      SweepBatchSizeUpdatedEvent.InputTuple,
      SweepBatchSizeUpdatedEvent.OutputTuple,
      SweepBatchSizeUpdatedEvent.OutputObject
    >;
    SweepBatchSizeUpdated: TypedContractEvent<
      SweepBatchSizeUpdatedEvent.InputTuple,
      SweepBatchSizeUpdatedEvent.OutputTuple,
      SweepBatchSizeUpdatedEvent.OutputObject
    >;

    "SweeperBridgeFeeCollected(address,uint256)": TypedContractEvent<
      SweeperBridgeFeeCollectedEvent.InputTuple,
      SweeperBridgeFeeCollectedEvent.OutputTuple,
      SweeperBridgeFeeCollectedEvent.OutputObject
    >;
    SweeperBridgeFeeCollected: TypedContractEvent<
      SweeperBridgeFeeCollectedEvent.InputTuple,
      SweeperBridgeFeeCollectedEvent.OutputTuple,
      SweeperBridgeFeeCollectedEvent.OutputObject
    >;
  };
}
