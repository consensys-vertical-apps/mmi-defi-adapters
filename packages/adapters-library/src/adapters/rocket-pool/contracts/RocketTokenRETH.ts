/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface RocketTokenRETHInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowance"
      | "approve"
      | "balanceOf"
      | "decimals"
      | "decreaseAllowance"
      | "increaseAllowance"
      | "name"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "version"
      | "getEthValue"
      | "getRethValue"
      | "getExchangeRate"
      | "getTotalCollateral"
      | "getCollateralRate"
      | "depositExcess"
      | "mint"
      | "burn"
      | "depositExcessCollateral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "EtherDeposited"
      | "TokensBurned"
      | "TokensMinted"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEthValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRethValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositExcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "depositExcessCollateral",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEthValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRethValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositExcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositExcessCollateral",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EtherDepositedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [from: string, amount: bigint, time: bigint];
  export interface OutputObject {
    from: string;
    amount: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBurnedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    ethAmount: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    amount: bigint,
    ethAmount: bigint,
    time: bigint
  ];
  export interface OutputObject {
    from: string;
    amount: bigint;
    ethAmount: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensMintedEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    ethAmount: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    amount: bigint,
    ethAmount: bigint,
    time: bigint
  ];
  export interface OutputObject {
    to: string;
    amount: bigint;
    ethAmount: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RocketTokenRETH extends BaseContract {
  connect(runner?: ContractRunner | null): RocketTokenRETH;
  waitForDeployment(): Promise<this>;

  interface: RocketTokenRETHInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * See {IERC20-allowance}.
   */
  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  /**
   * See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.
   */
  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  /**
   * See {IERC20-balanceOf}.
   */
  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  /**
   * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
   */
  decimals: TypedContractMethod<[], [bigint], "view">;

  /**
   * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
   */
  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  /**
   * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
   */
  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  /**
   * Returns the name of the token.
   */
  name: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the symbol of the token, usually a shorter version of the name.
   */
  symbol: TypedContractMethod<[], [string], "view">;

  /**
   * See {IERC20-totalSupply}.
   */
  totalSupply: TypedContractMethod<[], [bigint], "view">;

  /**
   * See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.
   */
  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  /**
   * See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.
   */
  transferFrom: TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  getEthValue: TypedContractMethod<
    [_rethAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getRethValue: TypedContractMethod<
    [_ethAmount: BigNumberish],
    [bigint],
    "view"
  >;

  getExchangeRate: TypedContractMethod<[], [bigint], "view">;

  getTotalCollateral: TypedContractMethod<[], [bigint], "view">;

  getCollateralRate: TypedContractMethod<[], [bigint], "view">;

  depositExcess: TypedContractMethod<[], [void], "payable">;

  mint: TypedContractMethod<
    [_ethAmount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;

  burn: TypedContractMethod<[_rethAmount: BigNumberish], [void], "nonpayable">;

  depositExcessCollateral: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, subtractedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, addedValue: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [sender: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEthValue"
  ): TypedContractMethod<[_rethAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRethValue"
  ): TypedContractMethod<[_ethAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getExchangeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCollateralRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositExcess"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_ethAmount: BigNumberish, _to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[_rethAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositExcessCollateral"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "EtherDeposited"
  ): TypedContractEvent<
    EtherDepositedEvent.InputTuple,
    EtherDepositedEvent.OutputTuple,
    EtherDepositedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBurned"
  ): TypedContractEvent<
    TokensBurnedEvent.InputTuple,
    TokensBurnedEvent.OutputTuple,
    TokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TokensMinted"
  ): TypedContractEvent<
    TokensMintedEvent.InputTuple,
    TokensMintedEvent.OutputTuple,
    TokensMintedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "EtherDeposited(address,uint256,uint256)": TypedContractEvent<
      EtherDepositedEvent.InputTuple,
      EtherDepositedEvent.OutputTuple,
      EtherDepositedEvent.OutputObject
    >;
    EtherDeposited: TypedContractEvent<
      EtherDepositedEvent.InputTuple,
      EtherDepositedEvent.OutputTuple,
      EtherDepositedEvent.OutputObject
    >;

    "TokensBurned(address,uint256,uint256,uint256)": TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;
    TokensBurned: TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;

    "TokensMinted(address,uint256,uint256,uint256)": TypedContractEvent<
      TokensMintedEvent.InputTuple,
      TokensMintedEvent.OutputTuple,
      TokensMintedEvent.OutputObject
    >;
    TokensMinted: TypedContractEvent<
      TokensMintedEvent.InputTuple,
      TokensMintedEvent.OutputTuple,
      TokensMintedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
