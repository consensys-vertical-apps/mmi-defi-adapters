/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IGateway {
  export type BTokenStateStruct = {
    vault: AddressLike;
    oracleId: BytesLike;
    collateralFactor: BigNumberish;
  };

  export type BTokenStateStructOutput = [
    vault: string,
    oracleId: string,
    collateralFactor: bigint
  ] & { vault: string; oracleId: string; collateralFactor: bigint };

  export type GatewayParamStruct = {
    lToken: AddressLike;
    pToken: AddressLike;
    oracle: AddressLike;
    swapper: AddressLike;
    vault0: AddressLike;
    iou: AddressLike;
    tokenB0: AddressLike;
    dChainEventSigner: AddressLike;
    b0ReserveRatio: BigNumberish;
    liquidationRewardCutRatio: BigNumberish;
    minLiquidationReward: BigNumberish;
    maxLiquidationReward: BigNumberish;
  };

  export type GatewayParamStructOutput = [
    lToken: string,
    pToken: string,
    oracle: string,
    swapper: string,
    vault0: string,
    iou: string,
    tokenB0: string,
    dChainEventSigner: string,
    b0ReserveRatio: bigint,
    liquidationRewardCutRatio: bigint,
    minLiquidationReward: bigint,
    maxLiquidationReward: bigint
  ] & {
    lToken: string;
    pToken: string;
    oracle: string;
    swapper: string;
    vault0: string;
    iou: string;
    tokenB0: string;
    dChainEventSigner: string;
    b0ReserveRatio: bigint;
    liquidationRewardCutRatio: bigint;
    minLiquidationReward: bigint;
    maxLiquidationReward: bigint;
  };

  export type GatewayStateStruct = {
    cumulativePnlOnGateway: BigNumberish;
    liquidityTime: BigNumberish;
    totalLiquidity: BigNumberish;
    cumulativeTimePerLiquidity: BigNumberish;
    gatewayRequestId: BigNumberish;
  };

  export type GatewayStateStructOutput = [
    cumulativePnlOnGateway: bigint,
    liquidityTime: bigint,
    totalLiquidity: bigint,
    cumulativeTimePerLiquidity: bigint,
    gatewayRequestId: bigint
  ] & {
    cumulativePnlOnGateway: bigint;
    liquidityTime: bigint;
    totalLiquidity: bigint;
    cumulativeTimePerLiquidity: bigint;
    gatewayRequestId: bigint;
  };

  export type LpStateStruct = {
    requestId: BigNumberish;
    bToken: AddressLike;
    bAmount: BigNumberish;
    b0Amount: BigNumberish;
    lastCumulativePnlOnEngine: BigNumberish;
    liquidity: BigNumberish;
    cumulativeTime: BigNumberish;
    lastCumulativeTimePerLiquidity: BigNumberish;
  };

  export type LpStateStructOutput = [
    requestId: bigint,
    bToken: string,
    bAmount: bigint,
    b0Amount: bigint,
    lastCumulativePnlOnEngine: bigint,
    liquidity: bigint,
    cumulativeTime: bigint,
    lastCumulativeTimePerLiquidity: bigint
  ] & {
    requestId: bigint;
    bToken: string;
    bAmount: bigint;
    b0Amount: bigint;
    lastCumulativePnlOnEngine: bigint;
    liquidity: bigint;
    cumulativeTime: bigint;
    lastCumulativeTimePerLiquidity: bigint;
  };

  export type TdStateStruct = {
    requestId: BigNumberish;
    bToken: AddressLike;
    bAmount: BigNumberish;
    b0Amount: BigNumberish;
    lastCumulativePnlOnEngine: BigNumberish;
    singlePosition: boolean;
  };

  export type TdStateStructOutput = [
    requestId: bigint,
    bToken: string,
    bAmount: bigint,
    b0Amount: bigint,
    lastCumulativePnlOnEngine: bigint,
    singlePosition: boolean
  ] & {
    requestId: bigint;
    bToken: string;
    bAmount: bigint;
    b0Amount: bigint;
    lastCumulativePnlOnEngine: bigint;
    singlePosition: boolean;
  };
}

export interface GatewayImplementationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBToken"
      | "admin"
      | "claimExecutionFee"
      | "delBToken"
      | "finishLiquidate"
      | "finishRemoveMargin"
      | "finishUpdateLiquidity"
      | "getBTokenState"
      | "getCumulativeTime"
      | "getExecutionFees"
      | "getGatewayParam"
      | "getGatewayState"
      | "getLpState"
      | "getTdState"
      | "implementation"
      | "redeemIOU"
      | "requestAddLiquidity"
      | "requestAddMargin"
      | "requestAddMarginAndTrade"
      | "requestLiquidate"
      | "requestRemoveLiquidity"
      | "requestRemoveMargin"
      | "requestTrade"
      | "requestTradeAndRemoveMargin"
      | "setAdmin"
      | "setBTokenParameter"
      | "setExecutionFee"
      | "setImplementation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddBToken"
      | "DelBToken"
      | "FinishAddLiquidity"
      | "FinishAddMargin"
      | "FinishLiquidate"
      | "FinishRemoveLiquidity"
      | "FinishRemoveMargin"
      | "NewAdmin"
      | "NewImplementation"
      | "RequestLiquidate"
      | "RequestRemoveMargin"
      | "RequestTrade"
      | "RequestTradeAndRemoveMargin"
      | "RequestUpdateLiquidity"
      | "SetExecutionFee"
      | "UpdateBToken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addBToken",
    values: [AddressLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimExecutionFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delBToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finishLiquidate",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finishRemoveMargin",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finishUpdateLiquidity",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBTokenState",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExecutionFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGatewayParam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGatewayState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTdState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemIOU",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestAddLiquidity",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestAddMargin",
    values: [BigNumberish, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "requestAddMarginAndTrade",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish[],
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLiquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRemoveLiquidity",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRemoveMargin",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTrade",
    values: [BigNumberish, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "requestTradeAndRemoveMargin",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBTokenParameter",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setExecutionFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addBToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delBToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finishLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishRemoveMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finishUpdateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBTokenState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExecutionFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGatewayParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGatewayState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLpState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTdState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemIOU", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAddMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAddMarginAndTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRemoveMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTradeAndRemoveMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBTokenParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExecutionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
}

export namespace AddBTokenEvent {
  export type InputTuple = [
    bToken: AddressLike,
    vault: AddressLike,
    oracleId: BytesLike,
    collateralFactor: BigNumberish
  ];
  export type OutputTuple = [
    bToken: string,
    vault: string,
    oracleId: string,
    collateralFactor: bigint
  ];
  export interface OutputObject {
    bToken: string;
    vault: string;
    oracleId: string;
    collateralFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelBTokenEvent {
  export type InputTuple = [bToken: AddressLike];
  export type OutputTuple = [bToken: string];
  export interface OutputObject {
    bToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinishAddLiquidityEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    lTokenId: BigNumberish,
    liquidity: BigNumberish,
    totalLiquidity: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    lTokenId: bigint,
    liquidity: bigint,
    totalLiquidity: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    lTokenId: bigint;
    liquidity: bigint;
    totalLiquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinishAddMarginEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    pTokenId: BigNumberish,
    bToken: AddressLike,
    bAmount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    pTokenId: bigint,
    bToken: string,
    bAmount: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    pTokenId: bigint;
    bToken: string;
    bAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinishLiquidateEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    pTokenId: BigNumberish,
    lpPnl: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    pTokenId: bigint,
    lpPnl: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    pTokenId: bigint;
    lpPnl: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinishRemoveLiquidityEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    lTokenId: BigNumberish,
    liquidity: BigNumberish,
    totalLiquidity: BigNumberish,
    bToken: AddressLike,
    bAmount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    lTokenId: bigint,
    liquidity: bigint,
    totalLiquidity: bigint,
    bToken: string,
    bAmount: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    lTokenId: bigint;
    liquidity: bigint;
    totalLiquidity: bigint;
    bToken: string;
    bAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinishRemoveMarginEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    pTokenId: BigNumberish,
    bToken: AddressLike,
    bAmount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    pTokenId: bigint,
    bToken: string,
    bAmount: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    pTokenId: bigint;
    bToken: string;
    bAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewImplementationEvent {
  export type InputTuple = [newImplementation: AddressLike];
  export type OutputTuple = [newImplementation: string];
  export interface OutputObject {
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestLiquidateEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    pTokenId: BigNumberish,
    realMoneyMargin: BigNumberish,
    lastCumulativePnlOnEngine: BigNumberish,
    cumulativePnlOnGateway: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    pTokenId: bigint,
    realMoneyMargin: bigint,
    lastCumulativePnlOnEngine: bigint,
    cumulativePnlOnGateway: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    pTokenId: bigint;
    realMoneyMargin: bigint;
    lastCumulativePnlOnEngine: bigint;
    cumulativePnlOnGateway: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestRemoveMarginEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    pTokenId: BigNumberish,
    realMoneyMargin: BigNumberish,
    lastCumulativePnlOnEngine: BigNumberish,
    cumulativePnlOnGateway: BigNumberish,
    bAmount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    pTokenId: bigint,
    realMoneyMargin: bigint,
    lastCumulativePnlOnEngine: bigint,
    cumulativePnlOnGateway: bigint,
    bAmount: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    pTokenId: bigint;
    realMoneyMargin: bigint;
    lastCumulativePnlOnEngine: bigint;
    cumulativePnlOnGateway: bigint;
    bAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestTradeEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    pTokenId: BigNumberish,
    realMoneyMargin: BigNumberish,
    lastCumulativePnlOnEngine: BigNumberish,
    cumulativePnlOnGateway: BigNumberish,
    symbolId: BytesLike,
    tradeParams: BigNumberish[]
  ];
  export type OutputTuple = [
    requestId: bigint,
    pTokenId: bigint,
    realMoneyMargin: bigint,
    lastCumulativePnlOnEngine: bigint,
    cumulativePnlOnGateway: bigint,
    symbolId: string,
    tradeParams: bigint[]
  ];
  export interface OutputObject {
    requestId: bigint;
    pTokenId: bigint;
    realMoneyMargin: bigint;
    lastCumulativePnlOnEngine: bigint;
    cumulativePnlOnGateway: bigint;
    symbolId: string;
    tradeParams: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestTradeAndRemoveMarginEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    pTokenId: BigNumberish,
    realMoneyMargin: BigNumberish,
    lastCumulativePnlOnEngine: BigNumberish,
    cumulativePnlOnGateway: BigNumberish,
    bAmount: BigNumberish,
    symbolId: BytesLike,
    tradeParams: BigNumberish[]
  ];
  export type OutputTuple = [
    requestId: bigint,
    pTokenId: bigint,
    realMoneyMargin: bigint,
    lastCumulativePnlOnEngine: bigint,
    cumulativePnlOnGateway: bigint,
    bAmount: bigint,
    symbolId: string,
    tradeParams: bigint[]
  ];
  export interface OutputObject {
    requestId: bigint;
    pTokenId: bigint;
    realMoneyMargin: bigint;
    lastCumulativePnlOnEngine: bigint;
    cumulativePnlOnGateway: bigint;
    bAmount: bigint;
    symbolId: string;
    tradeParams: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestUpdateLiquidityEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    lTokenId: BigNumberish,
    liquidity: BigNumberish,
    lastCumulativePnlOnEngine: BigNumberish,
    cumulativePnlOnGateway: BigNumberish,
    removeBAmount: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    lTokenId: bigint,
    liquidity: bigint,
    lastCumulativePnlOnEngine: bigint,
    cumulativePnlOnGateway: bigint,
    removeBAmount: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    lTokenId: bigint;
    liquidity: bigint;
    lastCumulativePnlOnEngine: bigint;
    cumulativePnlOnGateway: bigint;
    removeBAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetExecutionFeeEvent {
  export type InputTuple = [actionId: BigNumberish, executionFee: BigNumberish];
  export type OutputTuple = [actionId: bigint, executionFee: bigint];
  export interface OutputObject {
    actionId: bigint;
    executionFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateBTokenEvent {
  export type InputTuple = [bToken: AddressLike];
  export type OutputTuple = [bToken: string];
  export interface OutputObject {
    bToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GatewayImplementation extends BaseContract {
  connect(runner?: ContractRunner | null): GatewayImplementation;
  waitForDeployment(): Promise<this>;

  interface: GatewayImplementationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBToken: TypedContractMethod<
    [
      bToken: AddressLike,
      vault: AddressLike,
      oracleId: BytesLike,
      collateralFactor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  claimExecutionFee: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  delBToken: TypedContractMethod<[bToken: AddressLike], [void], "nonpayable">;

  finishLiquidate: TypedContractMethod<
    [eventData: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  finishRemoveMargin: TypedContractMethod<
    [eventData: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  finishUpdateLiquidity: TypedContractMethod<
    [eventData: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;

  getBTokenState: TypedContractMethod<
    [bToken: AddressLike],
    [IGateway.BTokenStateStructOutput],
    "view"
  >;

  getCumulativeTime: TypedContractMethod<
    [lTokenId: BigNumberish],
    [
      [bigint, bigint] & {
        cumulativeTimePerLiquidity: bigint;
        cumulativeTime: bigint;
      }
    ],
    "view"
  >;

  getExecutionFees: TypedContractMethod<[], [bigint[]], "view">;

  getGatewayParam: TypedContractMethod<
    [],
    [IGateway.GatewayParamStructOutput],
    "view"
  >;

  getGatewayState: TypedContractMethod<
    [],
    [IGateway.GatewayStateStructOutput],
    "view"
  >;

  getLpState: TypedContractMethod<
    [lTokenId: BigNumberish],
    [IGateway.LpStateStructOutput],
    "view"
  >;

  getTdState: TypedContractMethod<
    [pTokenId: BigNumberish],
    [IGateway.TdStateStructOutput],
    "view"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  redeemIOU: TypedContractMethod<
    [b0Amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestAddLiquidity: TypedContractMethod<
    [lTokenId: BigNumberish, bToken: AddressLike, bAmount: BigNumberish],
    [void],
    "payable"
  >;

  requestAddMargin: TypedContractMethod<
    [
      pTokenId: BigNumberish,
      bToken: AddressLike,
      bAmount: BigNumberish,
      singlePosition: boolean
    ],
    [bigint],
    "payable"
  >;

  requestAddMarginAndTrade: TypedContractMethod<
    [
      pTokenId: BigNumberish,
      bToken: AddressLike,
      bAmount: BigNumberish,
      symbolId: BytesLike,
      tradeParams: BigNumberish[],
      singlePosition: boolean
    ],
    [void],
    "payable"
  >;

  requestLiquidate: TypedContractMethod<
    [pTokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestRemoveLiquidity: TypedContractMethod<
    [lTokenId: BigNumberish, bToken: AddressLike, bAmount: BigNumberish],
    [void],
    "payable"
  >;

  requestRemoveMargin: TypedContractMethod<
    [pTokenId: BigNumberish, bToken: AddressLike, bAmount: BigNumberish],
    [void],
    "payable"
  >;

  requestTrade: TypedContractMethod<
    [pTokenId: BigNumberish, symbolId: BytesLike, tradeParams: BigNumberish[]],
    [void],
    "payable"
  >;

  requestTradeAndRemoveMargin: TypedContractMethod<
    [
      pTokenId: BigNumberish,
      bToken: AddressLike,
      bAmount: BigNumberish,
      symbolId: BytesLike,
      tradeParams: BigNumberish[]
    ],
    [void],
    "payable"
  >;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  setBTokenParameter: TypedContractMethod<
    [bToken: AddressLike, idx: BigNumberish, value: BytesLike],
    [void],
    "nonpayable"
  >;

  setExecutionFee: TypedContractMethod<
    [actionId: BigNumberish, executionFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setImplementation: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBToken"
  ): TypedContractMethod<
    [
      bToken: AddressLike,
      vault: AddressLike,
      oracleId: BytesLike,
      collateralFactor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimExecutionFee"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "delBToken"
  ): TypedContractMethod<[bToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finishLiquidate"
  ): TypedContractMethod<
    [eventData: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finishRemoveMargin"
  ): TypedContractMethod<
    [eventData: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finishUpdateLiquidity"
  ): TypedContractMethod<
    [eventData: BytesLike, signature: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBTokenState"
  ): TypedContractMethod<
    [bToken: AddressLike],
    [IGateway.BTokenStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCumulativeTime"
  ): TypedContractMethod<
    [lTokenId: BigNumberish],
    [
      [bigint, bigint] & {
        cumulativeTimePerLiquidity: bigint;
        cumulativeTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExecutionFees"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getGatewayParam"
  ): TypedContractMethod<[], [IGateway.GatewayParamStructOutput], "view">;
  getFunction(
    nameOrSignature: "getGatewayState"
  ): TypedContractMethod<[], [IGateway.GatewayStateStructOutput], "view">;
  getFunction(
    nameOrSignature: "getLpState"
  ): TypedContractMethod<
    [lTokenId: BigNumberish],
    [IGateway.LpStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTdState"
  ): TypedContractMethod<
    [pTokenId: BigNumberish],
    [IGateway.TdStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemIOU"
  ): TypedContractMethod<[b0Amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestAddLiquidity"
  ): TypedContractMethod<
    [lTokenId: BigNumberish, bToken: AddressLike, bAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestAddMargin"
  ): TypedContractMethod<
    [
      pTokenId: BigNumberish,
      bToken: AddressLike,
      bAmount: BigNumberish,
      singlePosition: boolean
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestAddMarginAndTrade"
  ): TypedContractMethod<
    [
      pTokenId: BigNumberish,
      bToken: AddressLike,
      bAmount: BigNumberish,
      symbolId: BytesLike,
      tradeParams: BigNumberish[],
      singlePosition: boolean
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestLiquidate"
  ): TypedContractMethod<[pTokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRemoveLiquidity"
  ): TypedContractMethod<
    [lTokenId: BigNumberish, bToken: AddressLike, bAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestRemoveMargin"
  ): TypedContractMethod<
    [pTokenId: BigNumberish, bToken: AddressLike, bAmount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestTrade"
  ): TypedContractMethod<
    [pTokenId: BigNumberish, symbolId: BytesLike, tradeParams: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "requestTradeAndRemoveMargin"
  ): TypedContractMethod<
    [
      pTokenId: BigNumberish,
      bToken: AddressLike,
      bAmount: BigNumberish,
      symbolId: BytesLike,
      tradeParams: BigNumberish[]
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBTokenParameter"
  ): TypedContractMethod<
    [bToken: AddressLike, idx: BigNumberish, value: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExecutionFee"
  ): TypedContractMethod<
    [actionId: BigNumberish, executionFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setImplementation"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddBToken"
  ): TypedContractEvent<
    AddBTokenEvent.InputTuple,
    AddBTokenEvent.OutputTuple,
    AddBTokenEvent.OutputObject
  >;
  getEvent(
    key: "DelBToken"
  ): TypedContractEvent<
    DelBTokenEvent.InputTuple,
    DelBTokenEvent.OutputTuple,
    DelBTokenEvent.OutputObject
  >;
  getEvent(
    key: "FinishAddLiquidity"
  ): TypedContractEvent<
    FinishAddLiquidityEvent.InputTuple,
    FinishAddLiquidityEvent.OutputTuple,
    FinishAddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "FinishAddMargin"
  ): TypedContractEvent<
    FinishAddMarginEvent.InputTuple,
    FinishAddMarginEvent.OutputTuple,
    FinishAddMarginEvent.OutputObject
  >;
  getEvent(
    key: "FinishLiquidate"
  ): TypedContractEvent<
    FinishLiquidateEvent.InputTuple,
    FinishLiquidateEvent.OutputTuple,
    FinishLiquidateEvent.OutputObject
  >;
  getEvent(
    key: "FinishRemoveLiquidity"
  ): TypedContractEvent<
    FinishRemoveLiquidityEvent.InputTuple,
    FinishRemoveLiquidityEvent.OutputTuple,
    FinishRemoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "FinishRemoveMargin"
  ): TypedContractEvent<
    FinishRemoveMarginEvent.InputTuple,
    FinishRemoveMarginEvent.OutputTuple,
    FinishRemoveMarginEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewImplementation"
  ): TypedContractEvent<
    NewImplementationEvent.InputTuple,
    NewImplementationEvent.OutputTuple,
    NewImplementationEvent.OutputObject
  >;
  getEvent(
    key: "RequestLiquidate"
  ): TypedContractEvent<
    RequestLiquidateEvent.InputTuple,
    RequestLiquidateEvent.OutputTuple,
    RequestLiquidateEvent.OutputObject
  >;
  getEvent(
    key: "RequestRemoveMargin"
  ): TypedContractEvent<
    RequestRemoveMarginEvent.InputTuple,
    RequestRemoveMarginEvent.OutputTuple,
    RequestRemoveMarginEvent.OutputObject
  >;
  getEvent(
    key: "RequestTrade"
  ): TypedContractEvent<
    RequestTradeEvent.InputTuple,
    RequestTradeEvent.OutputTuple,
    RequestTradeEvent.OutputObject
  >;
  getEvent(
    key: "RequestTradeAndRemoveMargin"
  ): TypedContractEvent<
    RequestTradeAndRemoveMarginEvent.InputTuple,
    RequestTradeAndRemoveMarginEvent.OutputTuple,
    RequestTradeAndRemoveMarginEvent.OutputObject
  >;
  getEvent(
    key: "RequestUpdateLiquidity"
  ): TypedContractEvent<
    RequestUpdateLiquidityEvent.InputTuple,
    RequestUpdateLiquidityEvent.OutputTuple,
    RequestUpdateLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "SetExecutionFee"
  ): TypedContractEvent<
    SetExecutionFeeEvent.InputTuple,
    SetExecutionFeeEvent.OutputTuple,
    SetExecutionFeeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateBToken"
  ): TypedContractEvent<
    UpdateBTokenEvent.InputTuple,
    UpdateBTokenEvent.OutputTuple,
    UpdateBTokenEvent.OutputObject
  >;

  filters: {
    "AddBToken(address,address,bytes32,uint256)": TypedContractEvent<
      AddBTokenEvent.InputTuple,
      AddBTokenEvent.OutputTuple,
      AddBTokenEvent.OutputObject
    >;
    AddBToken: TypedContractEvent<
      AddBTokenEvent.InputTuple,
      AddBTokenEvent.OutputTuple,
      AddBTokenEvent.OutputObject
    >;

    "DelBToken(address)": TypedContractEvent<
      DelBTokenEvent.InputTuple,
      DelBTokenEvent.OutputTuple,
      DelBTokenEvent.OutputObject
    >;
    DelBToken: TypedContractEvent<
      DelBTokenEvent.InputTuple,
      DelBTokenEvent.OutputTuple,
      DelBTokenEvent.OutputObject
    >;

    "FinishAddLiquidity(uint256,uint256,uint256,uint256)": TypedContractEvent<
      FinishAddLiquidityEvent.InputTuple,
      FinishAddLiquidityEvent.OutputTuple,
      FinishAddLiquidityEvent.OutputObject
    >;
    FinishAddLiquidity: TypedContractEvent<
      FinishAddLiquidityEvent.InputTuple,
      FinishAddLiquidityEvent.OutputTuple,
      FinishAddLiquidityEvent.OutputObject
    >;

    "FinishAddMargin(uint256,uint256,address,uint256)": TypedContractEvent<
      FinishAddMarginEvent.InputTuple,
      FinishAddMarginEvent.OutputTuple,
      FinishAddMarginEvent.OutputObject
    >;
    FinishAddMargin: TypedContractEvent<
      FinishAddMarginEvent.InputTuple,
      FinishAddMarginEvent.OutputTuple,
      FinishAddMarginEvent.OutputObject
    >;

    "FinishLiquidate(uint256,uint256,int256)": TypedContractEvent<
      FinishLiquidateEvent.InputTuple,
      FinishLiquidateEvent.OutputTuple,
      FinishLiquidateEvent.OutputObject
    >;
    FinishLiquidate: TypedContractEvent<
      FinishLiquidateEvent.InputTuple,
      FinishLiquidateEvent.OutputTuple,
      FinishLiquidateEvent.OutputObject
    >;

    "FinishRemoveLiquidity(uint256,uint256,uint256,uint256,address,uint256)": TypedContractEvent<
      FinishRemoveLiquidityEvent.InputTuple,
      FinishRemoveLiquidityEvent.OutputTuple,
      FinishRemoveLiquidityEvent.OutputObject
    >;
    FinishRemoveLiquidity: TypedContractEvent<
      FinishRemoveLiquidityEvent.InputTuple,
      FinishRemoveLiquidityEvent.OutputTuple,
      FinishRemoveLiquidityEvent.OutputObject
    >;

    "FinishRemoveMargin(uint256,uint256,address,uint256)": TypedContractEvent<
      FinishRemoveMarginEvent.InputTuple,
      FinishRemoveMarginEvent.OutputTuple,
      FinishRemoveMarginEvent.OutputObject
    >;
    FinishRemoveMargin: TypedContractEvent<
      FinishRemoveMarginEvent.InputTuple,
      FinishRemoveMarginEvent.OutputTuple,
      FinishRemoveMarginEvent.OutputObject
    >;

    "NewAdmin(address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewImplementation(address)": TypedContractEvent<
      NewImplementationEvent.InputTuple,
      NewImplementationEvent.OutputTuple,
      NewImplementationEvent.OutputObject
    >;
    NewImplementation: TypedContractEvent<
      NewImplementationEvent.InputTuple,
      NewImplementationEvent.OutputTuple,
      NewImplementationEvent.OutputObject
    >;

    "RequestLiquidate(uint256,uint256,uint256,int256,int256)": TypedContractEvent<
      RequestLiquidateEvent.InputTuple,
      RequestLiquidateEvent.OutputTuple,
      RequestLiquidateEvent.OutputObject
    >;
    RequestLiquidate: TypedContractEvent<
      RequestLiquidateEvent.InputTuple,
      RequestLiquidateEvent.OutputTuple,
      RequestLiquidateEvent.OutputObject
    >;

    "RequestRemoveMargin(uint256,uint256,uint256,int256,int256,uint256)": TypedContractEvent<
      RequestRemoveMarginEvent.InputTuple,
      RequestRemoveMarginEvent.OutputTuple,
      RequestRemoveMarginEvent.OutputObject
    >;
    RequestRemoveMargin: TypedContractEvent<
      RequestRemoveMarginEvent.InputTuple,
      RequestRemoveMarginEvent.OutputTuple,
      RequestRemoveMarginEvent.OutputObject
    >;

    "RequestTrade(uint256,uint256,uint256,int256,int256,bytes32,int256[])": TypedContractEvent<
      RequestTradeEvent.InputTuple,
      RequestTradeEvent.OutputTuple,
      RequestTradeEvent.OutputObject
    >;
    RequestTrade: TypedContractEvent<
      RequestTradeEvent.InputTuple,
      RequestTradeEvent.OutputTuple,
      RequestTradeEvent.OutputObject
    >;

    "RequestTradeAndRemoveMargin(uint256,uint256,uint256,int256,int256,uint256,bytes32,int256[])": TypedContractEvent<
      RequestTradeAndRemoveMarginEvent.InputTuple,
      RequestTradeAndRemoveMarginEvent.OutputTuple,
      RequestTradeAndRemoveMarginEvent.OutputObject
    >;
    RequestTradeAndRemoveMargin: TypedContractEvent<
      RequestTradeAndRemoveMarginEvent.InputTuple,
      RequestTradeAndRemoveMarginEvent.OutputTuple,
      RequestTradeAndRemoveMarginEvent.OutputObject
    >;

    "RequestUpdateLiquidity(uint256,uint256,uint256,int256,int256,uint256)": TypedContractEvent<
      RequestUpdateLiquidityEvent.InputTuple,
      RequestUpdateLiquidityEvent.OutputTuple,
      RequestUpdateLiquidityEvent.OutputObject
    >;
    RequestUpdateLiquidity: TypedContractEvent<
      RequestUpdateLiquidityEvent.InputTuple,
      RequestUpdateLiquidityEvent.OutputTuple,
      RequestUpdateLiquidityEvent.OutputObject
    >;

    "SetExecutionFee(uint256,uint256)": TypedContractEvent<
      SetExecutionFeeEvent.InputTuple,
      SetExecutionFeeEvent.OutputTuple,
      SetExecutionFeeEvent.OutputObject
    >;
    SetExecutionFee: TypedContractEvent<
      SetExecutionFeeEvent.InputTuple,
      SetExecutionFeeEvent.OutputTuple,
      SetExecutionFeeEvent.OutputObject
    >;

    "UpdateBToken(address)": TypedContractEvent<
      UpdateBTokenEvent.InputTuple,
      UpdateBTokenEvent.OutputTuple,
      UpdateBTokenEvent.OutputObject
    >;
    UpdateBToken: TypedContractEvent<
      UpdateBTokenEvent.InputTuple,
      UpdateBTokenEvent.OutputTuple,
      UpdateBTokenEvent.OutputObject
    >;
  };
}
