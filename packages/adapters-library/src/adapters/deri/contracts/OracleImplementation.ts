/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IOracle {
  export type SignatureStruct = {
    oracleId: BytesLike;
    timestamp: BigNumberish;
    value: BigNumberish;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
  };

  export type SignatureStructOutput = [
    oracleId: string,
    timestamp: bigint,
    value: bigint,
    v: bigint,
    r: string,
    s: string
  ] & {
    oracleId: string;
    timestamp: bigint;
    value: bigint;
    v: bigint;
    r: string;
    s: string;
  };
}

export interface OracleImplementationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "setAdmin"
      | "setBaseOracle"
      | "setImplementation"
      | "updateOffchainValue"
      | "updateOffchainValues"
      | "admin"
      | "baseOracles"
      | "getValue"
      | "getValueCurrentBlock"
      | "implementation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "NewAdmin" | "NewImplementation"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseOracle",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOffchainValue",
    values: [IOracle.SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOffchainValues",
    values: [IOracle.SignatureStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseOracles",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getValue", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getValueCurrentBlock",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBaseOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOffchainValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOffchainValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getValueCurrentBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
}

export namespace NewAdminEvent {
  export type InputTuple = [newAdmin: AddressLike];
  export type OutputTuple = [newAdmin: string];
  export interface OutputObject {
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewImplementationEvent {
  export type InputTuple = [newImplementation: AddressLike];
  export type OutputTuple = [newImplementation: string];
  export interface OutputObject {
    newImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OracleImplementation extends BaseContract {
  connect(runner?: ContractRunner | null): OracleImplementation;
  waitForDeployment(): Promise<this>;

  interface: OracleImplementationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;

  setBaseOracle: TypedContractMethod<
    [symbol: string, baseOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  setImplementation: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  updateOffchainValue: TypedContractMethod<
    [s: IOracle.SignatureStruct],
    [void],
    "nonpayable"
  >;

  updateOffchainValues: TypedContractMethod<
    [ss: IOracle.SignatureStruct[]],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  baseOracles: TypedContractMethod<[arg0: BytesLike], [string], "view">;

  getValue: TypedContractMethod<[oracleId: BytesLike], [bigint], "view">;

  getValueCurrentBlock: TypedContractMethod<
    [oracleId: BytesLike],
    [bigint],
    "view"
  >;

  implementation: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "setAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseOracle"
  ): TypedContractMethod<
    [symbol: string, baseOracle: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setImplementation"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOffchainValue"
  ): TypedContractMethod<[s: IOracle.SignatureStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOffchainValues"
  ): TypedContractMethod<[ss: IOracle.SignatureStruct[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "baseOracles"
  ): TypedContractMethod<[arg0: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getValue"
  ): TypedContractMethod<[oracleId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValueCurrentBlock"
  ): TypedContractMethod<[oracleId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "implementation"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewImplementation"
  ): TypedContractEvent<
    NewImplementationEvent.InputTuple,
    NewImplementationEvent.OutputTuple,
    NewImplementationEvent.OutputObject
  >;

  filters: {
    "NewAdmin(address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewImplementation(address)": TypedContractEvent<
      NewImplementationEvent.InputTuple,
      NewImplementationEvent.OutputTuple,
      NewImplementationEvent.OutputObject
    >;
    NewImplementation: TypedContractEvent<
      NewImplementationEvent.InputTuple,
      NewImplementationEvent.OutputTuple,
      NewImplementationEvent.OutputObject
    >;
  };
}
