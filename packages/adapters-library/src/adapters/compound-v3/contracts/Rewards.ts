/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CometRewards {
  export type RewardOwedStruct = { token: AddressLike; owed: BigNumberish };

  export type RewardOwedStructOutput = [token: string, owed: bigint] & {
    token: string;
    owed: bigint;
  };
}

export interface RewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claim"
      | "claimTo"
      | "getRewardOwed"
      | "governor"
      | "rewardConfig"
      | "rewardsClaimed"
      | "setRewardConfig"
      | "transferGovernor"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "GovernorTransferred" | "RewardClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTo",
    values: [AddressLike, AddressLike, AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardOwed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardConfig",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsClaimed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardConfig",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGovernor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardOwed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace GovernorTransferredEvent {
  export type InputTuple = [oldGovernor: AddressLike, newGovernor: AddressLike];
  export type OutputTuple = [oldGovernor: string, newGovernor: string];
  export interface OutputObject {
    oldGovernor: string;
    newGovernor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    src: AddressLike,
    recipient: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    src: string,
    recipient: string,
    token: string,
    amount: bigint
  ];
  export interface OutputObject {
    src: string;
    recipient: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Rewards extends BaseContract {
  connect(runner?: ContractRunner | null): Rewards;
  waitForDeployment(): Promise<this>;

  interface: RewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claim: TypedContractMethod<
    [comet: AddressLike, src: AddressLike, shouldAccrue: boolean],
    [void],
    "nonpayable"
  >;

  claimTo: TypedContractMethod<
    [
      comet: AddressLike,
      src: AddressLike,
      to: AddressLike,
      shouldAccrue: boolean
    ],
    [void],
    "nonpayable"
  >;

  getRewardOwed: TypedContractMethod<
    [comet: AddressLike, account: AddressLike],
    [CometRewards.RewardOwedStructOutput],
    "nonpayable"
  >;

  governor: TypedContractMethod<[], [string], "view">;

  rewardConfig: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        token: string;
        rescaleFactor: bigint;
        shouldUpscale: boolean;
      }
    ],
    "view"
  >;

  rewardsClaimed: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  setRewardConfig: TypedContractMethod<
    [comet: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  transferGovernor: TypedContractMethod<
    [newGovernor: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<
    [comet: AddressLike, src: AddressLike, shouldAccrue: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimTo"
  ): TypedContractMethod<
    [
      comet: AddressLike,
      src: AddressLike,
      to: AddressLike,
      shouldAccrue: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getRewardOwed"
  ): TypedContractMethod<
    [comet: AddressLike, account: AddressLike],
    [CometRewards.RewardOwedStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "governor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rewardConfig"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        token: string;
        rescaleFactor: bigint;
        shouldUpscale: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardsClaimed"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setRewardConfig"
  ): TypedContractMethod<
    [comet: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferGovernor"
  ): TypedContractMethod<[newGovernor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "GovernorTransferred"
  ): TypedContractEvent<
    GovernorTransferredEvent.InputTuple,
    GovernorTransferredEvent.OutputTuple,
    GovernorTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;

  filters: {
    "GovernorTransferred(address,address)": TypedContractEvent<
      GovernorTransferredEvent.InputTuple,
      GovernorTransferredEvent.OutputTuple,
      GovernorTransferredEvent.OutputObject
    >;
    GovernorTransferred: TypedContractEvent<
      GovernorTransferredEvent.InputTuple,
      GovernorTransferredEvent.OutputTuple,
      GovernorTransferredEvent.OutputObject
    >;

    "RewardClaimed(address,address,address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
  };
}
