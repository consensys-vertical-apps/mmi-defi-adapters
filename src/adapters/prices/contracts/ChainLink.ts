/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace FeedRegistryInterface {
  export type PhaseStruct = {
    phaseId: BigNumberish;
    startingAggregatorRoundId: BigNumberish;
    endingAggregatorRoundId: BigNumberish;
  };

  export type PhaseStructOutput = [
    phaseId: bigint,
    startingAggregatorRoundId: bigint,
    endingAggregatorRoundId: bigint
  ] & {
    phaseId: bigint;
    startingAggregatorRoundId: bigint;
    endingAggregatorRoundId: bigint;
  };
}

export interface ChainLinkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "confirmFeed"
      | "decimals"
      | "description"
      | "getAccessController"
      | "getAnswer"
      | "getCurrentPhaseId"
      | "getFeed"
      | "getNextRoundId"
      | "getPhase"
      | "getPhaseFeed"
      | "getPhaseRange"
      | "getPreviousRoundId"
      | "getProposedFeed"
      | "getRoundData"
      | "getRoundFeed"
      | "getTimestamp"
      | "isFeedEnabled"
      | "latestAnswer"
      | "latestRound"
      | "latestRoundData"
      | "latestTimestamp"
      | "owner"
      | "proposeFeed"
      | "proposedGetRoundData"
      | "proposedLatestRoundData"
      | "setAccessController"
      | "transferOwnership"
      | "typeAndVersion"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccessControllerSet"
      | "FeedConfirmed"
      | "FeedProposed"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmFeed",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decimals",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccessController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswer",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPhaseId",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextRoundId",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPhase",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPhaseFeed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPhaseRange",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPreviousRoundId",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposedFeed",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundFeed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeedEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestAnswer",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRound",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "latestTimestamp",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeFeed",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedGetRoundData",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedLatestRoundData",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAccessController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "version",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPhaseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNextRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPhaseFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPhaseRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPreviousRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposedFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoundFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFeedEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedGetRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedLatestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAccessController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AccessControllerSetEvent {
  export type InputTuple = [accessController: AddressLike, sender: AddressLike];
  export type OutputTuple = [accessController: string, sender: string];
  export interface OutputObject {
    accessController: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedConfirmedEvent {
  export type InputTuple = [
    asset: AddressLike,
    denomination: AddressLike,
    latestAggregator: AddressLike,
    previousAggregator: AddressLike,
    nextPhaseId: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    denomination: string,
    latestAggregator: string,
    previousAggregator: string,
    nextPhaseId: bigint,
    sender: string
  ];
  export interface OutputObject {
    asset: string;
    denomination: string;
    latestAggregator: string;
    previousAggregator: string;
    nextPhaseId: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedProposedEvent {
  export type InputTuple = [
    asset: AddressLike,
    denomination: AddressLike,
    proposedAggregator: AddressLike,
    currentAggregator: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [
    asset: string,
    denomination: string,
    proposedAggregator: string,
    currentAggregator: string,
    sender: string
  ];
  export interface OutputObject {
    asset: string;
    denomination: string;
    proposedAggregator: string;
    currentAggregator: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChainLink extends BaseContract {
  connect(runner?: ContractRunner | null): ChainLink;
  waitForDeployment(): Promise<this>;

  interface: ChainLinkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  confirmFeed: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, aggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;

  description: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [string],
    "view"
  >;

  getAccessController: TypedContractMethod<[], [string], "view">;

  getAnswer: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;

  getCurrentPhaseId: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;

  getFeed: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [string],
    "view"
  >;

  getNextRoundId: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;

  getPhase: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, phaseId: BigNumberish],
    [FeedRegistryInterface.PhaseStructOutput],
    "view"
  >;

  getPhaseFeed: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, phaseId: BigNumberish],
    [string],
    "view"
  >;

  getPhaseRange: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, phaseId: BigNumberish],
    [[bigint, bigint] & { startingRoundId: bigint; endingRoundId: bigint }],
    "view"
  >;

  getPreviousRoundId: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;

  getProposedFeed: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [string],
    "view"
  >;

  getRoundData: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, _roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  getRoundFeed: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [string],
    "view"
  >;

  getTimestamp: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;

  isFeedEnabled: TypedContractMethod<
    [aggregator: AddressLike],
    [boolean],
    "view"
  >;

  latestAnswer: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;

  latestRound: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;

  latestRoundData: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  latestTimestamp: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proposeFeed: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, aggregator: AddressLike],
    [void],
    "nonpayable"
  >;

  proposedGetRoundData: TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  proposedLatestRoundData: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;

  setAccessController: TypedContractMethod<
    [_accessController: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  typeAndVersion: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmFeed"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, aggregator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccessController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAnswer"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentPhaseId"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeed"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextRoundId"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPhase"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, phaseId: BigNumberish],
    [FeedRegistryInterface.PhaseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPhaseFeed"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, phaseId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPhaseRange"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, phaseId: BigNumberish],
    [[bigint, bigint] & { startingRoundId: bigint; endingRoundId: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPreviousRoundId"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposedFeed"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoundData"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, _roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoundFeed"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimestamp"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFeedEnabled"
  ): TypedContractMethod<[aggregator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "latestAnswer"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestRound"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestRoundData"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        roundId: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "latestTimestamp"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposeFeed"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, aggregator: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposedGetRoundData"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike, roundId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposedLatestRoundData"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        id: bigint;
        answer: bigint;
        startedAt: bigint;
        updatedAt: bigint;
        answeredInRound: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAccessController"
  ): TypedContractMethod<
    [_accessController: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typeAndVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<
    [base: AddressLike, quote: AddressLike],
    [bigint],
    "view"
  >;

  getEvent(
    key: "AccessControllerSet"
  ): TypedContractEvent<
    AccessControllerSetEvent.InputTuple,
    AccessControllerSetEvent.OutputTuple,
    AccessControllerSetEvent.OutputObject
  >;
  getEvent(
    key: "FeedConfirmed"
  ): TypedContractEvent<
    FeedConfirmedEvent.InputTuple,
    FeedConfirmedEvent.OutputTuple,
    FeedConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "FeedProposed"
  ): TypedContractEvent<
    FeedProposedEvent.InputTuple,
    FeedProposedEvent.OutputTuple,
    FeedProposedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AccessControllerSet(address,address)": TypedContractEvent<
      AccessControllerSetEvent.InputTuple,
      AccessControllerSetEvent.OutputTuple,
      AccessControllerSetEvent.OutputObject
    >;
    AccessControllerSet: TypedContractEvent<
      AccessControllerSetEvent.InputTuple,
      AccessControllerSetEvent.OutputTuple,
      AccessControllerSetEvent.OutputObject
    >;

    "FeedConfirmed(address,address,address,address,uint16,address)": TypedContractEvent<
      FeedConfirmedEvent.InputTuple,
      FeedConfirmedEvent.OutputTuple,
      FeedConfirmedEvent.OutputObject
    >;
    FeedConfirmed: TypedContractEvent<
      FeedConfirmedEvent.InputTuple,
      FeedConfirmedEvent.OutputTuple,
      FeedConfirmedEvent.OutputObject
    >;

    "FeedProposed(address,address,address,address,address)": TypedContractEvent<
      FeedProposedEvent.InputTuple,
      FeedProposedEvent.OutputTuple,
      FeedProposedEvent.OutputObject
    >;
    FeedProposed: TypedContractEvent<
      FeedProposedEvent.InputTuple,
      FeedProposedEvent.OutputTuple,
      FeedProposedEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
