/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface CurveLPTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "initialize"
      | "decimals"
      | "transfer"
      | "transferFrom"
      | "approve"
      | "get_balances"
      | "admin_fee"
      | "A"
      | "A_precise"
      | "get_virtual_price"
      | "calc_token_amount"
      | "add_liquidity(uint256[2],uint256)"
      | "add_liquidity(uint256[2],uint256,address)"
      | "get_dy"
      | "exchange(int128,int128,uint256,uint256)"
      | "exchange(int128,int128,uint256,uint256,address)"
      | "remove_liquidity(uint256,uint256[2])"
      | "remove_liquidity(uint256,uint256[2],address)"
      | "remove_liquidity_imbalance(uint256[2],uint256)"
      | "remove_liquidity_imbalance(uint256[2],uint256,address)"
      | "calc_withdraw_one_coin"
      | "remove_liquidity_one_coin(uint256,int128,uint256)"
      | "remove_liquidity_one_coin(uint256,int128,uint256,address)"
      | "ramp_A"
      | "stop_ramp_A"
      | "admin_balances"
      | "withdraw_admin_fees"
      | "coins"
      | "balances"
      | "fee"
      | "initial_A"
      | "future_A"
      | "initial_A_time"
      | "future_A_time"
      | "name"
      | "symbol"
      | "balanceOf"
      | "allowance"
      | "totalSupply"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Transfer"
      | "Approval"
      | "TokenExchange"
      | "AddLiquidity"
      | "RemoveLiquidity"
      | "RemoveLiquidityOne"
      | "RemoveLiquidityImbalance"
      | "RampA"
      | "StopRampA"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      [AddressLike, AddressLike, AddressLike, AddressLike],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_balances",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin_fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "A", values?: undefined): string;
  encodeFunctionData(functionFragment: "A_precise", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "get_virtual_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calc_token_amount",
    values: [[BigNumberish, BigNumberish], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[2],uint256)",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "add_liquidity(uint256[2],uint256,address)",
    values: [[BigNumberish, BigNumberish], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get_dy",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(int128,int128,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(int128,int128,uint256,uint256,address)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity(uint256,uint256[2])",
    values: [BigNumberish, [BigNumberish, BigNumberish]]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity(uint256,uint256[2],address)",
    values: [BigNumberish, [BigNumberish, BigNumberish], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_imbalance(uint256[2],uint256)",
    values: [[BigNumberish, BigNumberish], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_imbalance(uint256[2],uint256,address)",
    values: [[BigNumberish, BigNumberish], BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calc_withdraw_one_coin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256,address)",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ramp_A",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stop_ramp_A",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "admin_balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_admin_fees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "coins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "initial_A", values?: undefined): string;
  encodeFunctionData(functionFragment: "future_A", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initial_A_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_A_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A_precise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_virtual_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_token_amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[2],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "add_liquidity(uint256[2],uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_dy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchange(int128,int128,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange(int128,int128,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity(uint256,uint256[2])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity(uint256,uint256[2],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_imbalance(uint256[2],uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_imbalance(uint256[2],uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calc_withdraw_one_coin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remove_liquidity_one_coin(uint256,int128,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ramp_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stop_ramp_A",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admin_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_admin_fees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initial_A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "future_A", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initial_A_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_A_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
}

export namespace TransferEvent {
  export type InputTuple = [
    sender: AddressLike,
    receiver: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [sender: string, receiver: string, value: bigint];
  export interface OutputObject {
    sender: string;
    receiver: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenExchangeEvent {
  export type InputTuple = [
    buyer: AddressLike,
    sold_id: BigNumberish,
    tokens_sold: BigNumberish,
    bought_id: BigNumberish,
    tokens_bought: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    sold_id: bigint,
    tokens_sold: bigint,
    bought_id: bigint,
    tokens_bought: bigint
  ];
  export interface OutputObject {
    buyer: string;
    sold_id: bigint;
    tokens_sold: bigint;
    bought_id: bigint;
    tokens_bought: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquidityEvent {
  export type InputTuple = [
    provider: AddressLike,
    token_amounts: [BigNumberish, BigNumberish],
    fees: [BigNumberish, BigNumberish],
    invariant: BigNumberish,
    token_supply: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    token_amounts: [bigint, bigint],
    fees: [bigint, bigint],
    invariant: bigint,
    token_supply: bigint
  ];
  export interface OutputObject {
    provider: string;
    token_amounts: [bigint, bigint];
    fees: [bigint, bigint];
    invariant: bigint;
    token_supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityEvent {
  export type InputTuple = [
    provider: AddressLike,
    token_amounts: [BigNumberish, BigNumberish],
    fees: [BigNumberish, BigNumberish],
    token_supply: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    token_amounts: [bigint, bigint],
    fees: [bigint, bigint],
    token_supply: bigint
  ];
  export interface OutputObject {
    provider: string;
    token_amounts: [bigint, bigint];
    fees: [bigint, bigint];
    token_supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityOneEvent {
  export type InputTuple = [
    provider: AddressLike,
    token_amount: BigNumberish,
    coin_amount: BigNumberish,
    token_supply: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    token_amount: bigint,
    coin_amount: bigint,
    token_supply: bigint
  ];
  export interface OutputObject {
    provider: string;
    token_amount: bigint;
    coin_amount: bigint;
    token_supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityImbalanceEvent {
  export type InputTuple = [
    provider: AddressLike,
    token_amounts: [BigNumberish, BigNumberish],
    fees: [BigNumberish, BigNumberish],
    invariant: BigNumberish,
    token_supply: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    token_amounts: [bigint, bigint],
    fees: [bigint, bigint],
    invariant: bigint,
    token_supply: bigint
  ];
  export interface OutputObject {
    provider: string;
    token_amounts: [bigint, bigint];
    fees: [bigint, bigint];
    invariant: bigint;
    token_supply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RampAEvent {
  export type InputTuple = [
    old_A: BigNumberish,
    new_A: BigNumberish,
    initial_time: BigNumberish,
    future_time: BigNumberish
  ];
  export type OutputTuple = [
    old_A: bigint,
    new_A: bigint,
    initial_time: bigint,
    future_time: bigint
  ];
  export interface OutputObject {
    old_A: bigint;
    new_A: bigint;
    initial_time: bigint;
    future_time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StopRampAEvent {
  export type InputTuple = [A: BigNumberish, t: BigNumberish];
  export type OutputTuple = [A: bigint, t: bigint];
  export interface OutputObject {
    A: bigint;
    t: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CurveLPToken extends BaseContract {
  connect(runner?: ContractRunner | null): CurveLPToken;
  waitForDeployment(): Promise<this>;

  interface: CurveLPTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  initialize: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _coins: [AddressLike, AddressLike, AddressLike, AddressLike],
      _rate_multipliers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _A: BigNumberish,
      _fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [_spender: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  get_balances: TypedContractMethod<[], [[bigint, bigint]], "view">;

  admin_fee: TypedContractMethod<[], [bigint], "view">;

  A: TypedContractMethod<[], [bigint], "view">;

  A_precise: TypedContractMethod<[], [bigint], "view">;

  get_virtual_price: TypedContractMethod<[], [bigint], "view">;

  calc_token_amount: TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], _is_deposit: boolean],
    [bigint],
    "view"
  >;

  "add_liquidity(uint256[2],uint256)": TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], _min_mint_amount: BigNumberish],
    [bigint],
    "payable"
  >;

  "add_liquidity(uint256[2],uint256,address)": TypedContractMethod<
    [
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  get_dy: TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, dx: BigNumberish],
    [bigint],
    "view"
  >;

  "exchange(int128,int128,uint256,uint256)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      _dx: BigNumberish,
      _min_dy: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  "exchange(int128,int128,uint256,uint256,address)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      _dx: BigNumberish,
      _min_dy: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;

  "remove_liquidity(uint256,uint256[2])": TypedContractMethod<
    [_burn_amount: BigNumberish, _min_amounts: [BigNumberish, BigNumberish]],
    [[bigint, bigint]],
    "nonpayable"
  >;

  "remove_liquidity(uint256,uint256[2],address)": TypedContractMethod<
    [
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      _receiver: AddressLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  "remove_liquidity_imbalance(uint256[2],uint256)": TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], _max_burn_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "remove_liquidity_imbalance(uint256[2],uint256,address)": TypedContractMethod<
    [
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  calc_withdraw_one_coin: TypedContractMethod<
    [_burn_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;

  "remove_liquidity_one_coin(uint256,int128,uint256)": TypedContractMethod<
    [_burn_amount: BigNumberish, i: BigNumberish, _min_received: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  "remove_liquidity_one_coin(uint256,int128,uint256,address)": TypedContractMethod<
    [
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  ramp_A: TypedContractMethod<
    [_future_A: BigNumberish, _future_time: BigNumberish],
    [void],
    "nonpayable"
  >;

  stop_ramp_A: TypedContractMethod<[], [void], "nonpayable">;

  admin_balances: TypedContractMethod<[i: BigNumberish], [bigint], "view">;

  withdraw_admin_fees: TypedContractMethod<[], [void], "nonpayable">;

  coins: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  balances: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  initial_A: TypedContractMethod<[], [bigint], "view">;

  future_A: TypedContractMethod<[], [bigint], "view">;

  initial_A_time: TypedContractMethod<[], [bigint], "view">;

  future_A_time: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  symbol: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  allowance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _coins: [AddressLike, AddressLike, AddressLike, AddressLike],
      _rate_multipliers: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      _A: BigNumberish,
      _fee: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [_from: AddressLike, _to: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_spender: AddressLike, _value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "get_balances"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "admin_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "A"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "A_precise"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_virtual_price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calc_token_amount"
  ): TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], _is_deposit: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "add_liquidity(uint256[2],uint256)"
  ): TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], _min_mint_amount: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "add_liquidity(uint256[2],uint256,address)"
  ): TypedContractMethod<
    [
      _amounts: [BigNumberish, BigNumberish],
      _min_mint_amount: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "get_dy"
  ): TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, dx: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exchange(int128,int128,uint256,uint256)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      _dx: BigNumberish,
      _min_dy: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "exchange(int128,int128,uint256,uint256,address)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      _dx: BigNumberish,
      _min_dy: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity(uint256,uint256[2])"
  ): TypedContractMethod<
    [_burn_amount: BigNumberish, _min_amounts: [BigNumberish, BigNumberish]],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity(uint256,uint256[2],address)"
  ): TypedContractMethod<
    [
      _burn_amount: BigNumberish,
      _min_amounts: [BigNumberish, BigNumberish],
      _receiver: AddressLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity_imbalance(uint256[2],uint256)"
  ): TypedContractMethod<
    [_amounts: [BigNumberish, BigNumberish], _max_burn_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity_imbalance(uint256[2],uint256,address)"
  ): TypedContractMethod<
    [
      _amounts: [BigNumberish, BigNumberish],
      _max_burn_amount: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calc_withdraw_one_coin"
  ): TypedContractMethod<
    [_burn_amount: BigNumberish, i: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity_one_coin(uint256,int128,uint256)"
  ): TypedContractMethod<
    [_burn_amount: BigNumberish, i: BigNumberish, _min_received: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "remove_liquidity_one_coin(uint256,int128,uint256,address)"
  ): TypedContractMethod<
    [
      _burn_amount: BigNumberish,
      i: BigNumberish,
      _min_received: BigNumberish,
      _receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "ramp_A"
  ): TypedContractMethod<
    [_future_A: BigNumberish, _future_time: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stop_ramp_A"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin_balances"
  ): TypedContractMethod<[i: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw_admin_fees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "coins"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initial_A"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_A"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initial_A_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "future_A_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "TokenExchange"
  ): TypedContractEvent<
    TokenExchangeEvent.InputTuple,
    TokenExchangeEvent.OutputTuple,
    TokenExchangeEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquidity"
  ): TypedContractEvent<
    AddLiquidityEvent.InputTuple,
    AddLiquidityEvent.OutputTuple,
    AddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidity"
  ): TypedContractEvent<
    RemoveLiquidityEvent.InputTuple,
    RemoveLiquidityEvent.OutputTuple,
    RemoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidityOne"
  ): TypedContractEvent<
    RemoveLiquidityOneEvent.InputTuple,
    RemoveLiquidityOneEvent.OutputTuple,
    RemoveLiquidityOneEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidityImbalance"
  ): TypedContractEvent<
    RemoveLiquidityImbalanceEvent.InputTuple,
    RemoveLiquidityImbalanceEvent.OutputTuple,
    RemoveLiquidityImbalanceEvent.OutputObject
  >;
  getEvent(
    key: "RampA"
  ): TypedContractEvent<
    RampAEvent.InputTuple,
    RampAEvent.OutputTuple,
    RampAEvent.OutputObject
  >;
  getEvent(
    key: "StopRampA"
  ): TypedContractEvent<
    StopRampAEvent.InputTuple,
    StopRampAEvent.OutputTuple,
    StopRampAEvent.OutputObject
  >;

  filters: {
    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "TokenExchange(address,int128,uint256,int128,uint256)": TypedContractEvent<
      TokenExchangeEvent.InputTuple,
      TokenExchangeEvent.OutputTuple,
      TokenExchangeEvent.OutputObject
    >;
    TokenExchange: TypedContractEvent<
      TokenExchangeEvent.InputTuple,
      TokenExchangeEvent.OutputTuple,
      TokenExchangeEvent.OutputObject
    >;

    "AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)": TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;
    AddLiquidity: TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;

    "RemoveLiquidity(address,uint256[2],uint256[2],uint256)": TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;
    RemoveLiquidity: TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;

    "RemoveLiquidityOne(address,uint256,uint256,uint256)": TypedContractEvent<
      RemoveLiquidityOneEvent.InputTuple,
      RemoveLiquidityOneEvent.OutputTuple,
      RemoveLiquidityOneEvent.OutputObject
    >;
    RemoveLiquidityOne: TypedContractEvent<
      RemoveLiquidityOneEvent.InputTuple,
      RemoveLiquidityOneEvent.OutputTuple,
      RemoveLiquidityOneEvent.OutputObject
    >;

    "RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)": TypedContractEvent<
      RemoveLiquidityImbalanceEvent.InputTuple,
      RemoveLiquidityImbalanceEvent.OutputTuple,
      RemoveLiquidityImbalanceEvent.OutputObject
    >;
    RemoveLiquidityImbalance: TypedContractEvent<
      RemoveLiquidityImbalanceEvent.InputTuple,
      RemoveLiquidityImbalanceEvent.OutputTuple,
      RemoveLiquidityImbalanceEvent.OutputObject
    >;

    "RampA(uint256,uint256,uint256,uint256)": TypedContractEvent<
      RampAEvent.InputTuple,
      RampAEvent.OutputTuple,
      RampAEvent.OutputObject
    >;
    RampA: TypedContractEvent<
      RampAEvent.InputTuple,
      RampAEvent.OutputTuple,
      RampAEvent.OutputObject
    >;

    "StopRampA(uint256,uint256)": TypedContractEvent<
      StopRampAEvent.InputTuple,
      StopRampAEvent.OutputTuple,
      StopRampAEvent.OutputObject
    >;
    StopRampA: TypedContractEvent<
      StopRampAEvent.InputTuple,
      StopRampAEvent.OutputTuple,
      StopRampAEvent.OutputObject
    >;
  };
}
