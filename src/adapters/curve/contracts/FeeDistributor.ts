/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FeeDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkpoint_token"
      | "ve_for_at"
      | "checkpoint_total_supply"
      | "claim()"
      | "claim(address)"
      | "claim_many"
      | "burn"
      | "commit_admin"
      | "apply_admin"
      | "toggle_allow_checkpoint_token"
      | "kill_me"
      | "recover_balance"
      | "start_time"
      | "time_cursor"
      | "time_cursor_of"
      | "user_epoch_of"
      | "last_token_time"
      | "tokens_per_week"
      | "voting_escrow"
      | "token"
      | "total_received"
      | "token_last_balance"
      | "ve_supply"
      | "admin"
      | "future_admin"
      | "can_checkpoint_token"
      | "emergency_return"
      | "is_killed"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommitAdmin"
      | "ApplyAdmin"
      | "ToggleAllowCheckpointToken"
      | "CheckpointToken"
      | "Claimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkpoint_token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ve_for_at",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint_total_supply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim_many",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "commit_admin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "apply_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggle_allow_checkpoint_token",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kill_me", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recover_balance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "start_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "time_cursor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "time_cursor_of",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "user_epoch_of",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "last_token_time",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokens_per_week",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting_escrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "total_received",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "token_last_balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ve_supply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "future_admin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "can_checkpoint_token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergency_return",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "is_killed", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "checkpoint_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve_for_at", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpoint_total_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claim(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim_many", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commit_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "apply_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggle_allow_checkpoint_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill_me", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recover_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start_time", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "time_cursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "time_cursor_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_epoch_of",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "last_token_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokens_per_week",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voting_escrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "total_received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token_last_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ve_supply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "future_admin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "can_checkpoint_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_killed", data: BytesLike): Result;
}

export namespace CommitAdminEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApplyAdminEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ToggleAllowCheckpointTokenEvent {
  export type InputTuple = [toggle_flag: boolean];
  export type OutputTuple = [toggle_flag: boolean];
  export interface OutputObject {
    toggle_flag: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CheckpointTokenEvent {
  export type InputTuple = [time: BigNumberish, tokens: BigNumberish];
  export type OutputTuple = [time: bigint, tokens: bigint];
  export interface OutputObject {
    time: bigint;
    tokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimedEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    claim_epoch: BigNumberish,
    max_epoch: BigNumberish
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    claim_epoch: bigint,
    max_epoch: bigint
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    claim_epoch: bigint;
    max_epoch: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): FeeDistributor;
  waitForDeployment(): Promise<this>;

  interface: FeeDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkpoint_token: TypedContractMethod<[], [void], "nonpayable">;

  ve_for_at: TypedContractMethod<
    [_user: AddressLike, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  checkpoint_total_supply: TypedContractMethod<[], [void], "nonpayable">;

  "claim()": TypedContractMethod<[], [bigint], "nonpayable">;

  "claim(address)": TypedContractMethod<
    [_addr: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claim_many: TypedContractMethod<
    [_receivers: AddressLike[]],
    [boolean],
    "nonpayable"
  >;

  burn: TypedContractMethod<[_coin: AddressLike], [boolean], "nonpayable">;

  commit_admin: TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;

  apply_admin: TypedContractMethod<[], [void], "nonpayable">;

  toggle_allow_checkpoint_token: TypedContractMethod<[], [void], "nonpayable">;

  kill_me: TypedContractMethod<[], [void], "nonpayable">;

  recover_balance: TypedContractMethod<
    [_coin: AddressLike],
    [boolean],
    "nonpayable"
  >;

  start_time: TypedContractMethod<[], [bigint], "view">;

  time_cursor: TypedContractMethod<[], [bigint], "view">;

  time_cursor_of: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  user_epoch_of: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  last_token_time: TypedContractMethod<[], [bigint], "view">;

  tokens_per_week: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  voting_escrow: TypedContractMethod<[], [string], "view">;

  token: TypedContractMethod<[], [string], "view">;

  total_received: TypedContractMethod<[], [bigint], "view">;

  token_last_balance: TypedContractMethod<[], [bigint], "view">;

  ve_supply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  admin: TypedContractMethod<[], [string], "view">;

  future_admin: TypedContractMethod<[], [string], "view">;

  can_checkpoint_token: TypedContractMethod<[], [boolean], "view">;

  emergency_return: TypedContractMethod<[], [string], "view">;

  is_killed: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkpoint_token"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ve_for_at"
  ): TypedContractMethod<
    [_user: AddressLike, _timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkpoint_total_supply"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim()"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claim(address)"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claim_many"
  ): TypedContractMethod<[_receivers: AddressLike[]], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[_coin: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "commit_admin"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "apply_admin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "toggle_allow_checkpoint_token"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "kill_me"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "recover_balance"
  ): TypedContractMethod<[_coin: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "start_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "time_cursor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "time_cursor_of"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "user_epoch_of"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "last_token_time"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokens_per_week"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "voting_escrow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "total_received"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token_last_balance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ve_supply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "future_admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "can_checkpoint_token"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "emergency_return"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "is_killed"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "CommitAdmin"
  ): TypedContractEvent<
    CommitAdminEvent.InputTuple,
    CommitAdminEvent.OutputTuple,
    CommitAdminEvent.OutputObject
  >;
  getEvent(
    key: "ApplyAdmin"
  ): TypedContractEvent<
    ApplyAdminEvent.InputTuple,
    ApplyAdminEvent.OutputTuple,
    ApplyAdminEvent.OutputObject
  >;
  getEvent(
    key: "ToggleAllowCheckpointToken"
  ): TypedContractEvent<
    ToggleAllowCheckpointTokenEvent.InputTuple,
    ToggleAllowCheckpointTokenEvent.OutputTuple,
    ToggleAllowCheckpointTokenEvent.OutputObject
  >;
  getEvent(
    key: "CheckpointToken"
  ): TypedContractEvent<
    CheckpointTokenEvent.InputTuple,
    CheckpointTokenEvent.OutputTuple,
    CheckpointTokenEvent.OutputObject
  >;
  getEvent(
    key: "Claimed"
  ): TypedContractEvent<
    ClaimedEvent.InputTuple,
    ClaimedEvent.OutputTuple,
    ClaimedEvent.OutputObject
  >;

  filters: {
    "CommitAdmin(address)": TypedContractEvent<
      CommitAdminEvent.InputTuple,
      CommitAdminEvent.OutputTuple,
      CommitAdminEvent.OutputObject
    >;
    CommitAdmin: TypedContractEvent<
      CommitAdminEvent.InputTuple,
      CommitAdminEvent.OutputTuple,
      CommitAdminEvent.OutputObject
    >;

    "ApplyAdmin(address)": TypedContractEvent<
      ApplyAdminEvent.InputTuple,
      ApplyAdminEvent.OutputTuple,
      ApplyAdminEvent.OutputObject
    >;
    ApplyAdmin: TypedContractEvent<
      ApplyAdminEvent.InputTuple,
      ApplyAdminEvent.OutputTuple,
      ApplyAdminEvent.OutputObject
    >;

    "ToggleAllowCheckpointToken(bool)": TypedContractEvent<
      ToggleAllowCheckpointTokenEvent.InputTuple,
      ToggleAllowCheckpointTokenEvent.OutputTuple,
      ToggleAllowCheckpointTokenEvent.OutputObject
    >;
    ToggleAllowCheckpointToken: TypedContractEvent<
      ToggleAllowCheckpointTokenEvent.InputTuple,
      ToggleAllowCheckpointTokenEvent.OutputTuple,
      ToggleAllowCheckpointTokenEvent.OutputObject
    >;

    "CheckpointToken(uint256,uint256)": TypedContractEvent<
      CheckpointTokenEvent.InputTuple,
      CheckpointTokenEvent.OutputTuple,
      CheckpointTokenEvent.OutputObject
    >;
    CheckpointToken: TypedContractEvent<
      CheckpointTokenEvent.InputTuple,
      CheckpointTokenEvent.OutputTuple,
      CheckpointTokenEvent.OutputObject
    >;

    "Claimed(address,uint256,uint256,uint256)": TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
    Claimed: TypedContractEvent<
      ClaimedEvent.InputTuple,
      ClaimedEvent.OutputTuple,
      ClaimedEvent.OutputObject
    >;
  };
}
