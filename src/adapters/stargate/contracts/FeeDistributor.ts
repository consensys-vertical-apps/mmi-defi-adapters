/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FeeDistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canTokenBeClaimed"
      | "checkpoint"
      | "checkpointToken"
      | "checkpointTokens"
      | "checkpointUser"
      | "claimToken"
      | "claimTokens"
      | "depositToken"
      | "depositTokens"
      | "enableOnlyVeHolderClaiming"
      | "enableTokenClaiming"
      | "getStartTime"
      | "getTimeCursor"
      | "getTokenCachedBalance"
      | "getTokenLastBalance"
      | "getTokenStartTime"
      | "getTokenTimeCursor"
      | "getTokensDistributedInWeek"
      | "getTotalSupplyAtTimestamp"
      | "getUserBalanceAtTimestamp"
      | "getUserLastEpochCheckpointed"
      | "getUserStartTime"
      | "getUserTimeCursor"
      | "getUserTokenTimeCursor"
      | "getVotingEscrow"
      | "onlyVeHolderClaimingEnabled"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OnlyVeHolderClaimingEnabled"
      | "OwnershipTransferred"
      | "TokenCheckpointed"
      | "TokenClaimingEnabled"
      | "TokenWithdrawn"
      | "TokensClaimed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canTokenBeClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointTokens",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkpointUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokens",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "enableOnlyVeHolderClaiming",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "enableTokenClaiming",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeCursor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenCachedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenLastBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenStartTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenTimeCursor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensDistributedInWeek",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupplyAtTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalanceAtTimestamp",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLastEpochCheckpointed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStartTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTimeCursor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenTimeCursor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingEscrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onlyVeHolderClaimingEnabled",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "canTokenBeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpointToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkpointUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableOnlyVeHolderClaiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTokenClaiming",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenCachedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenLastBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenTimeCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensDistributedInWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupplyAtTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalanceAtTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLastEpochCheckpointed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTimeCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenTimeCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onlyVeHolderClaimingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace OnlyVeHolderClaimingEnabledEvent {
  export type InputTuple = [user: AddressLike, enabled: boolean];
  export type OutputTuple = [user: string, enabled: boolean];
  export interface OutputObject {
    user: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenCheckpointedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    lastCheckpointTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    lastCheckpointTimestamp: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    lastCheckpointTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenClaimingEnabledEvent {
  export type InputTuple = [token: AddressLike, enabled: boolean];
  export type OutputTuple = [token: string, enabled: boolean];
  export interface OutputObject {
    token: string;
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWithdrawnEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, recipient: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    userTokenTimeCursor: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    token: string,
    amount: bigint,
    userTokenTimeCursor: bigint
  ];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
    userTokenTimeCursor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeDistributor extends BaseContract {
  connect(runner?: ContractRunner | null): FeeDistributor;
  waitForDeployment(): Promise<this>;

  interface: FeeDistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canTokenBeClaimed: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  checkpoint: TypedContractMethod<[], [void], "nonpayable">;

  checkpointToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  checkpointTokens: TypedContractMethod<
    [tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  checkpointUser: TypedContractMethod<
    [user: AddressLike],
    [void],
    "nonpayable"
  >;

  claimToken: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  claimTokens: TypedContractMethod<
    [user: AddressLike, tokens: AddressLike[]],
    [bigint[]],
    "nonpayable"
  >;

  depositToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositTokens: TypedContractMethod<
    [tokens: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  enableOnlyVeHolderClaiming: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  enableTokenClaiming: TypedContractMethod<
    [token: AddressLike, enable: boolean],
    [void],
    "nonpayable"
  >;

  getStartTime: TypedContractMethod<[], [bigint], "view">;

  getTimeCursor: TypedContractMethod<[], [bigint], "view">;

  getTokenCachedBalance: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getTokenLastBalance: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getTokenStartTime: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getTokenTimeCursor: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  getTokensDistributedInWeek: TypedContractMethod<
    [token: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalSupplyAtTimestamp: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getUserBalanceAtTimestamp: TypedContractMethod<
    [user: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getUserLastEpochCheckpointed: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getUserStartTime: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserTimeCursor: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getUserTokenTimeCursor: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;

  getVotingEscrow: TypedContractMethod<[], [string], "view">;

  onlyVeHolderClaimingEnabled: TypedContractMethod<
    [user: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canTokenBeClaimed"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkpoint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkpointToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkpointTokens"
  ): TypedContractMethod<[tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkpointUser"
  ): TypedContractMethod<[user: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimToken"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<
    [user: AddressLike, tokens: AddressLike[]],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositTokens"
  ): TypedContractMethod<
    [tokens: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enableOnlyVeHolderClaiming"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableTokenClaiming"
  ): TypedContractMethod<
    [token: AddressLike, enable: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getStartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTimeCursor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenCachedBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenLastBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenStartTime"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenTimeCursor"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokensDistributedInWeek"
  ): TypedContractMethod<
    [token: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalSupplyAtTimestamp"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserBalanceAtTimestamp"
  ): TypedContractMethod<
    [user: AddressLike, timestamp: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLastEpochCheckpointed"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserStartTime"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTimeCursor"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTokenTimeCursor"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingEscrow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onlyVeHolderClaimingEnabled"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OnlyVeHolderClaimingEnabled"
  ): TypedContractEvent<
    OnlyVeHolderClaimingEnabledEvent.InputTuple,
    OnlyVeHolderClaimingEnabledEvent.OutputTuple,
    OnlyVeHolderClaimingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenCheckpointed"
  ): TypedContractEvent<
    TokenCheckpointedEvent.InputTuple,
    TokenCheckpointedEvent.OutputTuple,
    TokenCheckpointedEvent.OutputObject
  >;
  getEvent(
    key: "TokenClaimingEnabled"
  ): TypedContractEvent<
    TokenClaimingEnabledEvent.InputTuple,
    TokenClaimingEnabledEvent.OutputTuple,
    TokenClaimingEnabledEvent.OutputObject
  >;
  getEvent(
    key: "TokenWithdrawn"
  ): TypedContractEvent<
    TokenWithdrawnEvent.InputTuple,
    TokenWithdrawnEvent.OutputTuple,
    TokenWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;

  filters: {
    "OnlyVeHolderClaimingEnabled(address,bool)": TypedContractEvent<
      OnlyVeHolderClaimingEnabledEvent.InputTuple,
      OnlyVeHolderClaimingEnabledEvent.OutputTuple,
      OnlyVeHolderClaimingEnabledEvent.OutputObject
    >;
    OnlyVeHolderClaimingEnabled: TypedContractEvent<
      OnlyVeHolderClaimingEnabledEvent.InputTuple,
      OnlyVeHolderClaimingEnabledEvent.OutputTuple,
      OnlyVeHolderClaimingEnabledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenCheckpointed(address,uint256,uint256)": TypedContractEvent<
      TokenCheckpointedEvent.InputTuple,
      TokenCheckpointedEvent.OutputTuple,
      TokenCheckpointedEvent.OutputObject
    >;
    TokenCheckpointed: TypedContractEvent<
      TokenCheckpointedEvent.InputTuple,
      TokenCheckpointedEvent.OutputTuple,
      TokenCheckpointedEvent.OutputObject
    >;

    "TokenClaimingEnabled(address,bool)": TypedContractEvent<
      TokenClaimingEnabledEvent.InputTuple,
      TokenClaimingEnabledEvent.OutputTuple,
      TokenClaimingEnabledEvent.OutputObject
    >;
    TokenClaimingEnabled: TypedContractEvent<
      TokenClaimingEnabledEvent.InputTuple,
      TokenClaimingEnabledEvent.OutputTuple,
      TokenClaimingEnabledEvent.OutputObject
    >;

    "TokenWithdrawn(address,uint256,address)": TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;
    TokenWithdrawn: TypedContractEvent<
      TokenWithdrawnEvent.InputTuple,
      TokenWithdrawnEvent.OutputTuple,
      TokenWithdrawnEvent.OutputObject
    >;

    "TokensClaimed(address,address,uint256,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
  };
}
