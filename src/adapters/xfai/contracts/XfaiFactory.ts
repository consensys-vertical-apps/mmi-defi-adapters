/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface XfaiFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allPools"
      | "allPoolsLength"
      | "createPool"
      | "getOwner"
      | "getPool"
      | "getXfaiCore"
      | "poolCodeHash"
      | "setOwner"
      | "setXfaiCore"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangedCore"
      | "ChangedOwner"
      | "PoolCreated"
      | "Whitelisting"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPool",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getXfaiCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setXfaiCore",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "allPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getXfaiCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setXfaiCore",
    data: BytesLike
  ): Result;
}

export namespace ChangedCoreEvent {
  export type InputTuple = [core: AddressLike];
  export type OutputTuple = [core: string];
  export interface OutputObject {
    core: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChangedOwnerEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [
    token: AddressLike,
    pool: AddressLike,
    allPoolsSize: BigNumberish
  ];
  export type OutputTuple = [token: string, pool: string, allPoolsSize: bigint];
  export interface OutputObject {
    token: string;
    pool: string;
    allPoolsSize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistingEvent {
  export type InputTuple = [state: boolean];
  export type OutputTuple = [state: boolean];
  export interface OutputObject {
    state: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface XfaiFactory extends BaseContract {
  connect(runner?: ContractRunner | null): XfaiFactory;
  waitForDeployment(): Promise<this>;

  interface: XfaiFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allPools: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allPoolsLength: TypedContractMethod<[], [bigint], "view">;

  createPool: TypedContractMethod<
    [_token: AddressLike],
    [string],
    "nonpayable"
  >;

  getOwner: TypedContractMethod<[], [string], "view">;

  getPool: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getXfaiCore: TypedContractMethod<[], [string], "view">;

  poolCodeHash: TypedContractMethod<[], [string], "view">;

  setOwner: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  setXfaiCore: TypedContractMethod<[_core: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allPools"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allPoolsLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<[_token: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPool"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getXfaiCore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "poolCodeHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setXfaiCore"
  ): TypedContractMethod<[_core: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ChangedCore"
  ): TypedContractEvent<
    ChangedCoreEvent.InputTuple,
    ChangedCoreEvent.OutputTuple,
    ChangedCoreEvent.OutputObject
  >;
  getEvent(
    key: "ChangedOwner"
  ): TypedContractEvent<
    ChangedOwnerEvent.InputTuple,
    ChangedOwnerEvent.OutputTuple,
    ChangedOwnerEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Whitelisting"
  ): TypedContractEvent<
    WhitelistingEvent.InputTuple,
    WhitelistingEvent.OutputTuple,
    WhitelistingEvent.OutputObject
  >;

  filters: {
    "ChangedCore(address)": TypedContractEvent<
      ChangedCoreEvent.InputTuple,
      ChangedCoreEvent.OutputTuple,
      ChangedCoreEvent.OutputObject
    >;
    ChangedCore: TypedContractEvent<
      ChangedCoreEvent.InputTuple,
      ChangedCoreEvent.OutputTuple,
      ChangedCoreEvent.OutputObject
    >;

    "ChangedOwner(address)": TypedContractEvent<
      ChangedOwnerEvent.InputTuple,
      ChangedOwnerEvent.OutputTuple,
      ChangedOwnerEvent.OutputObject
    >;
    ChangedOwner: TypedContractEvent<
      ChangedOwnerEvent.InputTuple,
      ChangedOwnerEvent.OutputTuple,
      ChangedOwnerEvent.OutputObject
    >;

    "PoolCreated(address,address,uint256)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "Whitelisting(bool)": TypedContractEvent<
      WhitelistingEvent.InputTuple,
      WhitelistingEvent.OutputTuple,
      WhitelistingEvent.OutputObject
    >;
    Whitelisting: TypedContractEvent<
      WhitelistingEvent.InputTuple,
      WhitelistingEvent.OutputTuple,
      WhitelistingEvent.OutputObject
    >;
  };
}
