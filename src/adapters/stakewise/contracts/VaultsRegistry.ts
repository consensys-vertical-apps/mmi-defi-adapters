/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface VaultsRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addFactory"
      | "addVault"
      | "addVaultImpl"
      | "factories"
      | "initialize"
      | "owner"
      | "pendingOwner"
      | "removeFactory"
      | "removeVaultImpl"
      | "renounceOwnership"
      | "transferOwnership"
      | "vaultImpls"
      | "vaults"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FactoryAdded"
      | "FactoryRemoved"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "VaultAdded"
      | "VaultImplAdded"
      | "VaultImplRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addVaultImpl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "factories",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVaultImpl",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultImpls",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vaults", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addVaultImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factories", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVaultImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultImpls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
}

export namespace FactoryAddedEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactoryRemovedEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultAddedEvent {
  export type InputTuple = [caller: AddressLike, vault: AddressLike];
  export type OutputTuple = [caller: string, vault: string];
  export interface OutputObject {
    caller: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultImplAddedEvent {
  export type InputTuple = [impl: AddressLike];
  export type OutputTuple = [impl: string];
  export interface OutputObject {
    impl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultImplRemovedEvent {
  export type InputTuple = [impl: AddressLike];
  export type OutputTuple = [impl: string];
  export interface OutputObject {
    impl: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultsRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): VaultsRegistry;
  waitForDeployment(): Promise<this>;

  interface: VaultsRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addFactory: TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;

  addVault: TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;

  addVaultImpl: TypedContractMethod<
    [newImpl: AddressLike],
    [void],
    "nonpayable"
  >;

  factories: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  initialize: TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  removeFactory: TypedContractMethod<
    [factory: AddressLike],
    [void],
    "nonpayable"
  >;

  removeVaultImpl: TypedContractMethod<
    [impl: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vaultImpls: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  vaults: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addFactory"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVault"
  ): TypedContractMethod<[vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVaultImpl"
  ): TypedContractMethod<[newImpl: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factories"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeFactory"
  ): TypedContractMethod<[factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeVaultImpl"
  ): TypedContractMethod<[impl: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vaultImpls"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "vaults"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "FactoryAdded"
  ): TypedContractEvent<
    FactoryAddedEvent.InputTuple,
    FactoryAddedEvent.OutputTuple,
    FactoryAddedEvent.OutputObject
  >;
  getEvent(
    key: "FactoryRemoved"
  ): TypedContractEvent<
    FactoryRemovedEvent.InputTuple,
    FactoryRemovedEvent.OutputTuple,
    FactoryRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VaultAdded"
  ): TypedContractEvent<
    VaultAddedEvent.InputTuple,
    VaultAddedEvent.OutputTuple,
    VaultAddedEvent.OutputObject
  >;
  getEvent(
    key: "VaultImplAdded"
  ): TypedContractEvent<
    VaultImplAddedEvent.InputTuple,
    VaultImplAddedEvent.OutputTuple,
    VaultImplAddedEvent.OutputObject
  >;
  getEvent(
    key: "VaultImplRemoved"
  ): TypedContractEvent<
    VaultImplRemovedEvent.InputTuple,
    VaultImplRemovedEvent.OutputTuple,
    VaultImplRemovedEvent.OutputObject
  >;

  filters: {
    "FactoryAdded(address)": TypedContractEvent<
      FactoryAddedEvent.InputTuple,
      FactoryAddedEvent.OutputTuple,
      FactoryAddedEvent.OutputObject
    >;
    FactoryAdded: TypedContractEvent<
      FactoryAddedEvent.InputTuple,
      FactoryAddedEvent.OutputTuple,
      FactoryAddedEvent.OutputObject
    >;

    "FactoryRemoved(address)": TypedContractEvent<
      FactoryRemovedEvent.InputTuple,
      FactoryRemovedEvent.OutputTuple,
      FactoryRemovedEvent.OutputObject
    >;
    FactoryRemoved: TypedContractEvent<
      FactoryRemovedEvent.InputTuple,
      FactoryRemovedEvent.OutputTuple,
      FactoryRemovedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VaultAdded(address,address)": TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;
    VaultAdded: TypedContractEvent<
      VaultAddedEvent.InputTuple,
      VaultAddedEvent.OutputTuple,
      VaultAddedEvent.OutputObject
    >;

    "VaultImplAdded(address)": TypedContractEvent<
      VaultImplAddedEvent.InputTuple,
      VaultImplAddedEvent.OutputTuple,
      VaultImplAddedEvent.OutputObject
    >;
    VaultImplAdded: TypedContractEvent<
      VaultImplAddedEvent.InputTuple,
      VaultImplAddedEvent.OutputTuple,
      VaultImplAddedEvent.OutputObject
    >;

    "VaultImplRemoved(address)": TypedContractEvent<
      VaultImplRemovedEvent.InputTuple,
      VaultImplRemovedEvent.OutputTuple,
      VaultImplRemovedEvent.OutputObject
    >;
    VaultImplRemoved: TypedContractEvent<
      VaultImplRemovedEvent.InputTuple,
      VaultImplRemovedEvent.OutputTuple,
      VaultImplRemovedEvent.OutputObject
    >;
  };
}
