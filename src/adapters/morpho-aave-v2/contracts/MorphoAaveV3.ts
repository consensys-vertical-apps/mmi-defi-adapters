/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Types {
  export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

  export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
    v: bigint;
    r: string;
    s: string;
  };

  export type IterationsStruct = {
    repay: BigNumberish;
    withdraw: BigNumberish;
  };

  export type IterationsStructOutput = [repay: bigint, withdraw: bigint] & {
    repay: bigint;
    withdraw: bigint;
  };

  export type LiquidityDataStruct = {
    borrowable: BigNumberish;
    maxDebt: BigNumberish;
    debt: BigNumberish;
  };

  export type LiquidityDataStructOutput = [
    borrowable: bigint,
    maxDebt: bigint,
    debt: bigint
  ] & { borrowable: bigint; maxDebt: bigint; debt: bigint };

  export type MarketSideIndexesStruct = {
    poolIndex: BigNumberish;
    p2pIndex: BigNumberish;
  };

  export type MarketSideIndexesStructOutput = [
    poolIndex: bigint,
    p2pIndex: bigint
  ] & { poolIndex: bigint; p2pIndex: bigint };

  export type IndexesStruct = {
    supply: Types.MarketSideIndexesStruct;
    borrow: Types.MarketSideIndexesStruct;
  };

  export type IndexesStructOutput = [
    supply: Types.MarketSideIndexesStructOutput,
    borrow: Types.MarketSideIndexesStructOutput
  ] & {
    supply: Types.MarketSideIndexesStructOutput;
    borrow: Types.MarketSideIndexesStructOutput;
  };

  export type MarketSideDeltaStruct = {
    scaledDelta: BigNumberish;
    scaledP2PTotal: BigNumberish;
  };

  export type MarketSideDeltaStructOutput = [
    scaledDelta: bigint,
    scaledP2PTotal: bigint
  ] & { scaledDelta: bigint; scaledP2PTotal: bigint };

  export type DeltasStruct = {
    supply: Types.MarketSideDeltaStruct;
    borrow: Types.MarketSideDeltaStruct;
  };

  export type DeltasStructOutput = [
    supply: Types.MarketSideDeltaStructOutput,
    borrow: Types.MarketSideDeltaStructOutput
  ] & {
    supply: Types.MarketSideDeltaStructOutput;
    borrow: Types.MarketSideDeltaStructOutput;
  };

  export type PauseStatusesStruct = {
    isP2PDisabled: boolean;
    isSupplyPaused: boolean;
    isSupplyCollateralPaused: boolean;
    isBorrowPaused: boolean;
    isWithdrawPaused: boolean;
    isWithdrawCollateralPaused: boolean;
    isRepayPaused: boolean;
    isLiquidateCollateralPaused: boolean;
    isLiquidateBorrowPaused: boolean;
    isDeprecated: boolean;
  };

  export type PauseStatusesStructOutput = [
    isP2PDisabled: boolean,
    isSupplyPaused: boolean,
    isSupplyCollateralPaused: boolean,
    isBorrowPaused: boolean,
    isWithdrawPaused: boolean,
    isWithdrawCollateralPaused: boolean,
    isRepayPaused: boolean,
    isLiquidateCollateralPaused: boolean,
    isLiquidateBorrowPaused: boolean,
    isDeprecated: boolean
  ] & {
    isP2PDisabled: boolean;
    isSupplyPaused: boolean;
    isSupplyCollateralPaused: boolean;
    isBorrowPaused: boolean;
    isWithdrawPaused: boolean;
    isWithdrawCollateralPaused: boolean;
    isRepayPaused: boolean;
    isLiquidateCollateralPaused: boolean;
    isLiquidateBorrowPaused: boolean;
    isDeprecated: boolean;
  };

  export type MarketStruct = {
    indexes: Types.IndexesStruct;
    deltas: Types.DeltasStruct;
    underlying: AddressLike;
    pauseStatuses: Types.PauseStatusesStruct;
    isCollateral: boolean;
    variableDebtToken: AddressLike;
    lastUpdateTimestamp: BigNumberish;
    reserveFactor: BigNumberish;
    p2pIndexCursor: BigNumberish;
    aToken: AddressLike;
    stableDebtToken: AddressLike;
    idleSupply: BigNumberish;
  };

  export type MarketStructOutput = [
    indexes: Types.IndexesStructOutput,
    deltas: Types.DeltasStructOutput,
    underlying: string,
    pauseStatuses: Types.PauseStatusesStructOutput,
    isCollateral: boolean,
    variableDebtToken: string,
    lastUpdateTimestamp: bigint,
    reserveFactor: bigint,
    p2pIndexCursor: bigint,
    aToken: string,
    stableDebtToken: string,
    idleSupply: bigint
  ] & {
    indexes: Types.IndexesStructOutput;
    deltas: Types.DeltasStructOutput;
    underlying: string;
    pauseStatuses: Types.PauseStatusesStructOutput;
    isCollateral: boolean;
    variableDebtToken: string;
    lastUpdateTimestamp: bigint;
    reserveFactor: bigint;
    p2pIndexCursor: bigint;
    aToken: string;
    stableDebtToken: string;
    idleSupply: bigint;
  };

  export type MarketSideIndexes256Struct = {
    poolIndex: BigNumberish;
    p2pIndex: BigNumberish;
  };

  export type MarketSideIndexes256StructOutput = [
    poolIndex: bigint,
    p2pIndex: bigint
  ] & { poolIndex: bigint; p2pIndex: bigint };

  export type Indexes256Struct = {
    supply: Types.MarketSideIndexes256Struct;
    borrow: Types.MarketSideIndexes256Struct;
  };

  export type Indexes256StructOutput = [
    supply: Types.MarketSideIndexes256StructOutput,
    borrow: Types.MarketSideIndexes256StructOutput
  ] & {
    supply: Types.MarketSideIndexes256StructOutput;
    borrow: Types.MarketSideIndexes256StructOutput;
  };
}

export interface MorphoAaveV3Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "acceptOwnership"
      | "addressesProvider"
      | "approveManager"
      | "approveManagerWithSig"
      | "borrow"
      | "borrowBalance"
      | "claimRewards"
      | "claimToTreasury"
      | "collateralBalance"
      | "createMarket"
      | "defaultIterations"
      | "eModeCategoryId"
      | "getBucketsMask"
      | "getNext"
      | "increaseP2PDeltas"
      | "initialize"
      | "isClaimRewardsPaused"
      | "isManagedBy"
      | "liquidate"
      | "liquidityData"
      | "market"
      | "marketsCreated"
      | "owner"
      | "pendingOwner"
      | "pool"
      | "positionsManager"
      | "renounceOwnership"
      | "repay"
      | "repayWithPermit"
      | "rewardsManager"
      | "scaledCollateralBalance"
      | "scaledP2PBorrowBalance"
      | "scaledP2PSupplyBalance"
      | "scaledPoolBorrowBalance"
      | "scaledPoolSupplyBalance"
      | "setAssetIsCollateral"
      | "setAssetIsCollateralOnPool"
      | "setDefaultIterations"
      | "setIsBorrowPaused"
      | "setIsClaimRewardsPaused"
      | "setIsDeprecated"
      | "setIsLiquidateBorrowPaused"
      | "setIsLiquidateCollateralPaused"
      | "setIsP2PDisabled"
      | "setIsPaused"
      | "setIsPausedForAllMarkets"
      | "setIsRepayPaused"
      | "setIsSupplyCollateralPaused"
      | "setIsSupplyPaused"
      | "setIsWithdrawCollateralPaused"
      | "setIsWithdrawPaused"
      | "setP2PIndexCursor"
      | "setPositionsManager"
      | "setReserveFactor"
      | "setRewardsManager"
      | "setTreasuryVault"
      | "supply"
      | "supplyBalance"
      | "supplyCollateral"
      | "supplyCollateralWithPermit"
      | "supplyWithPermit"
      | "transferOwnership"
      | "treasuryVault"
      | "updatedIndexes"
      | "userBorrows"
      | "userCollaterals"
      | "userNonce"
      | "withdraw"
      | "withdrawCollateral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "BorrowPositionUpdated"
      | "Borrowed"
      | "CollateralSupplied"
      | "CollateralWithdrawn"
      | "DefaultIterationsSet"
      | "IdleSupplyUpdated"
      | "IndexesUpdated"
      | "IsBorrowPausedSet"
      | "IsClaimRewardsPausedSet"
      | "IsCollateralSet"
      | "IsDeprecatedSet"
      | "IsLiquidateBorrowPausedSet"
      | "IsLiquidateCollateralPausedSet"
      | "IsP2PDisabledSet"
      | "IsRepayPausedSet"
      | "IsSupplyCollateralPausedSet"
      | "IsSupplyPausedSet"
      | "IsWithdrawCollateralPausedSet"
      | "IsWithdrawPausedSet"
      | "Liquidated"
      | "ManagerApproval"
      | "MarketCreated"
      | "P2PBorrowDeltaUpdated"
      | "P2PDeltasIncreased"
      | "P2PIndexCursorSet"
      | "P2PSupplyDeltaUpdated"
      | "P2PTotalsUpdated"
      | "PositionsManagerSet"
      | "Repaid"
      | "ReserveFactorSet"
      | "ReserveFeeClaimed"
      | "RewardsClaimed"
      | "RewardsManagerSet"
      | "Supplied"
      | "SupplyPositionUpdated"
      | "TreasuryVaultSet"
      | "UserNonceIncremented"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveManager",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "approveManagerWithSig",
    values: [
      AddressLike,
      AddressLike,
      boolean,
      BigNumberish,
      BigNumberish,
      Types.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToTreasury",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultIterations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eModeCategoryId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBucketsMask",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNext",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseP2PDeltas",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, BigNumberish, AddressLike, Types.IterationsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimRewardsPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isManagedBy",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "market", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "marketsCreated",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      Types.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scaledCollateralBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledP2PBorrowBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledP2PSupplyBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledPoolBorrowBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledPoolSupplyBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetIsCollateral",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetIsCollateralOnPool",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultIterations",
    values: [Types.IterationsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsBorrowPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsClaimRewardsPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsDeprecated",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLiquidateBorrowPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsLiquidateCollateralPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsP2PDisabled",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsPausedForAllMarkets",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsRepayPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSupplyCollateralPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsSupplyPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWithdrawCollateralPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsWithdrawPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setP2PIndexCursor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPositionsManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardsManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCollateral",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCollateralWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      Types.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyWithPermit",
    values: [
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      Types.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatedIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrows",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollaterals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveManagerWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimToTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultIterations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eModeCategoryId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBucketsMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNext", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseP2PDeltas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimRewardsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isManagedBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketsCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledP2PBorrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledP2PSupplyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledPoolBorrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledPoolSupplyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetIsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetIsCollateralOnPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultIterations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsClaimRewardsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLiquidateBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsLiquidateCollateralPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsP2PDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsPausedForAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsRepayPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSupplyCollateralPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsSupplyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWithdrawCollateralPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsWithdrawPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setP2PIndexCursor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPositionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyCollateralWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatedIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowPositionUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    underlying: AddressLike,
    scaledOnPool: BigNumberish,
    scaledInP2P: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    underlying: string,
    scaledOnPool: bigint,
    scaledInP2P: bigint
  ];
  export interface OutputObject {
    user: string;
    underlying: string;
    scaledOnPool: bigint;
    scaledInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowedEvent {
  export type InputTuple = [
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    underlying: AddressLike,
    amount: BigNumberish,
    scaledOnPool: BigNumberish,
    scaledInP2P: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    onBehalf: string,
    receiver: string,
    underlying: string,
    amount: bigint,
    scaledOnPool: bigint,
    scaledInP2P: bigint
  ];
  export interface OutputObject {
    caller: string;
    onBehalf: string;
    receiver: string;
    underlying: string;
    amount: bigint;
    scaledOnPool: bigint;
    scaledInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralSuppliedEvent {
  export type InputTuple = [
    from: AddressLike,
    onBehalf: AddressLike,
    underlying: AddressLike,
    amount: BigNumberish,
    scaledBalance: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    onBehalf: string,
    underlying: string,
    amount: bigint,
    scaledBalance: bigint
  ];
  export interface OutputObject {
    from: string;
    onBehalf: string;
    underlying: string;
    amount: bigint;
    scaledBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollateralWithdrawnEvent {
  export type InputTuple = [
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    underlying: AddressLike,
    amount: BigNumberish,
    scaledBalance: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    onBehalf: string,
    receiver: string,
    underlying: string,
    amount: bigint,
    scaledBalance: bigint
  ];
  export interface OutputObject {
    caller: string;
    onBehalf: string;
    receiver: string;
    underlying: string;
    amount: bigint;
    scaledBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultIterationsSetEvent {
  export type InputTuple = [repay: BigNumberish, withdraw: BigNumberish];
  export type OutputTuple = [repay: bigint, withdraw: bigint];
  export interface OutputObject {
    repay: bigint;
    withdraw: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdleSupplyUpdatedEvent {
  export type InputTuple = [underlying: AddressLike, idleSupply: BigNumberish];
  export type OutputTuple = [underlying: string, idleSupply: bigint];
  export interface OutputObject {
    underlying: string;
    idleSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IndexesUpdatedEvent {
  export type InputTuple = [
    underlying: AddressLike,
    poolSupplyIndex: BigNumberish,
    p2pSupplyIndex: BigNumberish,
    poolBorrowIndex: BigNumberish,
    p2pBorrowIndex: BigNumberish
  ];
  export type OutputTuple = [
    underlying: string,
    poolSupplyIndex: bigint,
    p2pSupplyIndex: bigint,
    poolBorrowIndex: bigint,
    p2pBorrowIndex: bigint
  ];
  export interface OutputObject {
    underlying: string;
    poolSupplyIndex: bigint;
    p2pSupplyIndex: bigint;
    poolBorrowIndex: bigint;
    p2pBorrowIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsBorrowPausedSetEvent {
  export type InputTuple = [underlying: AddressLike, isPaused: boolean];
  export type OutputTuple = [underlying: string, isPaused: boolean];
  export interface OutputObject {
    underlying: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsClaimRewardsPausedSetEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsCollateralSetEvent {
  export type InputTuple = [underlying: AddressLike, isCollateral: boolean];
  export type OutputTuple = [underlying: string, isCollateral: boolean];
  export interface OutputObject {
    underlying: string;
    isCollateral: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsDeprecatedSetEvent {
  export type InputTuple = [underlying: AddressLike, isDeprecated: boolean];
  export type OutputTuple = [underlying: string, isDeprecated: boolean];
  export interface OutputObject {
    underlying: string;
    isDeprecated: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsLiquidateBorrowPausedSetEvent {
  export type InputTuple = [underlying: AddressLike, isPaused: boolean];
  export type OutputTuple = [underlying: string, isPaused: boolean];
  export interface OutputObject {
    underlying: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsLiquidateCollateralPausedSetEvent {
  export type InputTuple = [underlying: AddressLike, isPaused: boolean];
  export type OutputTuple = [underlying: string, isPaused: boolean];
  export interface OutputObject {
    underlying: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsP2PDisabledSetEvent {
  export type InputTuple = [underlying: AddressLike, isP2PDisabled: boolean];
  export type OutputTuple = [underlying: string, isP2PDisabled: boolean];
  export interface OutputObject {
    underlying: string;
    isP2PDisabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsRepayPausedSetEvent {
  export type InputTuple = [underlying: AddressLike, isPaused: boolean];
  export type OutputTuple = [underlying: string, isPaused: boolean];
  export interface OutputObject {
    underlying: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsSupplyCollateralPausedSetEvent {
  export type InputTuple = [underlying: AddressLike, isPaused: boolean];
  export type OutputTuple = [underlying: string, isPaused: boolean];
  export interface OutputObject {
    underlying: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsSupplyPausedSetEvent {
  export type InputTuple = [underlying: AddressLike, isPaused: boolean];
  export type OutputTuple = [underlying: string, isPaused: boolean];
  export interface OutputObject {
    underlying: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsWithdrawCollateralPausedSetEvent {
  export type InputTuple = [underlying: AddressLike, isPaused: boolean];
  export type OutputTuple = [underlying: string, isPaused: boolean];
  export interface OutputObject {
    underlying: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IsWithdrawPausedSetEvent {
  export type InputTuple = [underlying: AddressLike, isPaused: boolean];
  export type OutputTuple = [underlying: string, isPaused: boolean];
  export interface OutputObject {
    underlying: string;
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatedEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    underlyingBorrowed: AddressLike,
    amountLiquidated: BigNumberish,
    underlyingCollateral: AddressLike,
    amountSeized: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    underlyingBorrowed: string,
    amountLiquidated: bigint,
    underlyingCollateral: string,
    amountSeized: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    underlyingBorrowed: string;
    amountLiquidated: bigint;
    underlyingCollateral: string;
    amountSeized: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerApprovalEvent {
  export type InputTuple = [
    delegator: AddressLike,
    manager: AddressLike,
    isAllowed: boolean
  ];
  export type OutputTuple = [
    delegator: string,
    manager: string,
    isAllowed: boolean
  ];
  export interface OutputObject {
    delegator: string;
    manager: string;
    isAllowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [underlying: AddressLike];
  export type OutputTuple = [underlying: string];
  export interface OutputObject {
    underlying: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PBorrowDeltaUpdatedEvent {
  export type InputTuple = [underlying: AddressLike, scaledDelta: BigNumberish];
  export type OutputTuple = [underlying: string, scaledDelta: bigint];
  export interface OutputObject {
    underlying: string;
    scaledDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PDeltasIncreasedEvent {
  export type InputTuple = [underlying: AddressLike, amount: BigNumberish];
  export type OutputTuple = [underlying: string, amount: bigint];
  export interface OutputObject {
    underlying: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PIndexCursorSetEvent {
  export type InputTuple = [
    underlying: AddressLike,
    p2pIndexCursor: BigNumberish
  ];
  export type OutputTuple = [underlying: string, p2pIndexCursor: bigint];
  export interface OutputObject {
    underlying: string;
    p2pIndexCursor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PSupplyDeltaUpdatedEvent {
  export type InputTuple = [underlying: AddressLike, scaledDelta: BigNumberish];
  export type OutputTuple = [underlying: string, scaledDelta: bigint];
  export interface OutputObject {
    underlying: string;
    scaledDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace P2PTotalsUpdatedEvent {
  export type InputTuple = [
    underlying: AddressLike,
    scaledTotalSupplyP2P: BigNumberish,
    scaledTotalBorrowP2P: BigNumberish
  ];
  export type OutputTuple = [
    underlying: string,
    scaledTotalSupplyP2P: bigint,
    scaledTotalBorrowP2P: bigint
  ];
  export interface OutputObject {
    underlying: string;
    scaledTotalSupplyP2P: bigint;
    scaledTotalBorrowP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionsManagerSetEvent {
  export type InputTuple = [positionsManager: AddressLike];
  export type OutputTuple = [positionsManager: string];
  export interface OutputObject {
    positionsManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepaidEvent {
  export type InputTuple = [
    repayer: AddressLike,
    onBehalf: AddressLike,
    underlying: AddressLike,
    amount: BigNumberish,
    scaledOnPool: BigNumberish,
    scaledInP2P: BigNumberish
  ];
  export type OutputTuple = [
    repayer: string,
    onBehalf: string,
    underlying: string,
    amount: bigint,
    scaledOnPool: bigint,
    scaledInP2P: bigint
  ];
  export interface OutputObject {
    repayer: string;
    onBehalf: string;
    underlying: string;
    amount: bigint;
    scaledOnPool: bigint;
    scaledInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFactorSetEvent {
  export type InputTuple = [
    underlying: AddressLike,
    reserveFactor: BigNumberish
  ];
  export type OutputTuple = [underlying: string, reserveFactor: bigint];
  export interface OutputObject {
    underlying: string;
    reserveFactor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveFeeClaimedEvent {
  export type InputTuple = [underlying: AddressLike, claimed: BigNumberish];
  export type OutputTuple = [underlying: string, claimed: bigint];
  export interface OutputObject {
    underlying: string;
    claimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [
    claimer: AddressLike,
    onBehalf: AddressLike,
    rewardToken: AddressLike,
    amountClaimed: BigNumberish
  ];
  export type OutputTuple = [
    claimer: string,
    onBehalf: string,
    rewardToken: string,
    amountClaimed: bigint
  ];
  export interface OutputObject {
    claimer: string;
    onBehalf: string;
    rewardToken: string;
    amountClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsManagerSetEvent {
  export type InputTuple = [rewardsManager: AddressLike];
  export type OutputTuple = [rewardsManager: string];
  export interface OutputObject {
    rewardsManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SuppliedEvent {
  export type InputTuple = [
    from: AddressLike,
    onBehalf: AddressLike,
    underlying: AddressLike,
    amount: BigNumberish,
    scaledOnPool: BigNumberish,
    scaledInP2P: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    onBehalf: string,
    underlying: string,
    amount: bigint,
    scaledOnPool: bigint,
    scaledInP2P: bigint
  ];
  export interface OutputObject {
    from: string;
    onBehalf: string;
    underlying: string;
    amount: bigint;
    scaledOnPool: bigint;
    scaledInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplyPositionUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    underlying: AddressLike,
    scaledOnPool: BigNumberish,
    scaledInP2P: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    underlying: string,
    scaledOnPool: bigint,
    scaledInP2P: bigint
  ];
  export interface OutputObject {
    user: string;
    underlying: string;
    scaledOnPool: bigint;
    scaledInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryVaultSetEvent {
  export type InputTuple = [treasuryVault: AddressLike];
  export type OutputTuple = [treasuryVault: string];
  export interface OutputObject {
    treasuryVault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserNonceIncrementedEvent {
  export type InputTuple = [
    caller: AddressLike,
    signatory: AddressLike,
    usedNonce: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    signatory: string,
    usedNonce: bigint
  ];
  export interface OutputObject {
    caller: string;
    signatory: string;
    usedNonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    caller: AddressLike,
    onBehalf: AddressLike,
    receiver: AddressLike,
    underlying: AddressLike,
    amount: BigNumberish,
    scaledOnPool: BigNumberish,
    scaledInP2P: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    onBehalf: string,
    receiver: string,
    underlying: string,
    amount: bigint,
    scaledOnPool: bigint,
    scaledInP2P: bigint
  ];
  export interface OutputObject {
    caller: string;
    onBehalf: string;
    receiver: string;
    underlying: string;
    amount: bigint;
    scaledOnPool: bigint;
    scaledInP2P: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MorphoAaveV3 extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoAaveV3;
  waitForDeployment(): Promise<this>;

  interface: MorphoAaveV3Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addressesProvider: TypedContractMethod<[], [string], "view">;

  approveManager: TypedContractMethod<
    [manager: AddressLike, isAllowed: boolean],
    [void],
    "nonpayable"
  >;

  approveManagerWithSig: TypedContractMethod<
    [
      delegator: AddressLike,
      manager: AddressLike,
      isAllowed: boolean,
      nonce: BigNumberish,
      deadline: BigNumberish,
      signature: Types.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  borrow: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  borrowBalance: TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  claimRewards: TypedContractMethod<
    [assets: AddressLike[], onBehalf: AddressLike],
    [
      [string[], bigint[]] & {
        rewardTokens: string[];
        claimedAmounts: bigint[];
      }
    ],
    "nonpayable"
  >;

  claimToTreasury: TypedContractMethod<
    [underlyings: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  collateralBalance: TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  createMarket: TypedContractMethod<
    [
      underlying: AddressLike,
      reserveFactor: BigNumberish,
      p2pIndexCursor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  defaultIterations: TypedContractMethod<
    [],
    [Types.IterationsStructOutput],
    "view"
  >;

  eModeCategoryId: TypedContractMethod<[], [bigint], "view">;

  getBucketsMask: TypedContractMethod<
    [underlying: AddressLike, position: BigNumberish],
    [bigint],
    "view"
  >;

  getNext: TypedContractMethod<
    [underlying: AddressLike, position: BigNumberish, user: AddressLike],
    [string],
    "view"
  >;

  increaseP2PDeltas: TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [
      addressesProvider: AddressLike,
      eModeCategoryId: BigNumberish,
      positionsManager: AddressLike,
      defaultIterations: Types.IterationsStruct
    ],
    [void],
    "nonpayable"
  >;

  isClaimRewardsPaused: TypedContractMethod<[], [boolean], "view">;

  isManagedBy: TypedContractMethod<
    [delegator: AddressLike, manager: AddressLike],
    [boolean],
    "view"
  >;

  liquidate: TypedContractMethod<
    [
      underlyingBorrowed: AddressLike,
      underlyingCollateral: AddressLike,
      user: AddressLike,
      amount: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  liquidityData: TypedContractMethod<
    [user: AddressLike],
    [Types.LiquidityDataStructOutput],
    "view"
  >;

  market: TypedContractMethod<
    [underlying: AddressLike],
    [Types.MarketStructOutput],
    "view"
  >;

  marketsCreated: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  positionsManager: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  repay: TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish, onBehalf: AddressLike],
    [bigint],
    "nonpayable"
  >;

  repayWithPermit: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      deadline: BigNumberish,
      signature: Types.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  rewardsManager: TypedContractMethod<[], [string], "view">;

  scaledCollateralBalance: TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  scaledP2PBorrowBalance: TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  scaledP2PSupplyBalance: TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  scaledPoolBorrowBalance: TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  scaledPoolSupplyBalance: TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  setAssetIsCollateral: TypedContractMethod<
    [underlying: AddressLike, isCollateral: boolean],
    [void],
    "nonpayable"
  >;

  setAssetIsCollateralOnPool: TypedContractMethod<
    [underlying: AddressLike, isCollateral: boolean],
    [void],
    "nonpayable"
  >;

  setDefaultIterations: TypedContractMethod<
    [defaultIterations: Types.IterationsStruct],
    [void],
    "nonpayable"
  >;

  setIsBorrowPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsClaimRewardsPaused: TypedContractMethod<
    [isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsDeprecated: TypedContractMethod<
    [underlying: AddressLike, isDeprecated: boolean],
    [void],
    "nonpayable"
  >;

  setIsLiquidateBorrowPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsLiquidateCollateralPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsP2PDisabled: TypedContractMethod<
    [underlying: AddressLike, isP2PDisabled: boolean],
    [void],
    "nonpayable"
  >;

  setIsPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsPausedForAllMarkets: TypedContractMethod<
    [isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsRepayPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsSupplyCollateralPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsSupplyPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsWithdrawCollateralPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setIsWithdrawPaused: TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;

  setP2PIndexCursor: TypedContractMethod<
    [underlying: AddressLike, p2pIndexCursor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPositionsManager: TypedContractMethod<
    [positionsManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setReserveFactor: TypedContractMethod<
    [underlying: AddressLike, newReserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRewardsManager: TypedContractMethod<
    [rewardsManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryVault: TypedContractMethod<
    [treasuryVault: AddressLike],
    [void],
    "nonpayable"
  >;

  supply: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  supplyBalance: TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;

  supplyCollateral: TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish, onBehalf: AddressLike],
    [bigint],
    "nonpayable"
  >;

  supplyCollateralWithPermit: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      deadline: BigNumberish,
      signature: Types.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  supplyWithPermit: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      maxIterations: BigNumberish,
      deadline: BigNumberish,
      signature: Types.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasuryVault: TypedContractMethod<[], [string], "view">;

  updatedIndexes: TypedContractMethod<
    [underlying: AddressLike],
    [Types.Indexes256StructOutput],
    "view"
  >;

  userBorrows: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  userCollaterals: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  userNonce: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  withdraw: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressesProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveManager"
  ): TypedContractMethod<
    [manager: AddressLike, isAllowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approveManagerWithSig"
  ): TypedContractMethod<
    [
      delegator: AddressLike,
      manager: AddressLike,
      isAllowed: boolean,
      nonce: BigNumberish,
      deadline: BigNumberish,
      signature: Types.SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrow"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowBalance"
  ): TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [assets: AddressLike[], onBehalf: AddressLike],
    [
      [string[], bigint[]] & {
        rewardTokens: string[];
        claimedAmounts: bigint[];
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimToTreasury"
  ): TypedContractMethod<
    [underlyings: AddressLike[], amounts: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collateralBalance"
  ): TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      reserveFactor: BigNumberish,
      p2pIndexCursor: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "defaultIterations"
  ): TypedContractMethod<[], [Types.IterationsStructOutput], "view">;
  getFunction(
    nameOrSignature: "eModeCategoryId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBucketsMask"
  ): TypedContractMethod<
    [underlying: AddressLike, position: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNext"
  ): TypedContractMethod<
    [underlying: AddressLike, position: BigNumberish, user: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "increaseP2PDeltas"
  ): TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      addressesProvider: AddressLike,
      eModeCategoryId: BigNumberish,
      positionsManager: AddressLike,
      defaultIterations: Types.IterationsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isClaimRewardsPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isManagedBy"
  ): TypedContractMethod<
    [delegator: AddressLike, manager: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      underlyingBorrowed: AddressLike,
      underlyingCollateral: AddressLike,
      user: AddressLike,
      amount: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidityData"
  ): TypedContractMethod<
    [user: AddressLike],
    [Types.LiquidityDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "market"
  ): TypedContractMethod<
    [underlying: AddressLike],
    [Types.MarketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "marketsCreated"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "positionsManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "repay"
  ): TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish, onBehalf: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayWithPermit"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      deadline: BigNumberish,
      signature: Types.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardsManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "scaledCollateralBalance"
  ): TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "scaledP2PBorrowBalance"
  ): TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "scaledP2PSupplyBalance"
  ): TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "scaledPoolBorrowBalance"
  ): TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "scaledPoolSupplyBalance"
  ): TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAssetIsCollateral"
  ): TypedContractMethod<
    [underlying: AddressLike, isCollateral: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAssetIsCollateralOnPool"
  ): TypedContractMethod<
    [underlying: AddressLike, isCollateral: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultIterations"
  ): TypedContractMethod<
    [defaultIterations: Types.IterationsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsBorrowPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsClaimRewardsPaused"
  ): TypedContractMethod<[isPaused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsDeprecated"
  ): TypedContractMethod<
    [underlying: AddressLike, isDeprecated: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsLiquidateBorrowPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsLiquidateCollateralPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsP2PDisabled"
  ): TypedContractMethod<
    [underlying: AddressLike, isP2PDisabled: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsPausedForAllMarkets"
  ): TypedContractMethod<[isPaused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsRepayPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsSupplyCollateralPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsSupplyPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsWithdrawCollateralPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIsWithdrawPaused"
  ): TypedContractMethod<
    [underlying: AddressLike, isPaused: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setP2PIndexCursor"
  ): TypedContractMethod<
    [underlying: AddressLike, p2pIndexCursor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPositionsManager"
  ): TypedContractMethod<[positionsManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReserveFactor"
  ): TypedContractMethod<
    [underlying: AddressLike, newReserveFactor: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRewardsManager"
  ): TypedContractMethod<[rewardsManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryVault"
  ): TypedContractMethod<[treasuryVault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supply"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyBalance"
  ): TypedContractMethod<
    [underlying: AddressLike, user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "supplyCollateral"
  ): TypedContractMethod<
    [underlying: AddressLike, amount: BigNumberish, onBehalf: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyCollateralWithPermit"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      deadline: BigNumberish,
      signature: Types.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyWithPermit"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      maxIterations: BigNumberish,
      deadline: BigNumberish,
      signature: Types.SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasuryVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updatedIndexes"
  ): TypedContractMethod<
    [underlying: AddressLike],
    [Types.Indexes256StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "userBorrows"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "userCollaterals"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "userNonce"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike,
      maxIterations: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [
      underlying: AddressLike,
      amount: BigNumberish,
      onBehalf: AddressLike,
      receiver: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "BorrowPositionUpdated"
  ): TypedContractEvent<
    BorrowPositionUpdatedEvent.InputTuple,
    BorrowPositionUpdatedEvent.OutputTuple,
    BorrowPositionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Borrowed"
  ): TypedContractEvent<
    BorrowedEvent.InputTuple,
    BorrowedEvent.OutputTuple,
    BorrowedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralSupplied"
  ): TypedContractEvent<
    CollateralSuppliedEvent.InputTuple,
    CollateralSuppliedEvent.OutputTuple,
    CollateralSuppliedEvent.OutputObject
  >;
  getEvent(
    key: "CollateralWithdrawn"
  ): TypedContractEvent<
    CollateralWithdrawnEvent.InputTuple,
    CollateralWithdrawnEvent.OutputTuple,
    CollateralWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "DefaultIterationsSet"
  ): TypedContractEvent<
    DefaultIterationsSetEvent.InputTuple,
    DefaultIterationsSetEvent.OutputTuple,
    DefaultIterationsSetEvent.OutputObject
  >;
  getEvent(
    key: "IdleSupplyUpdated"
  ): TypedContractEvent<
    IdleSupplyUpdatedEvent.InputTuple,
    IdleSupplyUpdatedEvent.OutputTuple,
    IdleSupplyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "IndexesUpdated"
  ): TypedContractEvent<
    IndexesUpdatedEvent.InputTuple,
    IndexesUpdatedEvent.OutputTuple,
    IndexesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "IsBorrowPausedSet"
  ): TypedContractEvent<
    IsBorrowPausedSetEvent.InputTuple,
    IsBorrowPausedSetEvent.OutputTuple,
    IsBorrowPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsClaimRewardsPausedSet"
  ): TypedContractEvent<
    IsClaimRewardsPausedSetEvent.InputTuple,
    IsClaimRewardsPausedSetEvent.OutputTuple,
    IsClaimRewardsPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsCollateralSet"
  ): TypedContractEvent<
    IsCollateralSetEvent.InputTuple,
    IsCollateralSetEvent.OutputTuple,
    IsCollateralSetEvent.OutputObject
  >;
  getEvent(
    key: "IsDeprecatedSet"
  ): TypedContractEvent<
    IsDeprecatedSetEvent.InputTuple,
    IsDeprecatedSetEvent.OutputTuple,
    IsDeprecatedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsLiquidateBorrowPausedSet"
  ): TypedContractEvent<
    IsLiquidateBorrowPausedSetEvent.InputTuple,
    IsLiquidateBorrowPausedSetEvent.OutputTuple,
    IsLiquidateBorrowPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsLiquidateCollateralPausedSet"
  ): TypedContractEvent<
    IsLiquidateCollateralPausedSetEvent.InputTuple,
    IsLiquidateCollateralPausedSetEvent.OutputTuple,
    IsLiquidateCollateralPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsP2PDisabledSet"
  ): TypedContractEvent<
    IsP2PDisabledSetEvent.InputTuple,
    IsP2PDisabledSetEvent.OutputTuple,
    IsP2PDisabledSetEvent.OutputObject
  >;
  getEvent(
    key: "IsRepayPausedSet"
  ): TypedContractEvent<
    IsRepayPausedSetEvent.InputTuple,
    IsRepayPausedSetEvent.OutputTuple,
    IsRepayPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsSupplyCollateralPausedSet"
  ): TypedContractEvent<
    IsSupplyCollateralPausedSetEvent.InputTuple,
    IsSupplyCollateralPausedSetEvent.OutputTuple,
    IsSupplyCollateralPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsSupplyPausedSet"
  ): TypedContractEvent<
    IsSupplyPausedSetEvent.InputTuple,
    IsSupplyPausedSetEvent.OutputTuple,
    IsSupplyPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsWithdrawCollateralPausedSet"
  ): TypedContractEvent<
    IsWithdrawCollateralPausedSetEvent.InputTuple,
    IsWithdrawCollateralPausedSetEvent.OutputTuple,
    IsWithdrawCollateralPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "IsWithdrawPausedSet"
  ): TypedContractEvent<
    IsWithdrawPausedSetEvent.InputTuple,
    IsWithdrawPausedSetEvent.OutputTuple,
    IsWithdrawPausedSetEvent.OutputObject
  >;
  getEvent(
    key: "Liquidated"
  ): TypedContractEvent<
    LiquidatedEvent.InputTuple,
    LiquidatedEvent.OutputTuple,
    LiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerApproval"
  ): TypedContractEvent<
    ManagerApprovalEvent.InputTuple,
    ManagerApprovalEvent.OutputTuple,
    ManagerApprovalEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PBorrowDeltaUpdated"
  ): TypedContractEvent<
    P2PBorrowDeltaUpdatedEvent.InputTuple,
    P2PBorrowDeltaUpdatedEvent.OutputTuple,
    P2PBorrowDeltaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PDeltasIncreased"
  ): TypedContractEvent<
    P2PDeltasIncreasedEvent.InputTuple,
    P2PDeltasIncreasedEvent.OutputTuple,
    P2PDeltasIncreasedEvent.OutputObject
  >;
  getEvent(
    key: "P2PIndexCursorSet"
  ): TypedContractEvent<
    P2PIndexCursorSetEvent.InputTuple,
    P2PIndexCursorSetEvent.OutputTuple,
    P2PIndexCursorSetEvent.OutputObject
  >;
  getEvent(
    key: "P2PSupplyDeltaUpdated"
  ): TypedContractEvent<
    P2PSupplyDeltaUpdatedEvent.InputTuple,
    P2PSupplyDeltaUpdatedEvent.OutputTuple,
    P2PSupplyDeltaUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "P2PTotalsUpdated"
  ): TypedContractEvent<
    P2PTotalsUpdatedEvent.InputTuple,
    P2PTotalsUpdatedEvent.OutputTuple,
    P2PTotalsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PositionsManagerSet"
  ): TypedContractEvent<
    PositionsManagerSetEvent.InputTuple,
    PositionsManagerSetEvent.OutputTuple,
    PositionsManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "Repaid"
  ): TypedContractEvent<
    RepaidEvent.InputTuple,
    RepaidEvent.OutputTuple,
    RepaidEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFactorSet"
  ): TypedContractEvent<
    ReserveFactorSetEvent.InputTuple,
    ReserveFactorSetEvent.OutputTuple,
    ReserveFactorSetEvent.OutputObject
  >;
  getEvent(
    key: "ReserveFeeClaimed"
  ): TypedContractEvent<
    ReserveFeeClaimedEvent.InputTuple,
    ReserveFeeClaimedEvent.OutputTuple,
    ReserveFeeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsManagerSet"
  ): TypedContractEvent<
    RewardsManagerSetEvent.InputTuple,
    RewardsManagerSetEvent.OutputTuple,
    RewardsManagerSetEvent.OutputObject
  >;
  getEvent(
    key: "Supplied"
  ): TypedContractEvent<
    SuppliedEvent.InputTuple,
    SuppliedEvent.OutputTuple,
    SuppliedEvent.OutputObject
  >;
  getEvent(
    key: "SupplyPositionUpdated"
  ): TypedContractEvent<
    SupplyPositionUpdatedEvent.InputTuple,
    SupplyPositionUpdatedEvent.OutputTuple,
    SupplyPositionUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryVaultSet"
  ): TypedContractEvent<
    TreasuryVaultSetEvent.InputTuple,
    TreasuryVaultSetEvent.OutputTuple,
    TreasuryVaultSetEvent.OutputObject
  >;
  getEvent(
    key: "UserNonceIncremented"
  ): TypedContractEvent<
    UserNonceIncrementedEvent.InputTuple,
    UserNonceIncrementedEvent.OutputTuple,
    UserNonceIncrementedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "BorrowPositionUpdated(address,address,uint256,uint256)": TypedContractEvent<
      BorrowPositionUpdatedEvent.InputTuple,
      BorrowPositionUpdatedEvent.OutputTuple,
      BorrowPositionUpdatedEvent.OutputObject
    >;
    BorrowPositionUpdated: TypedContractEvent<
      BorrowPositionUpdatedEvent.InputTuple,
      BorrowPositionUpdatedEvent.OutputTuple,
      BorrowPositionUpdatedEvent.OutputObject
    >;

    "Borrowed(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;
    Borrowed: TypedContractEvent<
      BorrowedEvent.InputTuple,
      BorrowedEvent.OutputTuple,
      BorrowedEvent.OutputObject
    >;

    "CollateralSupplied(address,address,address,uint256,uint256)": TypedContractEvent<
      CollateralSuppliedEvent.InputTuple,
      CollateralSuppliedEvent.OutputTuple,
      CollateralSuppliedEvent.OutputObject
    >;
    CollateralSupplied: TypedContractEvent<
      CollateralSuppliedEvent.InputTuple,
      CollateralSuppliedEvent.OutputTuple,
      CollateralSuppliedEvent.OutputObject
    >;

    "CollateralWithdrawn(address,address,address,address,uint256,uint256)": TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;
    CollateralWithdrawn: TypedContractEvent<
      CollateralWithdrawnEvent.InputTuple,
      CollateralWithdrawnEvent.OutputTuple,
      CollateralWithdrawnEvent.OutputObject
    >;

    "DefaultIterationsSet(uint128,uint128)": TypedContractEvent<
      DefaultIterationsSetEvent.InputTuple,
      DefaultIterationsSetEvent.OutputTuple,
      DefaultIterationsSetEvent.OutputObject
    >;
    DefaultIterationsSet: TypedContractEvent<
      DefaultIterationsSetEvent.InputTuple,
      DefaultIterationsSetEvent.OutputTuple,
      DefaultIterationsSetEvent.OutputObject
    >;

    "IdleSupplyUpdated(address,uint256)": TypedContractEvent<
      IdleSupplyUpdatedEvent.InputTuple,
      IdleSupplyUpdatedEvent.OutputTuple,
      IdleSupplyUpdatedEvent.OutputObject
    >;
    IdleSupplyUpdated: TypedContractEvent<
      IdleSupplyUpdatedEvent.InputTuple,
      IdleSupplyUpdatedEvent.OutputTuple,
      IdleSupplyUpdatedEvent.OutputObject
    >;

    "IndexesUpdated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      IndexesUpdatedEvent.InputTuple,
      IndexesUpdatedEvent.OutputTuple,
      IndexesUpdatedEvent.OutputObject
    >;
    IndexesUpdated: TypedContractEvent<
      IndexesUpdatedEvent.InputTuple,
      IndexesUpdatedEvent.OutputTuple,
      IndexesUpdatedEvent.OutputObject
    >;

    "IsBorrowPausedSet(address,bool)": TypedContractEvent<
      IsBorrowPausedSetEvent.InputTuple,
      IsBorrowPausedSetEvent.OutputTuple,
      IsBorrowPausedSetEvent.OutputObject
    >;
    IsBorrowPausedSet: TypedContractEvent<
      IsBorrowPausedSetEvent.InputTuple,
      IsBorrowPausedSetEvent.OutputTuple,
      IsBorrowPausedSetEvent.OutputObject
    >;

    "IsClaimRewardsPausedSet(bool)": TypedContractEvent<
      IsClaimRewardsPausedSetEvent.InputTuple,
      IsClaimRewardsPausedSetEvent.OutputTuple,
      IsClaimRewardsPausedSetEvent.OutputObject
    >;
    IsClaimRewardsPausedSet: TypedContractEvent<
      IsClaimRewardsPausedSetEvent.InputTuple,
      IsClaimRewardsPausedSetEvent.OutputTuple,
      IsClaimRewardsPausedSetEvent.OutputObject
    >;

    "IsCollateralSet(address,bool)": TypedContractEvent<
      IsCollateralSetEvent.InputTuple,
      IsCollateralSetEvent.OutputTuple,
      IsCollateralSetEvent.OutputObject
    >;
    IsCollateralSet: TypedContractEvent<
      IsCollateralSetEvent.InputTuple,
      IsCollateralSetEvent.OutputTuple,
      IsCollateralSetEvent.OutputObject
    >;

    "IsDeprecatedSet(address,bool)": TypedContractEvent<
      IsDeprecatedSetEvent.InputTuple,
      IsDeprecatedSetEvent.OutputTuple,
      IsDeprecatedSetEvent.OutputObject
    >;
    IsDeprecatedSet: TypedContractEvent<
      IsDeprecatedSetEvent.InputTuple,
      IsDeprecatedSetEvent.OutputTuple,
      IsDeprecatedSetEvent.OutputObject
    >;

    "IsLiquidateBorrowPausedSet(address,bool)": TypedContractEvent<
      IsLiquidateBorrowPausedSetEvent.InputTuple,
      IsLiquidateBorrowPausedSetEvent.OutputTuple,
      IsLiquidateBorrowPausedSetEvent.OutputObject
    >;
    IsLiquidateBorrowPausedSet: TypedContractEvent<
      IsLiquidateBorrowPausedSetEvent.InputTuple,
      IsLiquidateBorrowPausedSetEvent.OutputTuple,
      IsLiquidateBorrowPausedSetEvent.OutputObject
    >;

    "IsLiquidateCollateralPausedSet(address,bool)": TypedContractEvent<
      IsLiquidateCollateralPausedSetEvent.InputTuple,
      IsLiquidateCollateralPausedSetEvent.OutputTuple,
      IsLiquidateCollateralPausedSetEvent.OutputObject
    >;
    IsLiquidateCollateralPausedSet: TypedContractEvent<
      IsLiquidateCollateralPausedSetEvent.InputTuple,
      IsLiquidateCollateralPausedSetEvent.OutputTuple,
      IsLiquidateCollateralPausedSetEvent.OutputObject
    >;

    "IsP2PDisabledSet(address,bool)": TypedContractEvent<
      IsP2PDisabledSetEvent.InputTuple,
      IsP2PDisabledSetEvent.OutputTuple,
      IsP2PDisabledSetEvent.OutputObject
    >;
    IsP2PDisabledSet: TypedContractEvent<
      IsP2PDisabledSetEvent.InputTuple,
      IsP2PDisabledSetEvent.OutputTuple,
      IsP2PDisabledSetEvent.OutputObject
    >;

    "IsRepayPausedSet(address,bool)": TypedContractEvent<
      IsRepayPausedSetEvent.InputTuple,
      IsRepayPausedSetEvent.OutputTuple,
      IsRepayPausedSetEvent.OutputObject
    >;
    IsRepayPausedSet: TypedContractEvent<
      IsRepayPausedSetEvent.InputTuple,
      IsRepayPausedSetEvent.OutputTuple,
      IsRepayPausedSetEvent.OutputObject
    >;

    "IsSupplyCollateralPausedSet(address,bool)": TypedContractEvent<
      IsSupplyCollateralPausedSetEvent.InputTuple,
      IsSupplyCollateralPausedSetEvent.OutputTuple,
      IsSupplyCollateralPausedSetEvent.OutputObject
    >;
    IsSupplyCollateralPausedSet: TypedContractEvent<
      IsSupplyCollateralPausedSetEvent.InputTuple,
      IsSupplyCollateralPausedSetEvent.OutputTuple,
      IsSupplyCollateralPausedSetEvent.OutputObject
    >;

    "IsSupplyPausedSet(address,bool)": TypedContractEvent<
      IsSupplyPausedSetEvent.InputTuple,
      IsSupplyPausedSetEvent.OutputTuple,
      IsSupplyPausedSetEvent.OutputObject
    >;
    IsSupplyPausedSet: TypedContractEvent<
      IsSupplyPausedSetEvent.InputTuple,
      IsSupplyPausedSetEvent.OutputTuple,
      IsSupplyPausedSetEvent.OutputObject
    >;

    "IsWithdrawCollateralPausedSet(address,bool)": TypedContractEvent<
      IsWithdrawCollateralPausedSetEvent.InputTuple,
      IsWithdrawCollateralPausedSetEvent.OutputTuple,
      IsWithdrawCollateralPausedSetEvent.OutputObject
    >;
    IsWithdrawCollateralPausedSet: TypedContractEvent<
      IsWithdrawCollateralPausedSetEvent.InputTuple,
      IsWithdrawCollateralPausedSetEvent.OutputTuple,
      IsWithdrawCollateralPausedSetEvent.OutputObject
    >;

    "IsWithdrawPausedSet(address,bool)": TypedContractEvent<
      IsWithdrawPausedSetEvent.InputTuple,
      IsWithdrawPausedSetEvent.OutputTuple,
      IsWithdrawPausedSetEvent.OutputObject
    >;
    IsWithdrawPausedSet: TypedContractEvent<
      IsWithdrawPausedSetEvent.InputTuple,
      IsWithdrawPausedSetEvent.OutputTuple,
      IsWithdrawPausedSetEvent.OutputObject
    >;

    "Liquidated(address,address,address,uint256,address,uint256)": TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;
    Liquidated: TypedContractEvent<
      LiquidatedEvent.InputTuple,
      LiquidatedEvent.OutputTuple,
      LiquidatedEvent.OutputObject
    >;

    "ManagerApproval(address,address,bool)": TypedContractEvent<
      ManagerApprovalEvent.InputTuple,
      ManagerApprovalEvent.OutputTuple,
      ManagerApprovalEvent.OutputObject
    >;
    ManagerApproval: TypedContractEvent<
      ManagerApprovalEvent.InputTuple,
      ManagerApprovalEvent.OutputTuple,
      ManagerApprovalEvent.OutputObject
    >;

    "MarketCreated(address)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "P2PBorrowDeltaUpdated(address,uint256)": TypedContractEvent<
      P2PBorrowDeltaUpdatedEvent.InputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputObject
    >;
    P2PBorrowDeltaUpdated: TypedContractEvent<
      P2PBorrowDeltaUpdatedEvent.InputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputTuple,
      P2PBorrowDeltaUpdatedEvent.OutputObject
    >;

    "P2PDeltasIncreased(address,uint256)": TypedContractEvent<
      P2PDeltasIncreasedEvent.InputTuple,
      P2PDeltasIncreasedEvent.OutputTuple,
      P2PDeltasIncreasedEvent.OutputObject
    >;
    P2PDeltasIncreased: TypedContractEvent<
      P2PDeltasIncreasedEvent.InputTuple,
      P2PDeltasIncreasedEvent.OutputTuple,
      P2PDeltasIncreasedEvent.OutputObject
    >;

    "P2PIndexCursorSet(address,uint16)": TypedContractEvent<
      P2PIndexCursorSetEvent.InputTuple,
      P2PIndexCursorSetEvent.OutputTuple,
      P2PIndexCursorSetEvent.OutputObject
    >;
    P2PIndexCursorSet: TypedContractEvent<
      P2PIndexCursorSetEvent.InputTuple,
      P2PIndexCursorSetEvent.OutputTuple,
      P2PIndexCursorSetEvent.OutputObject
    >;

    "P2PSupplyDeltaUpdated(address,uint256)": TypedContractEvent<
      P2PSupplyDeltaUpdatedEvent.InputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputObject
    >;
    P2PSupplyDeltaUpdated: TypedContractEvent<
      P2PSupplyDeltaUpdatedEvent.InputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputTuple,
      P2PSupplyDeltaUpdatedEvent.OutputObject
    >;

    "P2PTotalsUpdated(address,uint256,uint256)": TypedContractEvent<
      P2PTotalsUpdatedEvent.InputTuple,
      P2PTotalsUpdatedEvent.OutputTuple,
      P2PTotalsUpdatedEvent.OutputObject
    >;
    P2PTotalsUpdated: TypedContractEvent<
      P2PTotalsUpdatedEvent.InputTuple,
      P2PTotalsUpdatedEvent.OutputTuple,
      P2PTotalsUpdatedEvent.OutputObject
    >;

    "PositionsManagerSet(address)": TypedContractEvent<
      PositionsManagerSetEvent.InputTuple,
      PositionsManagerSetEvent.OutputTuple,
      PositionsManagerSetEvent.OutputObject
    >;
    PositionsManagerSet: TypedContractEvent<
      PositionsManagerSetEvent.InputTuple,
      PositionsManagerSetEvent.OutputTuple,
      PositionsManagerSetEvent.OutputObject
    >;

    "Repaid(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;
    Repaid: TypedContractEvent<
      RepaidEvent.InputTuple,
      RepaidEvent.OutputTuple,
      RepaidEvent.OutputObject
    >;

    "ReserveFactorSet(address,uint16)": TypedContractEvent<
      ReserveFactorSetEvent.InputTuple,
      ReserveFactorSetEvent.OutputTuple,
      ReserveFactorSetEvent.OutputObject
    >;
    ReserveFactorSet: TypedContractEvent<
      ReserveFactorSetEvent.InputTuple,
      ReserveFactorSetEvent.OutputTuple,
      ReserveFactorSetEvent.OutputObject
    >;

    "ReserveFeeClaimed(address,uint256)": TypedContractEvent<
      ReserveFeeClaimedEvent.InputTuple,
      ReserveFeeClaimedEvent.OutputTuple,
      ReserveFeeClaimedEvent.OutputObject
    >;
    ReserveFeeClaimed: TypedContractEvent<
      ReserveFeeClaimedEvent.InputTuple,
      ReserveFeeClaimedEvent.OutputTuple,
      ReserveFeeClaimedEvent.OutputObject
    >;

    "RewardsClaimed(address,address,address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "RewardsManagerSet(address)": TypedContractEvent<
      RewardsManagerSetEvent.InputTuple,
      RewardsManagerSetEvent.OutputTuple,
      RewardsManagerSetEvent.OutputObject
    >;
    RewardsManagerSet: TypedContractEvent<
      RewardsManagerSetEvent.InputTuple,
      RewardsManagerSetEvent.OutputTuple,
      RewardsManagerSetEvent.OutputObject
    >;

    "Supplied(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      SuppliedEvent.InputTuple,
      SuppliedEvent.OutputTuple,
      SuppliedEvent.OutputObject
    >;
    Supplied: TypedContractEvent<
      SuppliedEvent.InputTuple,
      SuppliedEvent.OutputTuple,
      SuppliedEvent.OutputObject
    >;

    "SupplyPositionUpdated(address,address,uint256,uint256)": TypedContractEvent<
      SupplyPositionUpdatedEvent.InputTuple,
      SupplyPositionUpdatedEvent.OutputTuple,
      SupplyPositionUpdatedEvent.OutputObject
    >;
    SupplyPositionUpdated: TypedContractEvent<
      SupplyPositionUpdatedEvent.InputTuple,
      SupplyPositionUpdatedEvent.OutputTuple,
      SupplyPositionUpdatedEvent.OutputObject
    >;

    "TreasuryVaultSet(address)": TypedContractEvent<
      TreasuryVaultSetEvent.InputTuple,
      TreasuryVaultSetEvent.OutputTuple,
      TreasuryVaultSetEvent.OutputObject
    >;
    TreasuryVaultSet: TypedContractEvent<
      TreasuryVaultSetEvent.InputTuple,
      TreasuryVaultSetEvent.OutputTuple,
      TreasuryVaultSetEvent.OutputObject
    >;

    "UserNonceIncremented(address,address,uint256)": TypedContractEvent<
      UserNonceIncrementedEvent.InputTuple,
      UserNonceIncrementedEvent.OutputTuple,
      UserNonceIncrementedEvent.OutputObject
    >;
    UserNonceIncremented: TypedContractEvent<
      UserNonceIncrementedEvent.InputTuple,
      UserNonceIncrementedEvent.OutputTuple,
      UserNonceIncrementedEvent.OutputObject
    >;

    "Withdrawn(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
