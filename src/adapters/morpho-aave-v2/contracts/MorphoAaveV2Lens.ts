/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Types {
  export type LiquidityDataStruct = {
    collateral: BigNumberish;
    maxDebt: BigNumberish;
    liquidationThreshold: BigNumberish;
    debt: BigNumberish;
  };

  export type LiquidityDataStructOutput = [
    collateral: bigint,
    maxDebt: bigint,
    liquidationThreshold: bigint,
    debt: bigint
  ] & {
    collateral: bigint;
    maxDebt: bigint;
    liquidationThreshold: bigint;
    debt: bigint;
  };

  export type AssetLiquidityDataStruct = {
    decimals: BigNumberish;
    tokenUnit: BigNumberish;
    liquidationThreshold: BigNumberish;
    ltv: BigNumberish;
    underlyingPrice: BigNumberish;
    collateral: BigNumberish;
    debt: BigNumberish;
  };

  export type AssetLiquidityDataStructOutput = [
    decimals: bigint,
    tokenUnit: bigint,
    liquidationThreshold: bigint,
    ltv: bigint,
    underlyingPrice: bigint,
    collateral: bigint,
    debt: bigint
  ] & {
    decimals: bigint;
    tokenUnit: bigint;
    liquidationThreshold: bigint;
    ltv: bigint;
    underlyingPrice: bigint;
    collateral: bigint;
    debt: bigint;
  };
}

export interface MorphoAaveV2LensInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_LIQUIDATION_CLOSE_FACTOR"
      | "HEALTH_FACTOR_LIQUIDATION_THRESHOLD"
      | "_getCurrentBorrowBalanceInOf"
      | "_getCurrentSupplyBalanceInOf"
      | "_getIndexes"
      | "_getTotalMarketBorrow"
      | "_getTotalMarketSupply"
      | "addressesProvider"
      | "computeLiquidationRepayAmount"
      | "getAdvancedMarketData"
      | "getAllMarkets"
      | "getAverageBorrowRatePerYear"
      | "getAverageSupplyRatePerYear"
      | "getCurrentBorrowBalanceInOf"
      | "getCurrentP2PBorrowIndex"
      | "getCurrentP2PSupplyIndex"
      | "getCurrentSupplyBalanceInOf"
      | "getCurrentUserBorrowRatePerYear"
      | "getCurrentUserSupplyRatePerYear"
      | "getEnteredMarkets"
      | "getIndexes"
      | "getMainMarketData"
      | "getMarketConfiguration"
      | "getNextUserBorrowRatePerYear"
      | "getNextUserSupplyRatePerYear"
      | "getRatesPerYear"
      | "getTotalBorrow"
      | "getTotalMarketBorrow"
      | "getTotalMarketSupply"
      | "getTotalSupply"
      | "getUserBalanceStates"
      | "getUserHealthFactor"
      | "getUserHypotheticalBalanceStates"
      | "getUserHypotheticalHealthFactor"
      | "getUserLiquidityDataForAsset"
      | "getUserMaxCapacitiesForAsset"
      | "isLiquidatable"
      | "isMarketCreated"
      | "isMarketCreatedAndNotPaused"
      | "isMarketCreatedAndNotPausedNorPartiallyPaused"
      | "morpho"
      | "pool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_LIQUIDATION_CLOSE_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_getCurrentBorrowBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_getCurrentSupplyBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_getIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTotalMarketBorrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTotalMarketSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidationRepayAmount",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdvancedMarketData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageBorrowRatePerYear",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAverageSupplyRatePerYear",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentBorrowBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentP2PBorrowIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentP2PSupplyIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentSupplyBalanceInOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserBorrowRatePerYear",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentUserSupplyRatePerYear",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnteredMarkets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainMarketData",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketConfiguration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUserBorrowRatePerYear",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextUserSupplyRatePerYear",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRatesPerYear",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMarketBorrow",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalMarketSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalanceStates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHealthFactor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHypotheticalBalanceStates",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserHypotheticalHealthFactor",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLiquidityDataForAsset",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMaxCapacitiesForAsset",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreatedAndNotPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMarketCreatedAndNotPausedNorPartiallyPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "morpho", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_LIQUIDATION_CLOSE_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getCurrentBorrowBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getCurrentSupplyBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getTotalMarketBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_getTotalMarketSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidationRepayAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdvancedMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageBorrowRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAverageSupplyRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentBorrowBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentP2PBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentP2PSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSupplyBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserBorrowRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentUserSupplyRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnteredMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMainMarketData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUserBorrowRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextUserSupplyRatePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRatesPerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMarketBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMarketSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHypotheticalBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserHypotheticalHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLiquidityDataForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMaxCapacitiesForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreatedAndNotPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMarketCreatedAndNotPausedNorPartiallyPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "morpho", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
}

export interface MorphoAaveV2Lens extends BaseContract {
  connect(runner?: ContractRunner | null): MorphoAaveV2Lens;
  waitForDeployment(): Promise<this>;

  interface: MorphoAaveV2LensInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_LIQUIDATION_CLOSE_FACTOR: TypedContractMethod<[], [bigint], "view">;

  HEALTH_FACTOR_LIQUIDATION_THRESHOLD: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  _getCurrentBorrowBalanceInOf: TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        underlyingToken: string;
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  _getCurrentSupplyBalanceInOf: TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        underlyingToken: string;
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  _getIndexes: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        underlyingToken: string;
        p2pSupplyIndex: bigint;
        p2pBorrowIndex: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
      }
    ],
    "view"
  >;

  _getTotalMarketBorrow: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [string, bigint, bigint] & {
        underlyingToken: string;
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  _getTotalMarketSupply: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [string, bigint, bigint] & {
        underlyingToken: string;
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
      }
    ],
    "view"
  >;

  addressesProvider: TypedContractMethod<[], [string], "view">;

  computeLiquidationRepayAmount: TypedContractMethod<
    [
      _user: AddressLike,
      _poolTokenBorrowedAddress: AddressLike,
      _poolTokenCollateralAddress: AddressLike
    ],
    [bigint],
    "view"
  >;

  getAdvancedMarketData: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        p2pSupplyIndex: bigint;
        p2pBorrowIndex: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
        lastUpdateTimestamp: bigint;
        p2pSupplyDelta: bigint;
        p2pBorrowDelta: bigint;
      }
    ],
    "view"
  >;

  getAllMarkets: TypedContractMethod<[], [string[]], "view">;

  getAverageBorrowRatePerYear: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint] & {
        avgBorrowRatePerYear: bigint;
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  getAverageSupplyRatePerYear: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint] & {
        avgSupplyRatePerYear: bigint;
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
      }
    ],
    "view"
  >;

  getCurrentBorrowBalanceInOf: TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getCurrentP2PBorrowIndex: TypedContractMethod<
    [_poolToken: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentP2PSupplyIndex: TypedContractMethod<
    [_poolToken: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentSupplyBalanceInOf: TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getCurrentUserBorrowRatePerYear: TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;

  getCurrentUserSupplyRatePerYear: TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;

  getEnteredMarkets: TypedContractMethod<
    [_user: AddressLike],
    [string[]],
    "view"
  >;

  getIndexes: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyIndex: bigint;
        p2pBorrowIndex: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
      }
    ],
    "view"
  >;

  getMainMarketData: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        avgSupplyRatePerYear: bigint;
        avgBorrowRatePerYear: bigint;
        p2pSupplyAmount: bigint;
        p2pBorrowAmount: bigint;
        poolSupplyAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  getMarketConfiguration: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        underlying: string;
        isCreated: boolean;
        isP2PDisabled: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        reserveFactor: bigint;
        p2pIndexCursor: bigint;
        loanToValue: bigint;
        liquidationThreshold: bigint;
        liquidationBonus: bigint;
        decimals: bigint;
      }
    ],
    "view"
  >;

  getNextUserBorrowRatePerYear: TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike, _amount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        nextBorrowRatePerYear: bigint;
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getNextUserSupplyRatePerYear: TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike, _amount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        nextSupplyRatePerYear: bigint;
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;

  getRatesPerYear: TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyRate: bigint;
        p2pBorrowRate: bigint;
        poolSupplyRate: bigint;
        poolBorrowRate: bigint;
      }
    ],
    "view"
  >;

  getTotalBorrow: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
        totalBorrowAmount: bigint;
      }
    ],
    "view"
  >;

  getTotalMarketBorrow: TypedContractMethod<
    [_poolToken: AddressLike],
    [[bigint, bigint] & { p2pBorrowAmount: bigint; poolBorrowAmount: bigint }],
    "view"
  >;

  getTotalMarketSupply: TypedContractMethod<
    [_poolToken: AddressLike],
    [[bigint, bigint] & { p2pSupplyAmount: bigint; poolSupplyAmount: bigint }],
    "view"
  >;

  getTotalSupply: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
        totalSupplyAmount: bigint;
      }
    ],
    "view"
  >;

  getUserBalanceStates: TypedContractMethod<
    [_user: AddressLike],
    [Types.LiquidityDataStructOutput],
    "view"
  >;

  getUserHealthFactor: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  getUserHypotheticalBalanceStates: TypedContractMethod<
    [
      _user: AddressLike,
      _poolToken: AddressLike,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish
    ],
    [Types.LiquidityDataStructOutput],
    "view"
  >;

  getUserHypotheticalHealthFactor: TypedContractMethod<
    [
      _user: AddressLike,
      _poolToken: AddressLike,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getUserLiquidityDataForAsset: TypedContractMethod<
    [_user: AddressLike, _poolToken: AddressLike, _oracle: AddressLike],
    [Types.AssetLiquidityDataStructOutput],
    "view"
  >;

  getUserMaxCapacitiesForAsset: TypedContractMethod<
    [_user: AddressLike, _poolToken: AddressLike],
    [[bigint, bigint] & { withdrawable: bigint; borrowable: bigint }],
    "view"
  >;

  isLiquidatable: TypedContractMethod<[_user: AddressLike], [boolean], "view">;

  isMarketCreated: TypedContractMethod<
    [_poolToken: AddressLike],
    [boolean],
    "view"
  >;

  isMarketCreatedAndNotPaused: TypedContractMethod<
    [_poolToken: AddressLike],
    [boolean],
    "view"
  >;

  isMarketCreatedAndNotPausedNorPartiallyPaused: TypedContractMethod<
    [_poolToken: AddressLike],
    [boolean],
    "view"
  >;

  morpho: TypedContractMethod<[], [string], "view">;

  pool: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_LIQUIDATION_CLOSE_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "HEALTH_FACTOR_LIQUIDATION_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "_getCurrentBorrowBalanceInOf"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        underlyingToken: string;
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_getCurrentSupplyBalanceInOf"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        underlyingToken: string;
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_getIndexes"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [string, bigint, bigint, bigint, bigint] & {
        underlyingToken: string;
        p2pSupplyIndex: bigint;
        p2pBorrowIndex: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_getTotalMarketBorrow"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [string, bigint, bigint] & {
        underlyingToken: string;
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "_getTotalMarketSupply"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [string, bigint, bigint] & {
        underlyingToken: string;
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "addressesProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "computeLiquidationRepayAmount"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _poolTokenBorrowedAddress: AddressLike,
      _poolTokenCollateralAddress: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAdvancedMarketData"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        p2pSupplyIndex: bigint;
        p2pBorrowIndex: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
        lastUpdateTimestamp: bigint;
        p2pSupplyDelta: bigint;
        p2pBorrowDelta: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAverageBorrowRatePerYear"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint] & {
        avgBorrowRatePerYear: bigint;
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAverageSupplyRatePerYear"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint] & {
        avgSupplyRatePerYear: bigint;
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentBorrowBalanceInOf"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentP2PBorrowIndex"
  ): TypedContractMethod<[_poolToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentP2PSupplyIndex"
  ): TypedContractMethod<[_poolToken: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentSupplyBalanceInOf"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentUserBorrowRatePerYear"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentUserSupplyRatePerYear"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEnteredMarkets"
  ): TypedContractMethod<[_user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getIndexes"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyIndex: bigint;
        p2pBorrowIndex: bigint;
        poolSupplyIndex: bigint;
        poolBorrowIndex: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMainMarketData"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        avgSupplyRatePerYear: bigint;
        avgBorrowRatePerYear: bigint;
        p2pSupplyAmount: bigint;
        p2pBorrowAmount: bigint;
        poolSupplyAmount: bigint;
        poolBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarketConfiguration"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [
        string,
        boolean,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        underlying: string;
        isCreated: boolean;
        isP2PDisabled: boolean;
        isPaused: boolean;
        isPartiallyPaused: boolean;
        reserveFactor: bigint;
        p2pIndexCursor: bigint;
        loanToValue: bigint;
        liquidationThreshold: bigint;
        liquidationBonus: bigint;
        decimals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextUserBorrowRatePerYear"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike, _amount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        nextBorrowRatePerYear: bigint;
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextUserSupplyRatePerYear"
  ): TypedContractMethod<
    [_poolToken: AddressLike, _user: AddressLike, _amount: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        nextSupplyRatePerYear: bigint;
        balanceInP2P: bigint;
        balanceOnPool: bigint;
        totalBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRatesPerYear"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        p2pSupplyRate: bigint;
        p2pBorrowRate: bigint;
        poolSupplyRate: bigint;
        poolBorrowRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalBorrow"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        p2pBorrowAmount: bigint;
        poolBorrowAmount: bigint;
        totalBorrowAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalMarketBorrow"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [[bigint, bigint] & { p2pBorrowAmount: bigint; poolBorrowAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalMarketSupply"
  ): TypedContractMethod<
    [_poolToken: AddressLike],
    [[bigint, bigint] & { p2pSupplyAmount: bigint; poolSupplyAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalSupply"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        p2pSupplyAmount: bigint;
        poolSupplyAmount: bigint;
        totalSupplyAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBalanceStates"
  ): TypedContractMethod<
    [_user: AddressLike],
    [Types.LiquidityDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserHealthFactor"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserHypotheticalBalanceStates"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _poolToken: AddressLike,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish
    ],
    [Types.LiquidityDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserHypotheticalHealthFactor"
  ): TypedContractMethod<
    [
      _user: AddressLike,
      _poolToken: AddressLike,
      _withdrawnAmount: BigNumberish,
      _borrowedAmount: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserLiquidityDataForAsset"
  ): TypedContractMethod<
    [_user: AddressLike, _poolToken: AddressLike, _oracle: AddressLike],
    [Types.AssetLiquidityDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserMaxCapacitiesForAsset"
  ): TypedContractMethod<
    [_user: AddressLike, _poolToken: AddressLike],
    [[bigint, bigint] & { withdrawable: bigint; borrowable: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLiquidatable"
  ): TypedContractMethod<[_user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMarketCreated"
  ): TypedContractMethod<[_poolToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMarketCreatedAndNotPaused"
  ): TypedContractMethod<[_poolToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMarketCreatedAndNotPausedNorPartiallyPaused"
  ): TypedContractMethod<[_poolToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "morpho"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
