/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ComptrollerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_become"
      | "_setBorrowCapGuardian"
      | "_setBorrowPaused"
      | "_setCloseFactor"
      | "_setCollateralFactor"
      | "_setLiquidationIncentive"
      | "_setMarketBorrowCaps"
      | "_setMarketSupplyCaps"
      | "_setMintPaused"
      | "_setPauseGuardian"
      | "_setPriceOracle"
      | "_setRewardDistributor"
      | "_setSeizePaused"
      | "_setSupplyCapGuardian"
      | "_setTransferPaused"
      | "_supportMarket"
      | "accountAssets"
      | "admin"
      | "allMarkets"
      | "borrowAllowed"
      | "borrowCapGuardian"
      | "borrowCaps"
      | "borrowGuardianPaused"
      | "borrowVerify"
      | "checkMembership"
      | "claimComp(address,address[])"
      | "claimComp(address[],address[],bool,bool)"
      | "claimComp(address)"
      | "closeFactorMantissa"
      | "comptrollerImplementation"
      | "enterMarkets"
      | "exitMarket"
      | "getAccountLiquidity"
      | "getAllMarkets"
      | "getAssetsIn"
      | "getBlockNumber"
      | "getHypotheticalAccountLiquidity"
      | "isComptroller"
      | "isDeprecated"
      | "liquidateBorrowAllowed"
      | "liquidateBorrowVerify"
      | "liquidateCalculateSeizeTokens"
      | "liquidationIncentiveMantissa"
      | "markets"
      | "mintAllowed"
      | "mintGuardianPaused"
      | "mintVerify"
      | "oracle"
      | "pauseGuardian"
      | "pendingAdmin"
      | "pendingComptrollerImplementation"
      | "redeemAllowed"
      | "redeemVerify"
      | "repayBorrowAllowed"
      | "repayBorrowVerify"
      | "rewardDistributor"
      | "seizeAllowed"
      | "seizeGuardianPaused"
      | "seizeVerify"
      | "supplyCapGuardian"
      | "supplyCaps"
      | "transferAllowed"
      | "transferGuardianPaused"
      | "transferVerify"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ActionPaused(string,bool)"
      | "ActionPaused(address,string,bool)"
      | "Failure"
      | "MarketEntered"
      | "MarketExited"
      | "MarketListed"
      | "NewBorrowCap"
      | "NewBorrowCapGuardian"
      | "NewCloseFactor"
      | "NewCollateralFactor"
      | "NewLiquidationIncentive"
      | "NewPauseGuardian"
      | "NewPriceOracle"
      | "NewRewardDistributor"
      | "NewSupplyCap"
      | "NewSupplyCapGuardian"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_become",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setBorrowCapGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setBorrowPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCloseFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setCollateralFactor",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setLiquidationIncentive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMarketBorrowCaps",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMarketSupplyCaps",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_setMintPaused",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPauseGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPriceOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setRewardDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setSeizePaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_setSupplyCapGuardian",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setTransferPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "_supportMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "accountAssets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCapGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowCaps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowGuardianPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowVerify",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMembership",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimComp(address,address[])",
    values: [AddressLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimComp(address[],address[],bool,bool)",
    values: [AddressLike[], AddressLike[], boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "claimComp(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFactorMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "comptrollerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enterMarkets",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLiquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetsIn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHypotheticalAccountLiquidity",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isComptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDeprecated",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrowAllowed",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateBorrowVerify",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateCalculateSeizeTokens",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationIncentiveMantissa",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintGuardianPaused",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintVerify",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingComptrollerImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAllowed",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemVerify",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowAllowed",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBorrowVerify",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seizeAllowed",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seizeGuardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "seizeVerify",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCapGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyCaps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllowed",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferGuardianPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferVerify",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_become", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_setBorrowCapGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setBorrowPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCloseFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setLiquidationIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMarketBorrowCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMarketSupplyCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setMintPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setSeizePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setSupplyCapGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setTransferPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_supportMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowCapGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrowCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimComp(address,address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimComp(address[],address[],bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimComp(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeFactorMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "comptrollerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHypotheticalAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isComptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeprecated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateCalculateSeizeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationIncentiveMantissa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintVerify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingComptrollerImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayBorrowVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seizeVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyCapGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supplyCaps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferGuardianPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferVerify",
    data: BytesLike
  ): Result;
}

export namespace ActionPaused_string_bool_Event {
  export type InputTuple = [action: string, pauseState: boolean];
  export type OutputTuple = [action: string, pauseState: boolean];
  export interface OutputObject {
    action: string;
    pauseState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionPaused_address_string_bool_Event {
  export type InputTuple = [
    cToken: AddressLike,
    action: string,
    pauseState: boolean
  ];
  export type OutputTuple = [
    cToken: string,
    action: string,
    pauseState: boolean
  ];
  export interface OutputObject {
    cToken: string;
    action: string;
    pauseState: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailureEvent {
  export type InputTuple = [
    error: BigNumberish,
    info: BigNumberish,
    detail: BigNumberish
  ];
  export type OutputTuple = [error: bigint, info: bigint, detail: bigint];
  export interface OutputObject {
    error: bigint;
    info: bigint;
    detail: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketEnteredEvent {
  export type InputTuple = [cToken: AddressLike, account: AddressLike];
  export type OutputTuple = [cToken: string, account: string];
  export interface OutputObject {
    cToken: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketExitedEvent {
  export type InputTuple = [cToken: AddressLike, account: AddressLike];
  export type OutputTuple = [cToken: string, account: string];
  export interface OutputObject {
    cToken: string;
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketListedEvent {
  export type InputTuple = [cToken: AddressLike];
  export type OutputTuple = [cToken: string];
  export interface OutputObject {
    cToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBorrowCapEvent {
  export type InputTuple = [cToken: AddressLike, newBorrowCap: BigNumberish];
  export type OutputTuple = [cToken: string, newBorrowCap: bigint];
  export interface OutputObject {
    cToken: string;
    newBorrowCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewBorrowCapGuardianEvent {
  export type InputTuple = [
    oldBorrowCapGuardian: AddressLike,
    newBorrowCapGuardian: AddressLike
  ];
  export type OutputTuple = [
    oldBorrowCapGuardian: string,
    newBorrowCapGuardian: string
  ];
  export interface OutputObject {
    oldBorrowCapGuardian: string;
    newBorrowCapGuardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewCloseFactorEvent {
  export type InputTuple = [
    oldCloseFactorMantissa: BigNumberish,
    newCloseFactorMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldCloseFactorMantissa: bigint,
    newCloseFactorMantissa: bigint
  ];
  export interface OutputObject {
    oldCloseFactorMantissa: bigint;
    newCloseFactorMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewCollateralFactorEvent {
  export type InputTuple = [
    cToken: AddressLike,
    oldCollateralFactorMantissa: BigNumberish,
    newCollateralFactorMantissa: BigNumberish
  ];
  export type OutputTuple = [
    cToken: string,
    oldCollateralFactorMantissa: bigint,
    newCollateralFactorMantissa: bigint
  ];
  export interface OutputObject {
    cToken: string;
    oldCollateralFactorMantissa: bigint;
    newCollateralFactorMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewLiquidationIncentiveEvent {
  export type InputTuple = [
    oldLiquidationIncentiveMantissa: BigNumberish,
    newLiquidationIncentiveMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldLiquidationIncentiveMantissa: bigint,
    newLiquidationIncentiveMantissa: bigint
  ];
  export interface OutputObject {
    oldLiquidationIncentiveMantissa: bigint;
    newLiquidationIncentiveMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPauseGuardianEvent {
  export type InputTuple = [
    oldPauseGuardian: AddressLike,
    newPauseGuardian: AddressLike
  ];
  export type OutputTuple = [
    oldPauseGuardian: string,
    newPauseGuardian: string
  ];
  export interface OutputObject {
    oldPauseGuardian: string;
    newPauseGuardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPriceOracleEvent {
  export type InputTuple = [
    oldPriceOracle: AddressLike,
    newPriceOracle: AddressLike
  ];
  export type OutputTuple = [oldPriceOracle: string, newPriceOracle: string];
  export interface OutputObject {
    oldPriceOracle: string;
    newPriceOracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewRewardDistributorEvent {
  export type InputTuple = [
    oldRewardDistributor: AddressLike,
    newRewardDistributor: AddressLike
  ];
  export type OutputTuple = [
    oldRewardDistributor: string,
    newRewardDistributor: string
  ];
  export interface OutputObject {
    oldRewardDistributor: string;
    newRewardDistributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSupplyCapEvent {
  export type InputTuple = [cToken: AddressLike, newSupplyCap: BigNumberish];
  export type OutputTuple = [cToken: string, newSupplyCap: bigint];
  export interface OutputObject {
    cToken: string;
    newSupplyCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewSupplyCapGuardianEvent {
  export type InputTuple = [
    oldSupplyCapGuardian: AddressLike,
    newSupplyCapGuardian: AddressLike
  ];
  export type OutputTuple = [
    oldSupplyCapGuardian: string,
    newSupplyCapGuardian: string
  ];
  export interface OutputObject {
    oldSupplyCapGuardian: string;
    newSupplyCapGuardian: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Comptroller extends BaseContract {
  connect(runner?: ContractRunner | null): Comptroller;
  waitForDeployment(): Promise<this>;

  interface: ComptrollerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _become: TypedContractMethod<[unitroller: AddressLike], [void], "nonpayable">;

  _setBorrowCapGuardian: TypedContractMethod<
    [newBorrowCapGuardian: AddressLike],
    [void],
    "nonpayable"
  >;

  _setBorrowPaused: TypedContractMethod<
    [cToken: AddressLike, state: boolean],
    [boolean],
    "nonpayable"
  >;

  _setCloseFactor: TypedContractMethod<
    [newCloseFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _setCollateralFactor: TypedContractMethod<
    [cToken: AddressLike, newCollateralFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _setLiquidationIncentive: TypedContractMethod<
    [newLiquidationIncentiveMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _setMarketBorrowCaps: TypedContractMethod<
    [cTokens: AddressLike[], newBorrowCaps: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  _setMarketSupplyCaps: TypedContractMethod<
    [cTokens: AddressLike[], newSupplyCaps: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  _setMintPaused: TypedContractMethod<
    [cToken: AddressLike, state: boolean],
    [boolean],
    "nonpayable"
  >;

  _setPauseGuardian: TypedContractMethod<
    [newPauseGuardian: AddressLike],
    [bigint],
    "nonpayable"
  >;

  _setPriceOracle: TypedContractMethod<
    [newOracle: AddressLike],
    [bigint],
    "nonpayable"
  >;

  _setRewardDistributor: TypedContractMethod<
    [newRewardDistributor: AddressLike],
    [void],
    "nonpayable"
  >;

  _setSeizePaused: TypedContractMethod<
    [state: boolean],
    [boolean],
    "nonpayable"
  >;

  _setSupplyCapGuardian: TypedContractMethod<
    [newSupplyCapGuardian: AddressLike],
    [void],
    "nonpayable"
  >;

  _setTransferPaused: TypedContractMethod<
    [state: boolean],
    [boolean],
    "nonpayable"
  >;

  _supportMarket: TypedContractMethod<
    [cToken: AddressLike],
    [bigint],
    "nonpayable"
  >;

  accountAssets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  allMarkets: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  borrowAllowed: TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, borrowAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  borrowCapGuardian: TypedContractMethod<[], [string], "view">;

  borrowCaps: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  borrowGuardianPaused: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  borrowVerify: TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkMembership: TypedContractMethod<
    [account: AddressLike, cToken: AddressLike],
    [boolean],
    "view"
  >;

  "claimComp(address,address[])": TypedContractMethod<
    [holder: AddressLike, cTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  "claimComp(address[],address[],bool,bool)": TypedContractMethod<
    [
      holders: AddressLike[],
      cTokens: AddressLike[],
      borrowers: boolean,
      suppliers: boolean
    ],
    [void],
    "nonpayable"
  >;

  "claimComp(address)": TypedContractMethod<
    [holder: AddressLike],
    [void],
    "nonpayable"
  >;

  closeFactorMantissa: TypedContractMethod<[], [bigint], "view">;

  comptrollerImplementation: TypedContractMethod<[], [string], "view">;

  enterMarkets: TypedContractMethod<
    [cTokens: AddressLike[]],
    [bigint[]],
    "nonpayable"
  >;

  exitMarket: TypedContractMethod<
    [cTokenAddress: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getAccountLiquidity: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getAllMarkets: TypedContractMethod<[], [string[]], "view">;

  getAssetsIn: TypedContractMethod<[account: AddressLike], [string[]], "view">;

  getBlockNumber: TypedContractMethod<[], [bigint], "view">;

  getHypotheticalAccountLiquidity: TypedContractMethod<
    [
      account: AddressLike,
      cTokenModify: AddressLike,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  isComptroller: TypedContractMethod<[], [boolean], "view">;

  isDeprecated: TypedContractMethod<[cToken: AddressLike], [boolean], "view">;

  liquidateBorrowAllowed: TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  liquidateBorrowVerify: TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  liquidateCalculateSeizeTokens: TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      actualRepayAmount: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;

  liquidationIncentiveMantissa: TypedContractMethod<[], [bigint], "view">;

  markets: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: bigint;
        isComped: boolean;
      }
    ],
    "view"
  >;

  mintAllowed: TypedContractMethod<
    [cToken: AddressLike, minter: AddressLike, mintAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  mintGuardianPaused: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  mintVerify: TypedContractMethod<
    [
      cToken: AddressLike,
      minter: AddressLike,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  oracle: TypedContractMethod<[], [string], "view">;

  pauseGuardian: TypedContractMethod<[], [string], "view">;

  pendingAdmin: TypedContractMethod<[], [string], "view">;

  pendingComptrollerImplementation: TypedContractMethod<[], [string], "view">;

  redeemAllowed: TypedContractMethod<
    [cToken: AddressLike, redeemer: AddressLike, redeemTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  redeemVerify: TypedContractMethod<
    [
      cToken: AddressLike,
      redeemer: AddressLike,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  repayBorrowAllowed: TypedContractMethod<
    [
      cToken: AddressLike,
      payer: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  repayBorrowVerify: TypedContractMethod<
    [
      cToken: AddressLike,
      payer: AddressLike,
      borrower: AddressLike,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  rewardDistributor: TypedContractMethod<[], [string], "view">;

  seizeAllowed: TypedContractMethod<
    [
      cTokenCollateral: AddressLike,
      cTokenBorrowed: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      seizeTokens: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  seizeGuardianPaused: TypedContractMethod<[], [boolean], "view">;

  seizeVerify: TypedContractMethod<
    [
      cTokenCollateral: AddressLike,
      cTokenBorrowed: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      seizeTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supplyCapGuardian: TypedContractMethod<[], [string], "view">;

  supplyCaps: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferAllowed: TypedContractMethod<
    [
      cToken: AddressLike,
      src: AddressLike,
      dst: AddressLike,
      transferTokens: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  transferGuardianPaused: TypedContractMethod<[], [boolean], "view">;

  transferVerify: TypedContractMethod<
    [
      cToken: AddressLike,
      src: AddressLike,
      dst: AddressLike,
      transferTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_become"
  ): TypedContractMethod<[unitroller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "_setBorrowCapGuardian"
  ): TypedContractMethod<
    [newBorrowCapGuardian: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setBorrowPaused"
  ): TypedContractMethod<
    [cToken: AddressLike, state: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setCloseFactor"
  ): TypedContractMethod<
    [newCloseFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setCollateralFactor"
  ): TypedContractMethod<
    [cToken: AddressLike, newCollateralFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setLiquidationIncentive"
  ): TypedContractMethod<
    [newLiquidationIncentiveMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setMarketBorrowCaps"
  ): TypedContractMethod<
    [cTokens: AddressLike[], newBorrowCaps: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setMarketSupplyCaps"
  ): TypedContractMethod<
    [cTokens: AddressLike[], newSupplyCaps: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setMintPaused"
  ): TypedContractMethod<
    [cToken: AddressLike, state: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setPauseGuardian"
  ): TypedContractMethod<
    [newPauseGuardian: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setPriceOracle"
  ): TypedContractMethod<[newOracle: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "_setRewardDistributor"
  ): TypedContractMethod<
    [newRewardDistributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setSeizePaused"
  ): TypedContractMethod<[state: boolean], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "_setSupplyCapGuardian"
  ): TypedContractMethod<
    [newSupplyCapGuardian: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setTransferPaused"
  ): TypedContractMethod<[state: boolean], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "_supportMarket"
  ): TypedContractMethod<[cToken: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "accountAssets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allMarkets"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "borrowAllowed"
  ): TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, borrowAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "borrowCapGuardian"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "borrowCaps"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowGuardianPaused"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "borrowVerify"
  ): TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike, borrowAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkMembership"
  ): TypedContractMethod<
    [account: AddressLike, cToken: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimComp(address,address[])"
  ): TypedContractMethod<
    [holder: AddressLike, cTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimComp(address[],address[],bool,bool)"
  ): TypedContractMethod<
    [
      holders: AddressLike[],
      cTokens: AddressLike[],
      borrowers: boolean,
      suppliers: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimComp(address)"
  ): TypedContractMethod<[holder: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeFactorMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "comptrollerImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "enterMarkets"
  ): TypedContractMethod<[cTokens: AddressLike[]], [bigint[]], "nonpayable">;
  getFunction(
    nameOrSignature: "exitMarket"
  ): TypedContractMethod<[cTokenAddress: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getAccountLiquidity"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAllMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAssetsIn"
  ): TypedContractMethod<[account: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHypotheticalAccountLiquidity"
  ): TypedContractMethod<
    [
      account: AddressLike,
      cTokenModify: AddressLike,
      redeemTokens: BigNumberish,
      borrowAmount: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isComptroller"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDeprecated"
  ): TypedContractMethod<[cToken: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "liquidateBorrowAllowed"
  ): TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidateBorrowVerify"
  ): TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      actualRepayAmount: BigNumberish,
      seizeTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidateCalculateSeizeTokens"
  ): TypedContractMethod<
    [
      cTokenBorrowed: AddressLike,
      cTokenCollateral: AddressLike,
      actualRepayAmount: BigNumberish
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidationIncentiveMantissa"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, boolean] & {
        isListed: boolean;
        collateralFactorMantissa: bigint;
        isComped: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mintAllowed"
  ): TypedContractMethod<
    [cToken: AddressLike, minter: AddressLike, mintAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintGuardianPaused"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintVerify"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      minter: AddressLike,
      actualMintAmount: BigNumberish,
      mintTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseGuardian"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingComptrollerImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemAllowed"
  ): TypedContractMethod<
    [cToken: AddressLike, redeemer: AddressLike, redeemTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemVerify"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      redeemer: AddressLike,
      redeemAmount: BigNumberish,
      redeemTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayBorrowAllowed"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      payer: AddressLike,
      borrower: AddressLike,
      repayAmount: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "repayBorrowVerify"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      payer: AddressLike,
      borrower: AddressLike,
      actualRepayAmount: BigNumberish,
      borrowerIndex: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rewardDistributor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "seizeAllowed"
  ): TypedContractMethod<
    [
      cTokenCollateral: AddressLike,
      cTokenBorrowed: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      seizeTokens: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "seizeGuardianPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "seizeVerify"
  ): TypedContractMethod<
    [
      cTokenCollateral: AddressLike,
      cTokenBorrowed: AddressLike,
      liquidator: AddressLike,
      borrower: AddressLike,
      seizeTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyCapGuardian"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supplyCaps"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferAllowed"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      src: AddressLike,
      dst: AddressLike,
      transferTokens: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferGuardianPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferVerify"
  ): TypedContractMethod<
    [
      cToken: AddressLike,
      src: AddressLike,
      dst: AddressLike,
      transferTokens: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ActionPaused(string,bool)"
  ): TypedContractEvent<
    ActionPaused_string_bool_Event.InputTuple,
    ActionPaused_string_bool_Event.OutputTuple,
    ActionPaused_string_bool_Event.OutputObject
  >;
  getEvent(
    key: "ActionPaused(address,string,bool)"
  ): TypedContractEvent<
    ActionPaused_address_string_bool_Event.InputTuple,
    ActionPaused_address_string_bool_Event.OutputTuple,
    ActionPaused_address_string_bool_Event.OutputObject
  >;
  getEvent(
    key: "Failure"
  ): TypedContractEvent<
    FailureEvent.InputTuple,
    FailureEvent.OutputTuple,
    FailureEvent.OutputObject
  >;
  getEvent(
    key: "MarketEntered"
  ): TypedContractEvent<
    MarketEnteredEvent.InputTuple,
    MarketEnteredEvent.OutputTuple,
    MarketEnteredEvent.OutputObject
  >;
  getEvent(
    key: "MarketExited"
  ): TypedContractEvent<
    MarketExitedEvent.InputTuple,
    MarketExitedEvent.OutputTuple,
    MarketExitedEvent.OutputObject
  >;
  getEvent(
    key: "MarketListed"
  ): TypedContractEvent<
    MarketListedEvent.InputTuple,
    MarketListedEvent.OutputTuple,
    MarketListedEvent.OutputObject
  >;
  getEvent(
    key: "NewBorrowCap"
  ): TypedContractEvent<
    NewBorrowCapEvent.InputTuple,
    NewBorrowCapEvent.OutputTuple,
    NewBorrowCapEvent.OutputObject
  >;
  getEvent(
    key: "NewBorrowCapGuardian"
  ): TypedContractEvent<
    NewBorrowCapGuardianEvent.InputTuple,
    NewBorrowCapGuardianEvent.OutputTuple,
    NewBorrowCapGuardianEvent.OutputObject
  >;
  getEvent(
    key: "NewCloseFactor"
  ): TypedContractEvent<
    NewCloseFactorEvent.InputTuple,
    NewCloseFactorEvent.OutputTuple,
    NewCloseFactorEvent.OutputObject
  >;
  getEvent(
    key: "NewCollateralFactor"
  ): TypedContractEvent<
    NewCollateralFactorEvent.InputTuple,
    NewCollateralFactorEvent.OutputTuple,
    NewCollateralFactorEvent.OutputObject
  >;
  getEvent(
    key: "NewLiquidationIncentive"
  ): TypedContractEvent<
    NewLiquidationIncentiveEvent.InputTuple,
    NewLiquidationIncentiveEvent.OutputTuple,
    NewLiquidationIncentiveEvent.OutputObject
  >;
  getEvent(
    key: "NewPauseGuardian"
  ): TypedContractEvent<
    NewPauseGuardianEvent.InputTuple,
    NewPauseGuardianEvent.OutputTuple,
    NewPauseGuardianEvent.OutputObject
  >;
  getEvent(
    key: "NewPriceOracle"
  ): TypedContractEvent<
    NewPriceOracleEvent.InputTuple,
    NewPriceOracleEvent.OutputTuple,
    NewPriceOracleEvent.OutputObject
  >;
  getEvent(
    key: "NewRewardDistributor"
  ): TypedContractEvent<
    NewRewardDistributorEvent.InputTuple,
    NewRewardDistributorEvent.OutputTuple,
    NewRewardDistributorEvent.OutputObject
  >;
  getEvent(
    key: "NewSupplyCap"
  ): TypedContractEvent<
    NewSupplyCapEvent.InputTuple,
    NewSupplyCapEvent.OutputTuple,
    NewSupplyCapEvent.OutputObject
  >;
  getEvent(
    key: "NewSupplyCapGuardian"
  ): TypedContractEvent<
    NewSupplyCapGuardianEvent.InputTuple,
    NewSupplyCapGuardianEvent.OutputTuple,
    NewSupplyCapGuardianEvent.OutputObject
  >;

  filters: {
    "ActionPaused(string,bool)": TypedContractEvent<
      ActionPaused_string_bool_Event.InputTuple,
      ActionPaused_string_bool_Event.OutputTuple,
      ActionPaused_string_bool_Event.OutputObject
    >;
    "ActionPaused(address,string,bool)": TypedContractEvent<
      ActionPaused_address_string_bool_Event.InputTuple,
      ActionPaused_address_string_bool_Event.OutputTuple,
      ActionPaused_address_string_bool_Event.OutputObject
    >;

    "Failure(uint256,uint256,uint256)": TypedContractEvent<
      FailureEvent.InputTuple,
      FailureEvent.OutputTuple,
      FailureEvent.OutputObject
    >;
    Failure: TypedContractEvent<
      FailureEvent.InputTuple,
      FailureEvent.OutputTuple,
      FailureEvent.OutputObject
    >;

    "MarketEntered(address,address)": TypedContractEvent<
      MarketEnteredEvent.InputTuple,
      MarketEnteredEvent.OutputTuple,
      MarketEnteredEvent.OutputObject
    >;
    MarketEntered: TypedContractEvent<
      MarketEnteredEvent.InputTuple,
      MarketEnteredEvent.OutputTuple,
      MarketEnteredEvent.OutputObject
    >;

    "MarketExited(address,address)": TypedContractEvent<
      MarketExitedEvent.InputTuple,
      MarketExitedEvent.OutputTuple,
      MarketExitedEvent.OutputObject
    >;
    MarketExited: TypedContractEvent<
      MarketExitedEvent.InputTuple,
      MarketExitedEvent.OutputTuple,
      MarketExitedEvent.OutputObject
    >;

    "MarketListed(address)": TypedContractEvent<
      MarketListedEvent.InputTuple,
      MarketListedEvent.OutputTuple,
      MarketListedEvent.OutputObject
    >;
    MarketListed: TypedContractEvent<
      MarketListedEvent.InputTuple,
      MarketListedEvent.OutputTuple,
      MarketListedEvent.OutputObject
    >;

    "NewBorrowCap(address,uint256)": TypedContractEvent<
      NewBorrowCapEvent.InputTuple,
      NewBorrowCapEvent.OutputTuple,
      NewBorrowCapEvent.OutputObject
    >;
    NewBorrowCap: TypedContractEvent<
      NewBorrowCapEvent.InputTuple,
      NewBorrowCapEvent.OutputTuple,
      NewBorrowCapEvent.OutputObject
    >;

    "NewBorrowCapGuardian(address,address)": TypedContractEvent<
      NewBorrowCapGuardianEvent.InputTuple,
      NewBorrowCapGuardianEvent.OutputTuple,
      NewBorrowCapGuardianEvent.OutputObject
    >;
    NewBorrowCapGuardian: TypedContractEvent<
      NewBorrowCapGuardianEvent.InputTuple,
      NewBorrowCapGuardianEvent.OutputTuple,
      NewBorrowCapGuardianEvent.OutputObject
    >;

    "NewCloseFactor(uint256,uint256)": TypedContractEvent<
      NewCloseFactorEvent.InputTuple,
      NewCloseFactorEvent.OutputTuple,
      NewCloseFactorEvent.OutputObject
    >;
    NewCloseFactor: TypedContractEvent<
      NewCloseFactorEvent.InputTuple,
      NewCloseFactorEvent.OutputTuple,
      NewCloseFactorEvent.OutputObject
    >;

    "NewCollateralFactor(address,uint256,uint256)": TypedContractEvent<
      NewCollateralFactorEvent.InputTuple,
      NewCollateralFactorEvent.OutputTuple,
      NewCollateralFactorEvent.OutputObject
    >;
    NewCollateralFactor: TypedContractEvent<
      NewCollateralFactorEvent.InputTuple,
      NewCollateralFactorEvent.OutputTuple,
      NewCollateralFactorEvent.OutputObject
    >;

    "NewLiquidationIncentive(uint256,uint256)": TypedContractEvent<
      NewLiquidationIncentiveEvent.InputTuple,
      NewLiquidationIncentiveEvent.OutputTuple,
      NewLiquidationIncentiveEvent.OutputObject
    >;
    NewLiquidationIncentive: TypedContractEvent<
      NewLiquidationIncentiveEvent.InputTuple,
      NewLiquidationIncentiveEvent.OutputTuple,
      NewLiquidationIncentiveEvent.OutputObject
    >;

    "NewPauseGuardian(address,address)": TypedContractEvent<
      NewPauseGuardianEvent.InputTuple,
      NewPauseGuardianEvent.OutputTuple,
      NewPauseGuardianEvent.OutputObject
    >;
    NewPauseGuardian: TypedContractEvent<
      NewPauseGuardianEvent.InputTuple,
      NewPauseGuardianEvent.OutputTuple,
      NewPauseGuardianEvent.OutputObject
    >;

    "NewPriceOracle(address,address)": TypedContractEvent<
      NewPriceOracleEvent.InputTuple,
      NewPriceOracleEvent.OutputTuple,
      NewPriceOracleEvent.OutputObject
    >;
    NewPriceOracle: TypedContractEvent<
      NewPriceOracleEvent.InputTuple,
      NewPriceOracleEvent.OutputTuple,
      NewPriceOracleEvent.OutputObject
    >;

    "NewRewardDistributor(address,address)": TypedContractEvent<
      NewRewardDistributorEvent.InputTuple,
      NewRewardDistributorEvent.OutputTuple,
      NewRewardDistributorEvent.OutputObject
    >;
    NewRewardDistributor: TypedContractEvent<
      NewRewardDistributorEvent.InputTuple,
      NewRewardDistributorEvent.OutputTuple,
      NewRewardDistributorEvent.OutputObject
    >;

    "NewSupplyCap(address,uint256)": TypedContractEvent<
      NewSupplyCapEvent.InputTuple,
      NewSupplyCapEvent.OutputTuple,
      NewSupplyCapEvent.OutputObject
    >;
    NewSupplyCap: TypedContractEvent<
      NewSupplyCapEvent.InputTuple,
      NewSupplyCapEvent.OutputTuple,
      NewSupplyCapEvent.OutputObject
    >;

    "NewSupplyCapGuardian(address,address)": TypedContractEvent<
      NewSupplyCapGuardianEvent.InputTuple,
      NewSupplyCapGuardianEvent.OutputTuple,
      NewSupplyCapGuardianEvent.OutputObject
    >;
    NewSupplyCapGuardian: TypedContractEvent<
      NewSupplyCapGuardianEvent.InputTuple,
      NewSupplyCapGuardianEvent.OutputTuple,
      NewSupplyCapGuardianEvent.OutputObject
    >;
  };
}
