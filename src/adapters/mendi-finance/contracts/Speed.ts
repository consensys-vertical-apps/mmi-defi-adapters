/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface SpeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_grantReward"
      | "_updateRewardSpeeds"
      | "_whitelistToken"
      | "claim"
      | "comptroller"
      | "getBlockNumber"
      | "getRewardTokens"
      | "initialize"
      | "notifyBorrowIndex"
      | "notifyBorrower"
      | "notifySupplier"
      | "notifySupplyIndex"
      | "owner"
      | "renounceOwnership"
      | "rewardAccountState"
      | "rewardInitialIndex"
      | "rewardMarketState"
      | "rewardTokenExists"
      | "rewardTokens"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BorrowSpeedUpdated"
      | "Initialized"
      | "OwnershipTransferred"
      | "RewardAccrued"
      | "RewardGranted"
      | "SupplySpeedUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_grantReward",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_updateRewardSpeeds",
    values: [AddressLike, AddressLike[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "_whitelistToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "comptroller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyBorrowIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyBorrower",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifySupplier",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "notifySupplyIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAccountState",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardMarketState",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenExists",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_grantReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_updateRewardSpeeds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comptroller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyBorrower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifySupplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifySupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAccountState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardMarketState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BorrowSpeedUpdatedEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    cToken: AddressLike,
    borrowSpeed: BigNumberish
  ];
  export type OutputTuple = [
    rewardToken: string,
    cToken: string,
    borrowSpeed: bigint
  ];
  export interface OutputObject {
    rewardToken: string;
    cToken: string;
    borrowSpeed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardAccruedEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    user: AddressLike,
    deltaAccrued: BigNumberish,
    totalAccrued: BigNumberish
  ];
  export type OutputTuple = [
    rewardToken: string,
    user: string,
    deltaAccrued: bigint,
    totalAccrued: bigint
  ];
  export interface OutputObject {
    rewardToken: string;
    user: string;
    deltaAccrued: bigint;
    totalAccrued: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardGrantedEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    user: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [rewardToken: string, user: string, amount: bigint];
  export interface OutputObject {
    rewardToken: string;
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SupplySpeedUpdatedEvent {
  export type InputTuple = [
    rewardToken: AddressLike,
    cToken: AddressLike,
    supplySpeed: BigNumberish
  ];
  export type OutputTuple = [
    rewardToken: string,
    cToken: string,
    supplySpeed: bigint
  ];
  export interface OutputObject {
    rewardToken: string;
    cToken: string;
    supplySpeed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Speed extends BaseContract {
  connect(runner?: ContractRunner | null): Speed;
  waitForDeployment(): Promise<this>;

  interface: SpeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _grantReward: TypedContractMethod<
    [token: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  _updateRewardSpeeds: TypedContractMethod<
    [
      rewardToken_: AddressLike,
      cTokens: AddressLike[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  _whitelistToken: TypedContractMethod<
    [rewardToken_: AddressLike],
    [void],
    "nonpayable"
  >;

  claim: TypedContractMethod<[holders: AddressLike[]], [void], "nonpayable">;

  comptroller: TypedContractMethod<[], [string], "view">;

  getBlockNumber: TypedContractMethod<[], [bigint], "view">;

  getRewardTokens: TypedContractMethod<[], [string[]], "view">;

  initialize: TypedContractMethod<
    [comptroller_: AddressLike],
    [void],
    "nonpayable"
  >;

  notifyBorrowIndex: TypedContractMethod<
    [cToken: AddressLike],
    [void],
    "nonpayable"
  >;

  notifyBorrower: TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike],
    [void],
    "nonpayable"
  >;

  notifySupplier: TypedContractMethod<
    [cToken: AddressLike, supplier: AddressLike],
    [void],
    "nonpayable"
  >;

  notifySupplyIndex: TypedContractMethod<
    [cToken: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardAccountState: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  rewardInitialIndex: TypedContractMethod<[], [bigint], "view">;

  rewardMarketState: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        supplySpeed: bigint;
        supplyIndex: bigint;
        supplyBlock: bigint;
        borrowSpeed: bigint;
        borrowIndex: bigint;
        borrowBlock: bigint;
      }
    ],
    "view"
  >;

  rewardTokenExists: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  rewardTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_grantReward"
  ): TypedContractMethod<
    [token: AddressLike, user: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_updateRewardSpeeds"
  ): TypedContractMethod<
    [
      rewardToken_: AddressLike,
      cTokens: AddressLike[],
      supplySpeeds: BigNumberish[],
      borrowSpeeds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_whitelistToken"
  ): TypedContractMethod<[rewardToken_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[holders: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "comptroller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getBlockNumber"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[comptroller_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "notifyBorrowIndex"
  ): TypedContractMethod<[cToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "notifyBorrower"
  ): TypedContractMethod<
    [cToken: AddressLike, borrower: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifySupplier"
  ): TypedContractMethod<
    [cToken: AddressLike, supplier: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "notifySupplyIndex"
  ): TypedContractMethod<[cToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardAccountState"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardInitialIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardMarketState"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint] & {
        supplySpeed: bigint;
        supplyIndex: bigint;
        supplyBlock: bigint;
        borrowSpeed: bigint;
        borrowIndex: bigint;
        borrowBlock: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rewardTokenExists"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "rewardTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BorrowSpeedUpdated"
  ): TypedContractEvent<
    BorrowSpeedUpdatedEvent.InputTuple,
    BorrowSpeedUpdatedEvent.OutputTuple,
    BorrowSpeedUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardAccrued"
  ): TypedContractEvent<
    RewardAccruedEvent.InputTuple,
    RewardAccruedEvent.OutputTuple,
    RewardAccruedEvent.OutputObject
  >;
  getEvent(
    key: "RewardGranted"
  ): TypedContractEvent<
    RewardGrantedEvent.InputTuple,
    RewardGrantedEvent.OutputTuple,
    RewardGrantedEvent.OutputObject
  >;
  getEvent(
    key: "SupplySpeedUpdated"
  ): TypedContractEvent<
    SupplySpeedUpdatedEvent.InputTuple,
    SupplySpeedUpdatedEvent.OutputTuple,
    SupplySpeedUpdatedEvent.OutputObject
  >;

  filters: {
    "BorrowSpeedUpdated(address,address,uint256)": TypedContractEvent<
      BorrowSpeedUpdatedEvent.InputTuple,
      BorrowSpeedUpdatedEvent.OutputTuple,
      BorrowSpeedUpdatedEvent.OutputObject
    >;
    BorrowSpeedUpdated: TypedContractEvent<
      BorrowSpeedUpdatedEvent.InputTuple,
      BorrowSpeedUpdatedEvent.OutputTuple,
      BorrowSpeedUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardAccrued(address,address,uint256,uint256)": TypedContractEvent<
      RewardAccruedEvent.InputTuple,
      RewardAccruedEvent.OutputTuple,
      RewardAccruedEvent.OutputObject
    >;
    RewardAccrued: TypedContractEvent<
      RewardAccruedEvent.InputTuple,
      RewardAccruedEvent.OutputTuple,
      RewardAccruedEvent.OutputObject
    >;

    "RewardGranted(address,address,uint256)": TypedContractEvent<
      RewardGrantedEvent.InputTuple,
      RewardGrantedEvent.OutputTuple,
      RewardGrantedEvent.OutputObject
    >;
    RewardGranted: TypedContractEvent<
      RewardGrantedEvent.InputTuple,
      RewardGrantedEvent.OutputTuple,
      RewardGrantedEvent.OutputObject
    >;

    "SupplySpeedUpdated(address,address,uint256)": TypedContractEvent<
      SupplySpeedUpdatedEvent.InputTuple,
      SupplySpeedUpdatedEvent.OutputTuple,
      SupplySpeedUpdatedEvent.OutputObject
    >;
    SupplySpeedUpdated: TypedContractEvent<
      SupplySpeedUpdatedEvent.InputTuple,
      SupplySpeedUpdatedEvent.OutputTuple,
      SupplySpeedUpdatedEvent.OutputObject
    >;
  };
}
